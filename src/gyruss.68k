*
* Gyruss 68k port by JOTD
*
* /***************************************************************************
*
* Gyruss memory map (preliminary)
*
* Main processor memory map.
* 0000-5fff ROM (6000-7fff diagnostics)
* 8000-83ff Color RAM
* 8400-87ff Video RAM
* 9000-a7ff RAM
* a000-a17f \ sprites
* a200-a27f /
*
* memory mapped ports:
*
* read:
* c080      IN0  (system inputs)
* c0a0      IN1
* c0c0      IN2
* c0e0      DSW1
* c000      DSW2
* c100      DSW3
*
* write:
* a000-a1ff  Odd frame spriteram
* a200-a3ff  Even frame spriteram
* a700       Frame odd or even?
* a701       Semaphore system:  tells 6809 to draw queued sprites
* a702       Semaphore system:  tells 6809 to queue sprites
* c000       watchdog reset
* c080       trigger interrupt on audio CPU
* c100       command for the audio CPU
* c180       interrupt enable
* c185       flip screen
*
*	map(0x0000, 0x7fff).rom();
*	map(0x8000, 0x83ff).ram().share(m_colorram);
*	map(0x8400, 0x87ff).ram().share(m_videoram);
*	map(0x9000, 0x9fff).ram();
*	map(0xa000, 0xa7ff).ram().share("main_cpus");
*	map(0xc000, 0xc000).portr("DSW2").nopw();   // watchdog reset
*	map(0xc080, 0xc080).portr("SYSTEM").w(FUNC(gyruss_state::sh_irqtrigger_w));
*	map(0xc0a0, 0xc0a0).portr("P1");
*	map(0xc0c0, 0xc0c0).portr("P2");
*	map(0xc0e0, 0xc0e0).portr("DSW1");
*	map(0xc100, 0xc100).portr("DSW3").w("soundlatch", FUNC(generic_latch_8_device::write));
*	map(0xc180, 0xc187).w("mainlatch", FUNC(ls259_device::write_d0));

* interrupts:
* standard NMI at 0x66
*
*
* SOUND BOARD:
* 0000-3fff  Audio ROM (4000-5fff diagnostics)
* 6000-63ff  Audio RAM
* 8000       Read Sound Command
*
* I/O:
*
* Gyruss has 5 PSGs:
* 1)  Control: 0x00    Read: 0x01    Write: 0x02
* 2)  Control: 0x04    Read: 0x05    Write: 0x06
* 3)  Control: 0x08    Read: 0x09    Write: 0x0a
* 4)  Control: 0x0c    Read: 0x0d    Write: 0x0e
* 5)  Control: 0x10    Read: 0x11    Write: 0x12
*
* and 1 SFX channel controlled by an 8039:
* 1)  SoundOn: 0x14    SoundData: 0x18
*
*	PORT_START("SYSTEM")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_COIN1 )
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_COIN2 )
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_SERVICE1 )
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_START1 )
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_START2 )
*	PORT_BIT( 0xe0, IP_ACTIVE_LOW, IPT_UNUSED )
*
*	PORT_START("P1")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT )  PORT_2WAY
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_2WAY
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP )    PORT_2WAY
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN )  PORT_2WAY
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 )
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )    // 1p shoot 2 - unused
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNUSED )
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNUSED )
*
*	PORT_START("P2")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT )  PORT_2WAY PORT_COCKTAIL
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_2WAY PORT_COCKTAIL
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_UP )    PORT_2WAY PORT_COCKTAIL
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN )  PORT_2WAY PORT_COCKTAIL
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 ) PORT_COCKTAIL
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_UNKNOWN )    // 2p shoot 2 - unused
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNUSED )
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNUSED )
*
*	PORT_START("DSW1")
*	KONAMI_COINAGE_LOC(DEF_STR( Free_Play ), DEF_STR( Free_Play ), SW1)
*
*	PORT_START("DSW2")
*	PORT_DIPNAME( 0x03, 0x03, DEF_STR( Lives ) )            PORT_DIPLOCATION("SW2:1,2")
*	PORT_DIPSETTING(    0x03, "3" )
*	PORT_DIPSETTING(    0x02, "4" )
*	PORT_DIPSETTING(    0x01, "5" )
*	PORT_DIPSETTING(    0x00, "255 (Cheat)")
*	PORT_DIPNAME( 0x04, 0x00, DEF_STR( Cabinet ) )          PORT_DIPLOCATION("SW2:3")
*	PORT_DIPSETTING(    0x00, DEF_STR( Upright ) )
*	PORT_DIPSETTING(    0x04, DEF_STR( Cocktail ) )
*	PORT_DIPNAME( 0x08, 0x08, DEF_STR( Bonus_Life ) )       PORT_DIPLOCATION("SW2:4")     // tables at 0x1653 (15 bytes) or 0x4bf3 (13 bytes)
*	PORT_DIPSETTING(    0x08, "30k 90k 60k+" )              // last bonus life at 810k : max. 14 bonus lives
*	PORT_DIPSETTING(    0x00, "40k 110k 70k+" )             // last bonus life at 810k : max. 12 bonus lives
*	PORT_DIPNAME( 0x70, 0x30, DEF_STR( Difficulty ) )       PORT_DIPLOCATION("SW2:5,6,7")
*	PORT_DIPSETTING(    0x70, "1 (Easiest)" )
*	PORT_DIPSETTING(    0x60, "2" )
*	PORT_DIPSETTING(    0x50, "3" )
*	PORT_DIPSETTING(    0x40, "4" )
*	PORT_DIPSETTING(    0x30, "5 (Average)" )
*	PORT_DIPSETTING(    0x20, "6" )
*	PORT_DIPSETTING(    0x10, "7" )
*	PORT_DIPSETTING(    0x00, "8 (Hardest)" )
*	PORT_DIPNAME( 0x80, 0x00, DEF_STR( Demo_Sounds ) )      PORT_DIPLOCATION("SW2:8")
*	PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
*
*	PORT_START("DSW3")
*	PORT_DIPNAME( 0x01, 0x00, "Demo Music" )                PORT_DIPLOCATION("SW3:1")
*	PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
*	PORT_DIPUNUSED_DIPLOC(0xfe, IP_ACTIVE_LOW, "SW3:2,3,4,5,6,7,8")


	.include	"gyruss.inc"
	.include	"data.inc"
	
	.macro CLEAR_XC_FLAGS
	move.w	d7,-(a7)
	moveq	#0,d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro SET_XC_FLAGS
	move.w	d7,-(a7)
	st	d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	INVERT_XC_FLAGS
	jcs	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm



	.macro	SET_X_FROM_C
	jcc	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm
	.macro	SET_C_FROM_X
	move.w	d7,-(a7)
	roxl.b	#1,d7
	roxr.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	LOAD_D1_16_FROM_D1D2
	and.l	#0xFFFF,d1
	lsl.w	#8,d1
	move.b	d2,d1
	.endm
	
	.macro	ROXL_A0
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$0a31: rl   (hl)]
	move.b	d7,(a0)                           	| [$0a33: inc  hl]	
	.endm
	
	.macro	ROXL_A0_PLUS
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$0a31: rl   (hl)]
	move.b	d7,(a0)+                           	| [$0a33: inc  hl]	
	.endm

* those macros use rol/ror instead of lsl/lsr
* which doesn't clear MSB/LSB but matters much less than
* leaving X untouched for next operations
*
* it wasn't much of a problem most previous ports 
* but Gyruss needs X after a add.w d3,d5 because it calls
* shifting_on_d5d6_1bc3 which needs D5.W => D5/D6 right after.
* The original lsr implementation cleared X which caused issues

	.macro	LOAD_D3_16_FROM_D3D4
	rol.w	#8,d3
	move.b	d4,d3
	.endm
	.macro	LOAD_D5_16_FROM_D5D6
	rol.w	#8,d5
	move.b	d6,d5
	.endm
	.macro	LOAD_D1D2_FROM_D1_16
	move.b	d1,d2
	ror.w	#8,d1
	.endm
	.macro	LOAD_D5D6_FROM_D5_16
	move.b	d5,d6
	ror.w	#8,d5
	.endm
	.macro	LOAD_D3D4_FROM_D3_16
	move.b	d3,d4
	ror.w	#8,d3
	.endm

	.macro	LOAD_D3D4_FROM_A1_ROM
	move.l	a1,d3
	sub.l	a5,d3
	.ifndef	RELEASE
	jpl		1111f
	BREAKPOINT	"invalid ROM pointer in A1"
1111:
	.endif
	LOAD_D3D4_FROM_D3_16
	.endm
	
	.macro	LOAD_D5D6_FROM_A0_RAM
	move.l	a0,d5		| read pointer in data reg
	sub.l	a6,d5		| subtract ram base
	bset	#15,d5		| add 8000
	LOAD_D5D6_FROM_D5_16 | dispatch in D5/D6
	.endm
	
	.macro	LOAD_A1_FROM_D3D4_ROM
	LOAD_D3_16_FROM_D3D4
	cmp.w	#0x6000,d3
	.ifndef	RELEASE
	jcs		1111f
	BREAKPOINT	"invalid ROM pointer in F3"
1111:
	.endif
	lea		(a5,d3.w),a1
	.endm
	
	.macro	LOAD_A0_FROM_D5_16_RAM
	* this is a RAM address
	sub.w	#0x8000,d5
	.ifndef	RELEASE
	jpl		555f
	add.w	#0x8000,d5
	BREAKPOINT	"D5 doesn't contain a RAM address"
	illegal
555:
	cmp.w	#0x2800,d5
	jcc		555b
	.endif
	lea		(a6,d5.w),a0
	.endm

	.macro	LOAD_A1_FROM_D3_16_RAM
	* this is a RAM address
	sub.w	#0x8000,d3
	.ifndef	RELEASE
	jpl		555f
	add.w	#0x8000,d3
	BREAKPOINT	"D3 doesn't contain a RAM address"
	illegal
555:
	cmp.w	#0x2800,d3
	jcc		555b
	.endif
	lea		(a6,d3.w),a1
	.endm

	.macro	LOAD_A0_FROM_D5D6_RAM
	LOAD_D5_16_FROM_D5D6
	* this is a RAM address
	LOAD_A0_FROM_D5_16_RAM
	.endm
	
	.macro	LOAD_A1_FROM_D3D4_RAM
	LOAD_D3_16_FROM_D3D4
	* this is a RAM address
	LOAD_A1_FROM_D3_16_RAM
	.endm
	
	
	.macro	LOAD_D1D2_FROM_A2_RAM
	move.l	a2,d1		| read pointer in data reg
	sub.l	a6,d1		| subtract ram base
	bset	#15,d1		| add 8000
	LOAD_D1D2_FROM_D1_16
	.endm
	
	.macro	READ_ROM_BYTE		offset,dest
	move.b	(a5,\offset),\dest
	.endm
	
	.macro	READ_ROM_WORD		offset,dest
	moveq	#0,\dest
	* little endian
	READ_ROM_BYTE	\offset+1,\dest
	rol.w	#8,\dest
	READ_ROM_BYTE	\offset,\dest
	.endm
	
	.macro	STORE_RAM_POINTER  src,dest
	move.l	d7,-(a7)
	move.l	\src,d7
	sub.l	a6,d7
	.ifndef	RELEASE
	jpl		111f
	add.l	a6,d7
	BREAKPOINT	"D7 < not in RAM!"
111:
	cmp.w	#0x2800,d7
	jcs		112f
	BREAKPOINT	"D7 > not in RAM!"	
112:
	.endif
	add.l	#0x8000,d7
	move.b	d7,\dest
	rol.w	#8,d7
	move.b	d7,1+\dest
	move.l	(a7)+,d7
	.endm

	.macro	STORE_VIDEO_POINTER	src,dest
	move.l	d7,-(a7)
	move.l	\src,d7
	move.b	d7,\dest
	rol.w	#8,d7
	move.b	d7,1+\dest
	move.l	(a7)+,d7
	.endm
	
	.macro	LOAD_VIDEO_POINTER  src,dest
	move.l	d7,-(a7)
	moveq	#0,d7
	move.b	1+\src,d7
	rol.w	#8,d7
	move.b	\src,d7
	move.l	d7,\dest
	move.l	(a7)+,d7
	.endm
	
	.macro	LOAD_RAM_POINTER  src,dest
	move.l	d7,-(a7)
	moveq	#0,d7
	move.b	1+\src,d7
	rol.w	#8,d7
	move.b	\src,d7
	add.l	a6,d7
	sub.l	#0x8000,d7
	move.l	d7,\dest
	move.l	(a7)+,d7
	.endm

	.macro	STORE_WORD  src,dest
	move.b	\src,\dest
	rol.w	#8,\src
	move.b	\src,1+\dest
	rol.w	#8,\src
	.endm

	.macro	LOAD_WORD  src,dest
	moveq	#0,\dest
	move.b	1+\src,\dest
	rol.w	#8,\dest
	move.b	\src,\dest
	.endm

	.macro	LEA_ROM	offset,dest
	lea		(a5,\offset),\dest
	.endm
	
	.macro	BSET_Ax	bitnum,dreg,areg
	move.l	\areg,\dreg
	bset	#\bitnum,\dreg
	move.l	\dreg,\areg
	.endm
	
	.macro	BCLR_Ax	bitnum,dreg,areg
	move.l	\areg,\dreg
	bclr	#\bitnum,\dreg
	move.l	\dreg,\areg
	.endm
	
	.macro	BSET_A1	bitnum
	BSET_Ax	\bitnum,d3,a1
	.endm
	
	.macro	BCLR_A1	bitnum
	BCLR_Ax	\bitnum,d3,a1
	.endm
	
	.macro	BSET_A0	bitnum
	BSET_Ax	\bitnum,d5,a0
	.endm
	
	.macro	BCLR_A0	bitnum
	BCLR_Ax	\bitnum,d5,a0
	.endm
	
	
	.macro	WRITE_VIDEORAM	param
	move.w	d0,-(a7)
	move.b	#\param,d0
	jbsr	osd_w_videoram
	move.w	(a7)+,d0
	.endm
	
	.macro	WRITE_D0_VIDEORAM	param
	move.l	a0,-(a7)
	move.l	#\param,a0
	jbsr	osd_w_videoram
	move.l	(a7)+,a0
	.endm


* add_d0_to_a0_0018: add A to HL, update L
* this is called a lot, so let's inline it
	.macro	ADD_D0_TO_A0_0018
	and.w	#0xFF,d0                            	| [$0018: add  a,l]
	add.w	d0,a0                           	| [$0019: ld   l,a]
											| [$001b: inc  h]
	.endm                                    	| [$001c: ret]

	.ifndef	RELEASE
	

	* to trace at some virtual PCs, insert this macro
	
	.macro	LOG_REGS	z80pc
	move.w	sr,-(a7)
	move.w	#0x\z80pc,-(a7)
	move.w	#0,-(a7)
	jbsr	osd_log_cpu
	addq.w	#4,a7
	move.w	(a7)+,sr
	.endm
	
	.macro	ENABLE_REGS_LOG
	moveq	#1,d6		| enable
	moveq	#0,d7		| main cpu
	jbsr	osd_cpu_logging_control	
	.endm
	.macro	DISABLE_REGS_LOG
	moveq	#0,d6		| disable
	moveq	#0,d7		| main cpu
	jbsr	osd_cpu_logging_control	
	.endm	
	.endif
	

set_active_draw_semaphore:
	move.b	#1,draw_queued_sprites_flag_a701(a6)   
	rts
set_active_queue_semaphore:
	move.b	#1,queue_sprites_flag_a702(a6)   
	rts
	
set_inactive_draw_semaphore:
	clr.b	draw_queued_sprites_flag_a701(a6)   
	rts
set_inactive_queue_semaphore:
	clr.b	queue_sprites_flag_a702(a6)   
	rts


read_videoram_a0:
	move.l	a0,-(a7)
	sub.l	#0x8000,a0
	move.b	(a6,a0.w),d0
	move.l	(a7)+,a0
	rts
	
write_videoram_a1:
	exg	a0,a1
	jbsr	osd_w_videoram
	exg	a0,a1
	rts
load_video_ram_d5_to_a0:
	move.w	d5,-(a7)
	sub.w	#0x8000,d5
	.ifndef	RELEASE
	jpl		0f
1:
	add.w	#0x8000,d5
	BREAKPOINT	"wrong RAM address in D5"
	illegal
0:
	cmp.w	#0x800,d5
	jcc		1b
	.endif
	lea		(a6,d5.w),a0
	move.w	(a7)+,d5
	rts
	
	.global	gyruss_irq
	.global	gyruss_reset
	
enemy_active_00 = 0x00
ship_angle_01 = 0x01	| 0: right, 40: down, 80: left, C0: up
active_01 = 0x01     | for death ray emitter
fine_x_02 = 0x02
fine_y_03 = 0x03
orientation_04 = 0x04
ship_fine_angle_05 = 0x05
enemy_appear_timer_08 = 0x08
enemy_attack_phase_09 = 0x09
enemy_state_0a = 0x0a

* for sprite structures (0x9800, 0xA000, 0x4040)
displayed_y_00 = 0x00
sprite_code_01 = 0x01
sprite_code_02 = 0x02
displayed_x_03 = 0x03

cpu_init:
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	moveq	#0,d4
	moveq	#0,d5
	moveq	#0,d6
	moveq	#0,d7
	rts

* fetch_a0_plus_d0_0008: HL+=A then (HL) => A
fetch_a0_plus_d0_0008:
	and.w	#0xFF,d0            | [$0008: add  a,l]
	add.w	d0,a0               | [$0009: ld   l,a]
	                         	| [$000a: jr   nc,$000D]
	                          	| [$000c: inc  h]
	move.b	(a0),d0             | [$000d: ld   a,(hl)]
	rts                         | [$000e: ret]

* load_rom_pointer_in_a1_d3_0010: loads address in HL indexed by A
* as 16 bit address in DE
* 68000: loads ROM data in A1, offset in D3 
* < D0.B: index
load_rom_pointer_in_a1_d3_0010:
	add.b	d0,d0                            	| [$0010: add  a,a]
	ADD_D0_TO_A0_0018                            	| [$0011: rst  $18]
	moveq	#0,d3
	move.b	(a0)+,d4                         	| [$0012: ld   e,(hl)]
	                           	| [$0013: inc  hl]
	move.b	(a0)+,d3                         	| [$0014: ld   d,(hl)]
	                           	| [$0015: inc  hl]
	LOAD_D3_16_FROM_D3D4
	.ifndef RELEASE
	cmp.w	#0x6000,d3
	jcs		0f
	BREAKPOINT	"ROM offset out of range (in D3)"
0:
	.endif
	lea		(a5,d3.w),a1		| can't be > 0x7FFF word add is ok
	rts                                    	| [$0016: ret]

* load_rom_pointer_in_a1_d3_0010: loads address in HL indexed by A
* as 16 bit address in DE
* 68000: loads ROM data in A1, offset in D3 
load_word_in_d3_0010:
	add.b	d0,d0                            	| [$0010: add  a,a]
	ADD_D0_TO_A0_0018                            	| [$0011: rst  $18]
	move.b	(a0)+,d4                         	| [$0012: ld   e,(hl)]
	                           	| [$0013: inc  hl]
	move.b	(a0)+,d3                         	| [$0014: ld   d,(hl)]
	                           	| [$0015: inc  hl]
	LOAD_D3_16_FROM_D3D4
	rts                                    	| [$0016: ret]


* sub_20_to_a1_0020: subtract 0x20 to DE
sub_20_to_a1_0020:
	                          	| [$0020: ld   a,e]
	sub.w	#0x20,a1                         	| [$0021: sub  $20]
	                           	| [$0023: ld   e,a]
	rts                                    	| [$0024: ret  nc] [...]
0:
	                        	| [$0025: dec  d]
	                       	| [$0026: ret]

* jump_table_jump_0030: convert the pushed HL jump table
* (which is right after the rst 30 instruction)
jump_table_jump_0030:
* plus index to address and jump to it
	move.l	(sp)+,a0                        	| [$0030: pop  hl]
	and.w	#0xFF,d0                              	| [$0032: ex   de,hl]
	add.w	d0,d0
	add.w	d0,d0
	add.w	d0,a0
	move.l	(a0),a0
	jra	(a0)                               	| [$0033: jp   (hl)]

* start_task_d3_0038
start_task_d3d4_0038:
	LOAD_D3_16_FROM_D3D4
start_task_d3_0038:
	move.w	d3,-(sp)
	move.l	a0,-(sp)                        	| [$0038: push hl]
	moveq	#0,d6
	lea		task_array_9500(a6),a0                        	| [$0039: ld   h,$95]
	move.b	rolling_task_index_9432(a6),d6          | [$003b: ld   a,($9432)]
	                           	| [$003e: ld   l,a]
	add.w	d6,a0
	btst.b	#7,(a0)                         	| [$003f: bit  7,(hl)]
	jeq	l_004d                             	| [$0041: jr   z,$004D]
	LOAD_D3D4_FROM_D3_16
	move.b	d3,(a0)+                         	| [$0043: ld   (hl),d]
	                           	| [$0044: inc  l]
	move.b	d4,(a0)+                         	| [$0045: ld   (hl),e]
	                           	| [$0046: inc  l]
	addq	#2,d6			| follow A0
	                           	| [$0047: ld   a,l]
	and.b	#0x3F,d6                         	| [$0048: and  $3F]
	move.b	d6,rolling_task_index_9432(a6)      | [$004a: ld   ($9432),a]
l_004d:
	move.l	(sp)+,a0                        	| [$004d: pop  hl]
	move.w	(sp)+,d3
	rts                                    	| [$004e: ret]

l_0050:
	lea	l_960A(a6),a0                      	| [$0050: ld   hl,$960A]
	addq.b	#2,(a0)                         	| [$0053: inc  (hl)] * 2
	rts                                    	| [$0055: ret]

	* reached when completing the second level
l_0058:
*out  ($FF),a
	jbsr	music_off_5c88                            	| [$005a: call $5C88]
	rts                                    	| [$005d: ret]

l_0066:
	jra	l_0103                             	| [$0066: jp   $0103]

l_0069:
*	lea		stack_top,a7                       	| [$0069: ld   sp,$A000]
*	lea	l_C180,a0                          	| [$006c: ld   hl,$C180]
*	move.b	#0x08,d1                        	| [$006f: ld   b,$08]
*l_0071:
*	clr.b	(a0)                             	| [$0071: ld   (hl),$00]
*	addq.w	#1,a0                           	| [$0073: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_0071                             	| [$0074: djnz $0071]
                       	| [$0076: ld   (watchdog_C000),a]
*	clr.b	d1                               	| [$0079: ld   b,$00]
*	move.w	#0x0000,d5                      	| [$007b: ld   hl,$0000]
*	clr.b	d0                               	| [$007e: xor  a]
*l_007f:
*	add.b	(a0)+,d0                          	| [$007f: add  a,(hl)]
*	addq.w	#1,a0                           	| [$0080: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_007f                             	| [$0081: djnz $007F]
	* result of the checksum
	move.b	#0x21,d0                        	| [$0083: sub  $00]
	                             	| [$0085: jp   $0088]

l_0088:
	jra	clear_ram_57dc                             	| [$0088: jp   $57DC]

l_008b:
	jbsr	play_sound_5c38                            	| [$008b: call $5C38]
	* strange way to enable interrupts
	READ_ROM_BYTE	0x0991,d0                       	| [$008e: ld   a,($0991)]
	jbsr	osd_interrupt_control                       	| [$0091: ld   ($C180),a]
                       	| [$0094: ld   (watchdog_C000),a]
	jra	execute_commands_loop_05f4                             	| [$0097: jp   $05F7]

l_009a:
	lea	0x8420,a0                          	| [$009a: ld   hl,$8420]
	move.b	#0x0E,d2                        	| [$009d: ld   c,$0E]
l_009f:
	move.w	#0x0020,d3                      	| [$009f: ld   de,$0020]
	add.w	d3,a0                            	| [$00a2: add  hl,de]
	move.b	#0x10,d1                        	| [$00a3: ld   b,$10]
l_00a5:
	jbsr	write_to_screen_00B0              	| [$00a5: call write_to_screen_00B0]
	addq.w	#2,a0                           	| [$00a8: inc  hl] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_00a5                             	| [$00aa: djnz $00A5]
	subq.b	#1,d2                           	| [$00ac: dec  c]
	jne	l_009f                             	| [$00ad: jr   nz,$009F]
	rts                                    	| [$00af: ret]

write_to_screen_00B0:
	movem.l	d0/a0,-(sp)                        	| [$00b0: push hl]
	move.b	#0xAF,d0                      	| [$00b1: ld   (hl),$AF]
	jbsr	osd_w_videoram
	addq.w	#1,a0                           	| [$00b3: inc  hl]
	move.b	#0x4F,d0                      	| [$00b4: ld   (hl),$4F]
	jbsr	osd_w_videoram
	move.w	#0x001F,d3                      	| [$00b6: ld   de,$001F]
	add.w	d3,a0                            	| [$00b9: add  hl,de]
	move.b	#0x05,d0                      	| [$00ba: ld   (hl),$05]
	jbsr	osd_w_videoram
	addq.w	#1,a0                           	| [$00bc: inc  hl]
	move.b	#0x86,d0                      	| [$00bd: ld   (hl),$86]
	jbsr	osd_w_videoram
	movem.l	(sp)+,d0/a0                        	| [$00bf: pop  hl]
	rts                                    	| [$00c0: ret]

switch_to_game_demo_00f9:
	lea		(0x063B,a6),a0                         	| [$00f9: ld   hl,$863B]
	move.b	(a0),d0                         	| [$00fc: ld   a,(hl)]
	sub.b	#0xEE,d0                         	| [$00fd: sub  $EE]
	beq.b	0f                               	| [...]
	rts                                    	| [$00ff: ret  nz] [...]
0:
l_0100:
	jra	next_game_state_080b                             	| [$0100: jp   $080B]

* ********************************
* IRQ routine, enter with A5 set to ROM,
* A6 set to ram (0x8000)
* ********************************

gyruss_irq:
	jbsr	cpu_init
l_0103:
									| [$0103: push af]
									| [$0104: push bc]
									| [$0104: push bc]
									| [$0105: push de]
									| [$0105: push de]
			
									| [$0106: push hl]
	* save exchanged registers                      	| [$0107: ex   af,af']
	jbsr	exx                               	| [$0108: exx]
	move.w	d0,-(sp)                        	| [$0109: push af]
	movem.w	d1/d2,-(sp)                    	| [$010a: push bc]
	move.l	a4,-(sp)                        	| [$010a: push bc]
	movem.w	d3/d4,-(sp)                    	| [$010b: push de]
	move.l	a1,-(sp)                        	| [$010b: push de]

	move.l	a0,-(sp)                        	| [$010c: push hl]

	move.l	a2,-(sp)                        	| [$010d: push ix]
	
	move.l	a3,-(sp)                        	| [$010f: push iy]
	lea		frame_odd_or_even_a700(a6),a0                          	| [$0111: ld   hl,$A700]
	move.b	(a0),d0                         	| [$0114: ld   a,(hl)]
	eor.b	#1,d0                           	| [$0115: inc  a]
												| [$0116: and  $01]
	move.b	d0,(a0)                         	| [$0118: ld   (hl),a]
	* unlocks 6809 sem wait		| [$0119: ld   a,$01]                     	| [$011b: ld   ($A701),a]
	* locks 6809 sem wait                 	| [$011e: xor  a]
	jbsr	osd_draw_sprites                       	| [$011f: ld   ($A702),a]
	
	jbsr	update_sprites_0244               	| [$0122: call update_sprites_0244]
	jbsr	osd_queue_sprites                      	| [$012b: ld   ($A702),a]
	* locks 6809 sem wait          	| [$0125: xor  a]
	                       	| [$0126: ld   ($A701),a]
	* unlocks 6809 sem wait| [$0129: ld   a,$01]
	
	* disable interrupts
	clr.b	d0                               	| [$012e: xor  a]
	jbsr	osd_interrupt_control                       	| [$012f: ld   ($C180),a]
                       	| [$0132: ld   (watchdog_C000),a]
	move.b	d0,is_screen_flipped_9407(a6)                   	| [$0135: ld   ($9407),a]
	move.b	current_player_9662(a6),d0                   	| [$0138: ld   a,($9662)]
	                               	| [$013b: and  a]
	jeq	l_0149                             	| [$013c: jr   z,$0149]
	move.b	cabinet_upright_9442(a6),d0                   	| [$013e: ld   a,($9442)] [uncovered]
											| [$0141: and  a] [uncovered]
	jne	l_0149                             	| [$0142: jr   nz,$0149] [uncovered]
	move.b	#0x01,d0                        	| [$0144: ld   a,$01] [uncovered]
	move.b	d0,is_screen_flipped_9407(a6)                   	| [$0146: ld   ($9407),a] [uncovered]
l_0149:
	                   	| [$0149: ld   a,($9407)]
	                       	| [$014c: ld   ($C185),a] flip screen
	jbsr	osd_read_dsw_2                     	| [$014f: ld   a,($C000)]
	not.b	d0                               	| [$0152: cpl]
	move.b	d0,copy_of_dsw2_942d(a6)                   	| [$0153: ld   ($942D),a]
	jbsr	osd_read_system_inputs            	| [$0156: ld   a,($C080)]
	not.b	d0                               	| [$0159: cpl]
	move.b	d0,copy_of_system_inputs_942E(a6)                   	| [$015a: ld   ($942E),a]
	jbsr	osd_read_inputs_1                       	| [$015d: ld   a,($C0A0)]
	not.b	d0                               	| [$0160: cpl]
	move.b	d0,copy_of_inputs_1_942F(a6)                   	| [$0161: ld   ($942F),a]
	jbsr	osd_read_inputs_2                       	| [$0164: ld   a,($C0C0)]
	not.b	d0                               	| [$0167: cpl]
	move.b	d0,copy_of_inputs_2_9430(a6)                   	| [$0168: ld   ($9430),a]
	jbsr	osd_read_dsw_1                       	| [$016b: ld   a,($C0E0)]
	not.b	d0                               	| [$016e: cpl]
	move.b	d0,copy_of_dsw1_9431(a6)                   	| [$016f: ld   ($9431),a]
	lea	general_fast_timer_9400(a6),a0                      	| [$0172: ld   hl,$9400]
	addq.b	#1,(a0)                         	| [$0175: inc  (hl)]
	* this is the same, but in BCD. Doesn't seem used at all, though
	CLEAR_XC_FLAGS
	lea	general_fast_bcd_timer_944e(a6),a0                      	| [$0176: ld   hl,$944E]
	move.b	(a0),d0                         	| [$0179: ld   a,(hl)]
	moveq	#1,d7
	abcd	d7,d0                           	| [$017a: inc  a] + daa
	move.b	d0,(a0)                         	| [$017c: ld   (hl),a]
	jbsr	l_10bc                            	| [$017d: call $10BC]
	* push return address
	pea		l_0192(pc)                          	| [$0180: ld   hl,$0192]

	                        	| [$0183: push hl]
	move.b	global_state_942B(a6),d0                   	| [$0184: ld   a,($942B)]
	and.b	#0x03,d0                         	| [$0187: and  $03]
	jbsr	jump_table_jump_0030                            	| [$0189: rst  $30]
* [jump_table]
	.long	global_state_init_0efe
	.long	global_state_title_screen_0f24
	.long	global_state_push_start_101f
	.long	global_state_demo_or_game_0828

l_0192:
	jbsr	l_5c1f                            	| [$0192: call $5C1F]
	move.l	(sp)+,a3                        	| [$0195: pop  iy]
	move.l	(sp)+,a2                        	| [$0197: pop  ix]
	move.l	(sp)+,a0                        	| [$0199: pop  hl]
	move.l	(sp)+,a1                        	| [$019a: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$019a: pop  de]
	move.l	(sp)+,a4                        	| [$019b: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$019b: pop  bc]
	move.w	(sp)+,d0                        	| [$019c: pop  af]
	* restore exchanged registers
	jbsr	exx                               	| [$019d: exx]
	                              	| [$019e: ex   af,af']
										| [$019f: pop  hl]
										| [$01a0: pop  de]
									| [$01a0: pop  de]
										| [$01a1: pop  bc]
									| [$01a1: pop  bc]
	 
	move.b	#0x01,d0                        	| [$01a2: ld   a,$01]
	jbsr	osd_interrupt_control               | [$01a4: ld   ($C180),a]
	                        	| [$01a7: pop  af]
	rts                                    	| [$01a8: ret]

l_01bb:
	move.w	#0x8400,d5                          	| [$01bb: ld   hl,$8400]
	STORE_WORD	d5,screen_address_9409(a6)        	| [$01be: ld   ($9409),hl]
	move.b	#0x20,d0                        	| [$01c1: ld   a,$20]
	move.b	d0,l_9408(a6)                   	| [$01c3: ld   ($9408),a]
*   ROM checksum
*	clr.b	d1                               	| [$01c6: ld   b,$00]
*	LEA_ROM	0x37A8,a0                          	| [$01c8: ld   hl,$37A8]
*	clr.b	d0                               	| [$01cb: xor  a]
*l_01cc:
*	add.b	(a0),d0                          	| [$01cc: add  a,(hl)]
*	addq.w	#1,a0                           	| [$01cd: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_01cc                             	| [$01ce: djnz $01CC]
*	sub.b	#0x3F,d0                         	| [$01d0: sub  $3F]
*	jne	l_dd0000                             	| [$01d2: jp   nz,$0000]
	rts                                    	| [$01d5: ret]

l_01d6:
	move.w	#0x8404,d5                          	| [$01d6: ld   hl,$8404]
	STORE_WORD	d5,screen_address_9409(a6)        	| [$01d9: ld   ($9409),hl]
	move.b	#0x1B,d0                        	| [$01dc: ld   a,$1B]
	move.b	d0,l_9408(a6)                   	| [$01de: ld   ($9408),a]
*   skip rom checksum
*	move.b	#0xF0,d1                        	| [$01e1: ld   b,$F0]
*	LEA_ROM	0x3900,a0                          	| [$01e3: ld   hl,$3900]
*	clr.b	d0                               	| [$01e6: xor  a]
*l_01e7:
*	add.b	(a0)+,d0                          	| [$01e7: add  a,(hl)]
*	                           	| [$01e8: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_01e7                             	| [$01e9: djnz $01E7]
*	sub.b	#0x1E,d0                         	| [$01eb: sub  $1E]
*	jne	l_0fab                             	| [$01ed: jp   nz,$0FAB]
	rts                                    	| [$01f0: ret]

clear_screen_row_0207:
	LOAD_WORD	screen_address_9409(a6),d5         	| [$0207: ld   hl,($9409)]
	move.b	#0x20,d1                        	| [$020a: ld   b,$20]
	move.w	#0x0020,d3                      	| [$020c: ld   de,$0020]
	move.l	d5,a0								| update A0
l_020f:
	move.b	#0x83,d0                      	| [$020f: ld   (hl),$83]
	jbsr	osd_w_videoram
	BCLR_A0	10                           	| [$0211: res  2,h]
	moveq	#0,d0                             	| [$0213: ld   (hl),$00]
	jbsr	osd_w_videoram
	bset	#10,d5                           	| [$0215: set  2,h]
	add.w	d3,d5                            	| [$0217: add  hl,de]
	move.l	d5,a0								| update A0
	subq.b	#1,d1                           	| [...]
	jne	l_020f                             	| [$0218: djnz $020F]
	* next column left
	LOAD_WORD	screen_address_9409(a6),d5         	| [$021a: ld   hl,($9409)]
	addq.w	#1,d5                           	| [$021d: inc  hl]
	STORE_WORD	d5,screen_address_9409(a6)        	| [$021e: ld   ($9409),hl]
	subq.b	#1,l_9408(a6)                      	| [$0221: ld   hl,$9408]
												| [$0224: dec  (hl)]
	rts                                    	| [$0225: ret]

update_sprites_0244:
											| [$0247: and  a]
	lea	sprite_shadow_ram_9800(a6),a0      	| [$0248: ld   hl,sprite_shadow_ram_9800]
	lea	sprite_ram_a000(a6),a1                          	| [$024b: ld   de,$A000]
	move.b	frame_odd_or_even_a700(a6),d0                       	| [$0244: ld   a,($A700)]
	jeq	l_0253                             	| [$024e: jr   z,$0253]
	lea	sprite_ram_a200(a6),a1                          	| [$0250: ld   de,$A200]
l_0253:
	move.w	#0xF0/8-1,d0
0:
	* copy 0xF0 bytes to sprite RAM
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	
	add.w	#0x10,a1        	| [$0433: inc  d]
	                           	| [$0434: ld   e,$00]
	* stars?
	lea	l_9900(a6),a0           | [$0436: ld   hl,$9900]
	move.w	#0x38/8-1,d0
0:
	* copy bytes to sprite RAM optimized with 32 bit copy + 1 byte copy
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	dbf		d0,0b
	move.b	(a0)+,(a1)+
	| DE = 0xA139, HL = 0x9939
	* skip code/clut (probably because 6809 sets star code there)
	addq.w	#2,a0                           	| [$04ab: inc  l] * 2
	addq.w	#2,a1                           	| [$04ad: inc  e] * 2
	move.b	(a0)+,(a1)+                         | [$04af: ldi]
	move.b	(a0)+,(a1)+                         | [$04b1: ldi]
	addq.w	#2,a0                           	| [$04b3: inc  l]
	addq.w	#2,a1                           	| [$04b5: inc  e]
	move.b	(a0)+,(a1)+                         | [$04b7: ldi]
	move.b	(a0)+,(a1)+                         | [$04b9: ldi]
	addq.w	#2,a0                           	| [$04bb: inc  l]
	addq.w	#2,a1                           	| [$04bd: inc  e]
	move.b	(a0)+,(a1)+                         | [$04bf: ldi]
	move.b	(a0)+,(a1)+                         | [$04c1: ldi]
	addq.w	#2,a0                           	| [$04c3: inc  l]
	addq.w	#2,a1                           	| [$04c5: inc  e]
	move.b	(a0)+,(a1)+                         | [$04c7: ldi]
	move.b	(a0)+,(a1)+                         | [$04c9: ldi]
	addq.w	#2,a0                           	| [$04cb: inc  l]
	addq.w	#2,a1                           	| [$04cd: inc  e]
	move.b	(a0)+,(a1)+                         | [$04cf: ldi]
	move.b	(a0)+,(a1)+                         | [$04d1: ldi]
	addq.w	#2,a0                           	| [$04d3: inc  l]
	addq.w	#2,a1                           	| [$04d5: inc  e]
	move.b	(a0)+,(a1)+                         | [$04d7: ldi]
	move.b	(a0)+,(a1)+                         | [$04d9: ldi]
	addq.w	#2,a0                           	| [$04db: inc  l]
	addq.w	#2,a1                           	| [$04dd: inc  e]
	move.b	(a0)+,(a1)+                         | [$04df: ldi]
	move.b	(a0)+,(a1)+                         | [$04e1: ldi]
	addq.w	#2,a0                           	| [$04e3: inc  l]
	addq.w	#2,a1                           	| [$04e5: inc  e]
	move.b	(a0)+,(a1)+                         | [$04e7: ldi]
	| DE = 0xA158, HL = 0x9958
	rts                                    	    | [$04e9: ret]

gyruss_reset:
	jbsr	cpu_init
	*lea		stack_top,a7
	lea		rom_base,a5
l_04f0:
								| [$04f0: ld   hl,$C180]
								| [$04f3: ld   b,$08]
		
								| [$04f5: ld   (hl),$00]
								| [$04f7: inc  hl]
								| [...]
								| [$04f8: djnz $04F5]
									| [$04fa: ld   a,($6000)]
										| [$04fd: cp   $55]
									| [$04ff: jp   z,$6000]
	clr.b	d0                               	| [$0502: xor  a]
                       	| [$0503: ld   (watchdog_C000),a]
	move.b	d0,d1                           	| [$0506: ld   b,a]
*   ROM checksum
*	LEA_ROM	0x0F10,a0                          	| [$0507: ld   hl,$0F10]
*l_050a:
*	add.b	(a0),d0                          	| [$050a: add  a,(hl)]
*	addq.w	#1,a0                           	| [$050b: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_050a                             	| [$050c: djnz $050A]
*	sub.b	#0xB3,d0                         	| [$050e: sub  $B3]
*                       	| [$0510: ld   (watchdog_C000),a]
*	jne	l_3785                             	| [$0513: jp   nz,$3785]
	jra	l_0069                             	| [$0516: jp   $0069]

l_055c:
	jbsr	clear_screen_row_0207                            	| [$055c: call $0207]
	beq.b	0f                               	| [...]
	rts                                    	| [$055f: ret  nz] [...]
0:
	* why does the game has to read the ROM to get value of 0 ??
	READ_ROM_BYTE	0x3943,d0                       	| [$0560: ld   a,($3943)]
	move.b	d0,sub_state_942C(a6)                   	| [$0563: ld   ($942C),a]
	* why does the game has to read the ROM to get value of 1 ??
	* probably to confuse hackers (the routine is set between 2 ROM checks)
	READ_ROM_BYTE	0x09AD,d0                       	| [$0566: ld   a,($09AD)] value = 1
	* set global_state_title_screen_0f24
	move.b	d0,global_state_942B(a6)                   	| [$0569: ld   ($942B),a]
	* enable simple sprite screen state
	move.b	d0,sprite_sync_status_a7ff(a6)                       	| [$056c: ld   ($A7FF),a]
	* ROM checksum
*	move.b	#0x80,d1                        	| [$056f: ld   b,$80]
*	LEA_ROM	0x3778,a0                          	| [$0571: ld   hl,$3778]
*	sub.b	d0,d0                            	| [$0574: sub  a]
*l_0575:
*	move.b	(a0),d7
*	eor.b	d7,d0                            	| [$0575: xor  (hl)]
*	addq.w	#1,a0                           	| [$0576: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_0575                             	| [$0577: djnz $0575]
*	add.b	#0x10,d0                         	| [$0579: add  a,$10]
*	jne	l_1845                             	| [$057b: jp   nz,$1845]
	rts                                    	| [$057e: ret]

display_gyruss_title_057f:
* ROM checksum
*	LEA_ROM	0x40A0,a0                          	| [$057f: ld   hl,$40A0]
*	clr.b	d1                               	| [$0582: ld   b,$00]
*	clr.b	d0                               	| [$0584: ld   a,$00]
*l_0586:
*	add.b	(a0),d0                          	| [$0586: add  a,(hl)]
*	addq.w	#1,a0                           	| [$0587: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_0586                             	| [$0588: djnz $0586]
*	add.b	#0xE5,d0                         	| [$058a: add  a,$E5]
*	jne	l_4876                             	| [$058c: jp   nz,$4876]
	LEA_ROM	0x3398,a1                          	| [$058f: ld   de,$3398]
	lea	0x8444,a0                          	| [$0592: ld   hl,$8444]
	move.b	#0x1C,d2                        	| [$0595: ld   c,$1C]
l_0597:
	move.b	#0x07,d1                        	| [$0597: ld   b,$07]
l_0599:
	move.b	(a1)+,d0                         	| [$0599: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$059a: ld   (hl),a]
	BCLR_A0	10                           	| [$059b: res  2,h]
	WRITE_VIDEORAM	0x25                      	| [$059d: ld   (hl),$25]
	BSET_A0	10                           	| [$059f: set  2,h]
	addq.w	#1,a0                           	| [$05a1: inc  l]
	                           	| [$05a2: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0599                             	| [$05a3: djnz $0599]
	                    	| [$05a5: push de]
	                      	| [$05a6: ld   de,$0019]
	add.w	#0x0019,a0                            	| [$05a9: add  hl,de]
	                    	| [$05aa: pop  de]
	subq.b	#1,d2                           	| [$05ab: dec  c]
	jne	l_0597                             	| [$05ac: jr   nz,$0597]
	rts                                    	| [$05ae: ret]


l_05af:
	lea	0x8444,a0                      	| [$05af: ld   hl,$8444]
	move.w	#0x0019,d3                      	| [$05b2: ld   de,$0019]
	move.b	#0x1C,d2                        	| [$05b5: ld   c,$1C]
l_05b7:
	move.b	#0x07,d1                        	| [$05b7: ld   b,$07]
l_05b9:
	WRITE_D0_VIDEORAM	0x83                      	| [$05b9: ld   (hl),$83]
	BCLR_A0	10                           	| [$05bb: res  2,h]
	WRITE_D0_VIDEORAM	0x20                      	| [$05bd: ld   (hl),$20]
	BSET_A0	10                           	| [$05bf: set  2,h]
	addq.w	#1,a0                           	| [$05c1: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_05b9                             	| [$05c2: djnz $05B9]
	add.w	d3,a0                            	| [$05c4: add  hl,de]
	jne	l_05b7                             	| [$05c5: jr   nz,$05B7]
*    ROM checksum
											| [$05c7: ld   b,$00]
											| [$05c9: ld   hl,$0060]
											| [$05cc: xor  a]
											| [$05cc: xor  a]
						
						
											| [$05cd: xor  (hl)]
											| [$05ce: inc  hl]
											| [...]
											| [$05cf: djnz $05CD]
											| [$05d1: sub  $00]
											| [$05d3: nop]
											| [$05d4: nop]
											| [$05d5: nop]
	rts                                    	| [$05d6: ret]


clear_sprites_05d7:
	lea	sprite_ram_a000(a6),a0                          	| [$05d7: ld   hl,$A000]
													| [$05da: ld   de,$A001]
	move.w	#0x07FF,d1                          	| [$05dd: ld   bc,$07FF]
l_05e0:
	clr.b	(a0)+                             	| [$05e0: ld   (hl),$00]
	dbf	d1,l_05e0                              	| [$05e2: ldir]
                       	| [$05e4: ld   (watchdog_C000),a]
	jra	l_4a04                             	| [$05e7: jp   $4A04]

write_2_digits_05ea:
	move.b	d0,d1                           	| [$05ea: ld   b,a]
	ror.b	#4,d0                            	| [$05eb: rrca] * 4
	and.b	#0x0F,d0                         	| [$05ef: and  $0F]
	jra	l_1708                             	| [$05f1: jp   $1708]

* loop wait for $9500 to clear
execute_commands_loop_05f4:
	                             	| [$05f4: jp   $05F7]


	* in ROM there's this RAM MSB address, let's hardcode it
	moveq	#0,d6
	lea		task_array_9500(a6),a0                       	| [$05f7: ld   a,($5865)]
	                           	| [$05fa: ld   h,a]
	move.b	task_index_counter_9433(a6),d6                   	| [$05fb: ld   a,($9433)]
	add.w	d6,a0                           	| [$05fe: ld   l,a]
	move.b	(a0),d0                         	| [$05ff: ld   a,(hl)]
	rol.b	#1,d0                            	| [$0600: rlca]
	jcs	execute_commands_loop_05f4                             	| [$0601: jp   c,$05F4]
	* there's a task to execute, get params & ack it
	move.b	(a0),d2                     | [$0604: ld   c,(hl)]
	st.b	(a0)+                      	| [$0605: ld   (hl),$FF]
										| [$0607: inc  hl]
	move.b	(a0),d0                     | [$0608: ld   b,(hl)] parameter in D0
	st.b	(a0)+                      	| [$0609: ld   (hl),$FF]
										| [$060b: inc  hl]
	addq	#2,d6						| follow A0
										| [$060c: ld   a,l]
	and.b	#0x3F,d6                     | [$060d: and  $3F]
	move.b	d6,task_index_counter_9433(a6)                   	| [$060f: ld   ($9433),a]
										| [$0612: ld   a,c]
	and.w	#0x0F,d2                    | [$0613: and  $0F]
	add.w	d2,d2
	add.w	d2,d2			| 32 bit!
	lea		jump_table_0620(pc),a0       | [$0615: ld   hl,$0620]
	move.l	(a0,d2.w),a1                 | [$0618: rst  $10]
										| [$0619: ld   a,b] parameter in D0
	pea		execute_commands_loop_05f4(pc)             | [$061a: ld   hl,$05F4]

	                        	| [$061d: push hl]
	                              	| [$061e: ex   de,hl]
	* another jump table, different from rst_30
	jra	(a1)                               	| [$061f: jp   (hl)]
	
* [jump_table]
jump_table_0620:
	.long	l_1faf 
	.long	write_message_07e4
	.long	l_247b
	.long	erase_1up_381c 
	.long	add_to_score_0685 
	.long	write_stage_number_4e27
	.long	l_42DC
	.long	display_gyruss_title_057f
	.long	l_05af
	.long	-1			| bogus 
	.long	-2			| bogus 
	.long	-3
	.long	-4
	.long	-5
	.long	-6
	.long	-7

l_066e:
*	lea	distance_to_center_9465(a6),a0                      	| [$066e: ld   hl,$9465]
*	move.b	#0x06,(a0)                      	| [$0671: ld   (hl),$06]
*l_0673:
*	move.w	#0x0000,d1                      	| [$0673: ld   bc,$0000]
*	move.w	#0x0000,d2                      	| [$0673: ld   bc,$0000]
*l_0676:
*	subq.b	#1,d1                           	| [...]
*	jne	l_0676                             	| [$0676: djnz $0676]
*                       	| [$0678: ld   (watchdog_C000),a]
*	subq.b	#1,d2                           	| [$067b: dec  c]
*	jne	l_0676                             	| [$067c: jr   nz,$0676]
*	subq.b	#1,(a0)                         	| [$067e: dec  (hl)]
*	jne	l_0673                             	| [$067f: jr   nz,$0673]
	clr.b	d0                               	| [$0681: xor  a]
	jra	l_008b                             	| [$0682: jp   $008B]

* < D0: score to add (divided by 50). D0 = 1 => 50 points
add_to_score_0685:
	move.b	d0,d2                           	| [$0685: ld   c,a]
	clr.w	d1                               	| [$0686: ld   b,$00]
	move.b	game_in_play_9669(a6),d0                   	| [$0688: ld   a,($9669)]
	                               	| [$068b: and  a]
	jeq	l_06dd                             	| [$068c: jp   z,$06DD]
	move.b	d2,d0                           	| [$068f: ld   a,c]
	                               	| [$0690: and  a]
	jeq	l_06f7                             	| [$0691: jp   z,$06F7]
	move.b	d2,d1
	LEA_ROM	0x413D,a0                          	| [$0694: ld   hl,$413D]
	add.w	d1,a0                            	| [$0697: add  hl,bc]
	add.w	d1,a0                            	| [$0698: add  hl,bc]
	add.w	d1,a0                            	| [$0699: add  hl,bc]
	lea	player_1_score_9663(a6),a1                      	| [$069a: ld   de,$9663]
	move.b	current_player_9662(a6),d0                   	| [$069d: ld   a,($9662)]
	                               	| [$06a0: and  a]
	jeq	l_06a6                             	| [$06a1: jr   z,$06A6]
	lea	player_2_score_9666(a6),a1                      	| [$06a3: ld   de,$9666] [uncovered]
l_06a6:
	CLEAR_XC_FLAGS
	move.b	(a1),d0                         	| [$06a6: ld   a,(de)]
	move.b	(a0)+,d7                          	| [$06a7: add  a,(hl)]
	abcd	d7,d0								| daa
	move.b	d0,(a1)+                         	| [$06a9: ld   (de),a]
	                           	| [$06aa: inc  de]
	                           	| [$06ab: inc  hl]
	move.b	(a1),d0                         	| [$06ac: ld   a,(de)]
	move.b	(a0)+,d7                         	| [$06ad: adc  a,(hl)]
	abcd	d7,d0								| daa
	move.b	d0,(a1)+                         	| [$06af: ld   (de),a]
	                           	| [$06b0: inc  de]
	                           	| [$06b1: inc  hl]
	move.b	(a1),d0                         	| [$06b2: ld   a,(de)]
	move.b	(a0),d7
	abcd	d7,d0                         	| [$06b3: adc  a,(hl)] + daa
	move.b	d0,(a1)                         	| [$06b5: ld   (de),a]
	lea	highscore_last_digit_940D(a6),a0                      	| [$06b6: ld   hl,$940D]
	move.w	#0x0003,d1                      	| [$06b9: ld   bc,$0003]
l_06bc:
	move.b	(a1),d0                         	| [$06bc: ld   a,(de)]
	cmp.b	(a0),d0                          	| [$06bd: cp   (hl)]
	jcs	l_06cf                             	| [$06be: jr   c,$06CF]
	jne	l_06c9                             	| [$06c0: jr   nz,$06C9]
	subq.w	#1,a1                           	| [$06c2: dec  de]
	subq.w	#1,a0                           	| [$06c3: dec  hl]
	subq.b	#1,d1                           	| [$06c4: dec  c]
	jne	l_06bc                             	| [$06c5: jr   nz,$06BC]
	jra	l_06cf                             	| [$06c7: jr   $06CF]

l_06c9:
	exg	a1,a0                              	| [$06c9: ex   de,hl]
	jbsr	lddr                              	| [$06ca: lddr]
	jbsr	l_0769                            	| [$06cc: call $0769]
l_06cf:
	move.b	current_player_9662(a6),d0                   	| [$06cf: ld   a,($9662)]
	                               	| [$06d2: and  a]
	jne	l_06da                             	| [$06d3: jr   nz,$06DA]
	jbsr	write_player_1_score_0755                            	| [$06d5: call $0755]
	jra	l_06dd                             	| [$06d8: jr   $06DD]

l_06da:
	jbsr	write_player_2_score_075f                            	| [$06da: call $075F]
	rts                                    	| [$06dd: ret]

l_06dd:
	rts                                    	| [$06dd: ret]

l_06de:
	jbsr	clear_screen_row_0207                            	| [$06de: call $0207]
	beq.b	0f                               	| [...]
	rts                                    	| [$06e1: ret  nz] [...]
0:
*   ROM checksum
*	LEA_ROM	0x11E0,a0                          	| [$06e2: ld   hl,$11E0]
*	clr.b	d1                               	| [$06e5: ld   b,$00]
*	clr.b	d0                               	| [$06e7: xor  a]
*l_06e8:
*	move.b	(a0)+,d7
*	eor.b	d7,d0                            	| [$06e8: xor  (hl)]
*	                           	| [$06e9: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_06e8                             	| [$06ea: djnz $06E8]
*	subq.b	#0x06,d0                        	| [$06ec: sub  $06]
*	jne	l_42fe                             	| [$06ee: jp   nz,$42FE]
	move.b	#0x07,d3                        	| [$06f1: ld   d,$07]
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$06f3: rst  $38]
	jra	next_game_state_080b                             	| [$06f4: jp   $080B]

l_06f7:
	move.b	l_9458(a6),d0                   	| [$06f7: ld   a,($9458)]
	                               	| [$06fa: and  a]
	jne	l_0719                             	| [$06fb: jr   nz,$0719]
	READ_ROM_BYTE	0x3022,d0                       	| [$06fd: ld   a,($3022)]
	jbsr	write_message_07e4                            	| [$0700: call $07E4]
	jbsr	write_player_1_score_0755                            	| [$0703: call $0755]
	READ_ROM_BYTE	0x006F,d0                       	| [$0706: ld   a,($006F)]
	jbsr	erase_1up_381c                            	| [$0709: call $381C]
	lea	0x8501,a1                          	| [$070c: ld   de,$8501]
	move.b	#0x06,d1                        	| [$070f: ld   b,$06]
l_0711:
	READ_ROM_BYTE	0x37AC,d0                       	| [$0711: ld   a,($37AC)]
	jbsr 	write_videoram_a1                         	| [$0714: ld   (de),a]
	jbsr	sub_20_to_a1_0020                            	| [$0715: rst  $20]
	subq.b	#1,d1                           	| [...]
	jne	l_0711                             	| [$0716: djnz $0711]
	rts                                    	| [$0718: ret]

l_0719:
	READ_ROM_BYTE	0x06D4,d0                       	| [$0719: ld   a,($06D4)]
	jbsr	write_message_07e4                           	| [$071c: call $07E4]
	jbsr	write_player_1_score_0755                            	| [$071f: call $0755]
	READ_ROM_BYTE	0x1200,d0                       	| [$0722: ld   a,($1200)]
	jbsr	write_message_07e4                            	| [$0725: call $07E4]
	jbsr	write_player_2_score_075f                            	| [$0728: call $075F]
	rts                                    	| [$072b: ret]

write_player_1_score_0755:
	lea	0x8781,a1                          	| [$0755: ld   de,$8781]
	lea	player_1_score_9663+2(a6),a0                      	| [$0758: ld   hl,$9665]
	move.b	#0x10,d2                        	| [$075b: ld   c,$10]
	jra	write_player_score_0771                             	| [$075d: jr   $0771]

write_player_2_score_075f:
	lea	0x8501,a1                      	| [$075f: ld   de,$8501]
	lea	player_2_score_9666+2(a6),a0                      	| [$0762: ld   hl,$9668]
	move.b	#0x10,d2                        	| [$0765: ld   c,$10]
	jra	write_player_score_0771                             	| [$0767: jr   $0771]


l_0769:
	lea	0x8641,a1                          	| [$0769: ld   de,$8641]
	lea	highscore_last_digit_940D(a6),a0                      	| [$076c: ld   hl,$940D]
	move.b	#0x11,d2                        	| [$076f: ld   c,$11]
write_player_score_0771:
	clr.b	d1                               	| [$0771: ld   b,$00]
	jbsr	write_2_digits_079e                            	| [$0773: call $079E]
	subq.w	#1,a0                           	| [$0776: dec  hl]
	jbsr	write_2_digits_079e                            	| [$0777: call $079E]
	subq.w	#1,a0                           	| [$077a: dec  hl]
	jbsr	write_bcd_byte_to_screen_077f                            	| [$077b: call $077F]
	rts                                    	| [$077e: ret]

write_bcd_byte_to_screen_077f:
	move.b	(a0),d0                         	| [$077f: ld   a,(hl)]
	ror.b	#4,d0                            	| [$0780: rrca] * 4
	jbsr	write_video_078e                            	| [$0784: call $078E]
	jbsr	sub_20_to_a1_0020                            	| [$0787: rst  $20]
	move.b	(a0),d0                         	| [$0788: ld   a,(hl)]
	jbsr	write_video_078e                            	| [$0789: call $078E]
	jbsr	sub_20_to_a1_0020                            	| [$078c: rst  $20]
	rts                                    	| [$078d: ret]

* < A1: video address
write_video_078e:
	and.b	#0x0F,d0                         	| [$078e: and  $0F]
	move.l	a0,-(sp)                        	| [$0790: push hl]
	LEA_ROM	0x3362,a0                          	| [$0791: ld   hl,$3362]
	jbsr	fetch_a0_plus_d0_0008                            	| [$0794: rst  $08]
	move.l	(sp)+,a0                        	| [$0795: pop  hl]
* set credit character on screen
	jbsr	write_videoram_a1                         	| [$0796: ld   (de),a]
	BCLR_A1	10                           	| [$0797: res  2,d]
	move.b	d2,d0                           	| [$0799: ld   a,c]
	jbsr	write_videoram_a1                         	| [$079a: ld   (de),a]
	BSET_A1	10                           	| [$079b: set  2,d]
	rts                                    	| [$079d: ret]

write_2_digits_079e:
	move.b	(a0),d0                         	| [$079e: ld   a,(hl)]
	ror.b	#4,d0                            	| [$079f: rrca] * 4
	jbsr	write_a_digit_07ad                            	| [$07a3: call $07AD]
	jbsr	sub_20_to_a1_0020                            	| [$07a6: rst  $20]
	move.b	(a0),d0                         	| [$07a7: ld   a,(hl)]
	jbsr	write_a_digit_07ad                            	| [$07a8: call $07AD]
	jbsr	sub_20_to_a1_0020                            	| [$07ab: rst  $20]
	rts                                    	| [$07ac: ret]

write_a_digit_07ad:
	and.b	#0x0F,d0                         	| [$07ad: and  $0F]
	jeq	l_07b4                             	| [$07af: jr   z,$07B4]
	addq.b	#1,d1                           	| [$07b1: inc  b]
	jra	l_07bb                             	| [$07b2: jr   $07BB]

l_07b4:
	move.b	#0x0A,d0                        	| [$07b4: ld   a,$0A]
	addq.b	#1,d1                           	| [$07b6: inc  b]
	subq.b	#1,d1                           	| [$07b7: dec  b]
	jeq	l_07bb                             	| [$07b8: jr   z,$07BB]
	clr.b	d0                               	| [$07ba: xor  a]
l_07bb:
	move.l	a0,-(sp)                        	| [$07bb: push hl]
	LEA_ROM	0x3362,a0                          	| [$07bc: ld   hl,$3362]
	jbsr	fetch_a0_plus_d0_0008                            	| [$07bf: rst  $08]
	move.l	(sp)+,a0                        	| [$07c0: pop  hl]
	jbsr	write_videoram_a1                         	| [$07c1: ld   (de),a]
	BCLR_A1	10                           	| [$07c2: res  2,d]
	move.b	d2,d0                           	| [$07c4: ld   a,c]
	jbsr	write_videoram_a1                         	| [$07c5: ld   (de),a]
	BSET_A1	10                           	| [$07c6: set  2,d]
	rts                                    	| [$07c8: ret]

* < D0: message number
* > D3: next screen address to write to
write_message_07e4:
	LEA_ROM	0x40A6,a0                          	| [$07e4: ld   hl,$40A6]
	jbsr	load_rom_pointer_in_a1_d3_0010     | [$07e7: rst  $10]
	exg	a1,a0                              	| [$07e8: ex   de,hl]
	move.b	(a0)+,d4                         	| [$07e9: ld   e,(hl)]
	                           	| [$07ea: inc  hl]
	move.b	(a0)+,d3                         	| [$07eb: ld   d,(hl)]
	                           	| [$07ec: inc  hl]
	move.b	(a0)+,d2                         	| [$07ed: ld   c,(hl)]
	                           	| [$07ee: inc  hl]
								

display_text_07ef:
	and.l	#0xFFFF,d3 
	LOAD_D3_16_FROM_D3D4
	exg	d3,a1
1:
	move.b	(a0),d0                         	| [$07ef: ld   a,(hl)]
	cmp.b	#0x9E,d0                         	| [$07f0: cp   $9E]
	bne.b	0f                               	| [...]
	exg	d3,a1
	rts                                    	| [$07f2: ret  z] [...]
0:
	jbsr	write_videoram_a1                         	| [$07f3: ld   (de),a]
	BCLR_A1	10                           	| [$07f4: res  2,d]
	move.b	d2,d0                           	| [$07f6: ld   a,c]
	jbsr	write_videoram_a1                         	| [$07f7: ld   (de),a]
	BSET_A1	10                           	| [$07f8: set  2,d]
	addq.w	#1,a0                           	| [$07fa: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$07fb: rst  $20]
	jra	1b                             	| [$07fc: jp   $07EF]

l_07ff:
	lea	global_state_942B(a6),a0                      	| [$07ff: ld   hl,$942B]
	addq.b	#1,(a0)                         	| [$0802: inc  (hl)]
	clr.b	d0                               	| [$0803: xor  a]
	move.b	d0,sub_state_942C(a6)                   	| [$0804: ld   ($942C),a]
	jbsr	l_1400                            	| [$0807: call $1400]
	rts                                    	| [$080a: ret]

next_game_state_080b:
	lea	sub_state_942C(a6),a0                      	| [$080b: ld   hl,$942C]
	addq.b	#1,(a0)                         	| [$080e: inc  (hl)]
	rts                                    	| [$080f: ret]

global_state_demo_or_game_0828:
	pea		l_4b7c(pc)                          	| [$0828: ld   hl,$4B7C]

											| [$082b: push hl]
	move.b	sub_state_942C(a6),d0                   	| [$082c: ld   a,($942C)]
	jbsr	jump_table_jump_0030                            	| [$082f: rst  $30]
* [jump_table]
	.long	l_5f4d                                   | 0
	.long	l_45e0                                   | 1
	.long	l_37e9                                   | 2
	.long	l_1fce                                   | 3
	.long	l_3865                                   | 4
	.long	l_255b                                   | 5
	.long	l_2e10                                   | 6
	.long	l_08b3                                   | 7
	.long	game_over_4255                           | 8
	.long	clear_after_game_over_4c54                                   | 9
	.long	enter_high_score_0a1a                    | A
	.long	l_13bd                                   | B
	.long	l_0b42                                   | C
	.long	init_end_of_level_sequence_planet_0b71   | D
	.long	update_end_of_level_sequence_0b9a        | E
	.long	l_0bb9                                   | F
	.long	l_0be7                                   | 10
	.long	l_0c04                                   | 11
	.long	l_0c98                                   | 12
	.long	l_0cf7                                   | 13
	.long	init_end_of_level_sequence_404e          | 14
	.long	l_0d97                                   | 15
	.long	-1
	.long	l_1580


l_089a:
	move.b	current_stage_960B(a6),d0                   	| [$089a: ld   a,($960B)]
	                               	| [$089d: and  a]
	jeq	l_5db6                             	| [$089e: jp   z,$5DB6]
l_08a1:
	addq.b	#1,d0                           	| [$08a1: inc  a]
	and.b	#0x03,d0                         	| [$08a2: and  $03]
	jbsr	jump_table_jump_0030                            	| [$08a4: rst  $30]
* [jump_table]
	.long	l_5dbc
	.long	l_5dc2
	.long	l_5dc8
	.long	l_5db6


l_08ad:
	move.b	current_stage_960B(a6),d0                   	| [$08ad: ld   a,($960B)]
	jra	l_08a1                             	| [$08b0: jp   $08A1]

l_08b3:
	jbsr	update_starfield_in_game_3804                            	| [$08b3: call $3804]
	jbsr	handle_level_timeout_0ea1                            	| [$08b6: call $0EA1]
	jbsr	l_590e                            	| [$08b9: call $590E]
	jbsr	l_1686                            	| [$08bc: call $1686]
	jbsr	move_player_ship_1857                            	| [$08bf: call $1857]
	jbsr	update_player_shots_1f30                            	| [$08c2: call $1F30]
	jbsr	l_324b                            	| [$08c5: call $324B]
	jbsr	l_2190                            	| [$08c8: call $2190]
	jbsr	l_22f3                            	| [$08cb: call $22F3]
	jbsr	l_4516                            	| [$08ce: call $4516]
	jbsr	l_4816                            	| [$08d1: call $4816]
	jbsr	check_for_extra_life_1617                            	| [$08d4: call $1617]
	jbsr	l_2203                            	| [$08d7: call $2203]
	move.b	level_playing_flag_9000(a6),d0                   	| [$08da: ld   a,($9000)]
	addq.b	#1,d0                           	| [$08dd: inc  a]
	jeq	l_09a6                             	| [$08de: jp   z,$09A6]
	subq.b	#1,d0                           	| [$08e1: dec  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$08e2: ret  nz] [...]
0:
	lea	enemy_objects_9010(a6),a0                      	| [$08e3: ld   hl,$9010]
	move.w	#0x0010,d3                      	| [$08e6: ld   de,$0010]
	move.b	#0x0A,d1                        	| [$08e9: ld   b,$0A]
l_08eb:
	move.b	game_in_play_9669(a6),d0                   	| [$08eb: ld   a,($9669)]
	                               	| [$08ee: and  a]
	jeq	l_0d75                             	| [$08ef: jp   z,$0D75]
	move.b	(a0),d0                         	| [$08f2: ld   a,(hl)]
	                               	| [$08f3: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$08f4: ret  nz] [...]
0:
	add.w	d3,a0                            	| [$08f5: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_08eb                             	| [$08f6: djnz $08EB]
	jbsr	l_09d2                            	| [$08f8: call $09D2]
	move.b	l_9458(a6),d0                   	| [$08fb: ld   a,($9458)]
	                               	| [$08fe: and  a]
	jeq	l_0904                             	| [$08ff: jr   z,$0904]
	jbsr	disable_game_objects_0e43                            	| [$0901: call $0E43] [uncovered]
l_0904:
	move.w	#0x0105,d3                          	| [$0904: ld   de,$0105]
	jbsr	start_task_d3_0038                            	| [$0907: rst  $38]
	move.b	l_9458(a6),d0                   	| [$0908: ld   a,($9458)]
	                               	| [$090b: and  a]
	jeq	l_0910                             	| [$090c: jr   z,$0910]
	addq.b	#1,d3                           	| [$090e: inc  e] [uncovered]
	jbsr	start_task_d3_0038                            	| [$090f: rst  $38] [uncovered]
l_0910:
	clr.b	d0                               	| [$0910: xor  a]
	move.b	d0,double_fire_930E(a6)         	| [$0911: ld   (double_fire_930E),a]
	move.b	d0,update_sequence_control_flag_a7fd(a6)                    	| [$0914: ld   ($A7FD),a]
	move.b	d0,l_919E(a6)                   	| [$0917: ld   ($919E),a]
	lea	l_961D(a6),a0                      	| [$091a: ld   hl,$961D]
	addq.b	#1,(a0)                         	| [$091d: inc  (hl)]
	lea	lives_9600(a6),a0                  	| [$091e: ld   hl,lives_9600]
	
	tst.b	infinite_lives_flag
	jne		0f
	subq.b	#1,(a0)                         	| [$0921: dec  (hl)]
0:
	sne		d7
	move.w	d0,-(sp)                        	| [$0922: push af]
	lea	player_1_data_9620(a6),a1                      	| [$0927: ld   de,$9620]
	move.b	current_player_9662(a6),d0                   	| [$0923: ld   a,($9662)]
	                               	| [$0926: and  a]
	jeq	l_092f                             	| [$092a: jr   z,$092F]
	lea	player_2_data_9640(a6),a1                      	| [$092c: ld   de,$9640] [uncovered]
l_092f:
	lea	lives_9600(a6),a0                  	| [$092f: ld   hl,lives_9600]
	move.w	#0x0020,d1                      	| [$0932: ld   bc,$0020]
	jbsr	ldir                              	| [$0935: ldir]
	move.w	(sp)+,d0                        	| [$0937: pop  af]
	tst.b	d7
	jeq	l_0989                             	| [$0938: jr   z,$0989]
	lea	player_2_data_9640(a6),a0                      	| [$093e: ld   hl,$9640]
	move.b	current_player_9662(a6),d0                   	| [$093a: ld   a,($9662)]
	                               	| [$093d: and  a]
	jeq	l_0946                             	| [$0941: jr   z,$0946]
	lea	player_1_data_9620(a6),a0                      	| [$0943: ld   hl,$9620] [uncovered]
l_0946:
	move.b	(a0),d0                         	| [$0946: ld   a,(hl)]
	                               	| [$0947: and  a]
	jeq	l_0953                             	| [$0948: jr   z,$0953]
	move.b	current_player_9662(a6),d0                   	| [$094a: ld   a,($9662)] [uncovered]
	addq.b	#1,d0                           	| [$094d: inc  a] [uncovered]
	and.b	#0x01,d0                         	| [$094e: and  $01] [uncovered]
	move.b	d0,current_player_9662(a6)                   	| [$0950: ld   ($9662),a] [uncovered]
l_0953:
	move.b	#0x5A,d0                        	| [$0953: ld   a,$5A]
	move.b	d0,distance_to_center_9465(a6)                   	| [$0955: ld   ($9465),a]
	READ_ROM_BYTE	0x0067,d0                       	| [$0958: ld   a,($0067)]
	move.b	d0,sub_state_942C(a6)                   	| [$095b: ld   ($942C),a]
	rts                                    	| [$095e: ret]

l_0980:
	jbsr	l_1400                            	| [$0980: call $1400]
                       	| [$0983: ld   (watchdog_C000),a]
	jra	l_52c3                             	| [$0986: jp   $52C3]

l_0989:
	move.w	#0x0109,d3                          	| [$0989: ld   de,$0109]
	move.b	current_player_9662(a6),d0                   	| [$098c: ld   a,($9662)]
	                               	| [$098f: and  a]
	jeq	l_0993                             	| [$0990: jr   z,$0993]
	addq.b	#1,d3                           	| [$0992: inc  e] [uncovered]
l_0993:
	jbsr	start_task_d3_0038                            	| [$0993: rst  $38]
	move.w	#0x010B,d3                          	| [$0994: ld   de,$010B]
	jbsr	start_task_d3_0038                            	| [$0997: rst  $38]
	move.b	#0xB4,d0                        	| [$0998: ld   a,$B4]
	move.b	d0,distance_to_center_9465(a6)                   	| [$099a: ld   ($9465),a]
	jbsr	randomize_18_star_positions_3af2                            	| [$099d: call $3AF2]
	jbsr	disable_game_objects_0e43                            	| [$09a0: call $0E43]
	jra	next_game_state_080b                             	| [$09a3: jp   $080B]

l_09a6:
	tst.b	level_skip_flag
	jeq		0f
	clr.b	level_skip_flag
	jra		l_0dc1
0:
	move.b	general_fast_timer_9400(a6),d0                   	| [$09a6: ld   a,($9400)]
	and.b	#0x0F,d0                         	| [$09a9: and  $0F]
	bne.b	0f                               	| [...]
	rts                                    	| [$09ab: ret  z] [...]
0:
	move.b	l_9601(a6),d0                   	| [$09ac: ld   a,($9601)]
	                               	| [$09af: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$09b0: ret  nz] [...]
0:
	move.b	l_9605(a6),d0                   	| [$09b1: ld   a,($9605)]
	                               	| [$09b4: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$09b5: ret  nz] [...]
0:
	move.b	l_92F0(a6),d0                   	| [$09b6: ld   a,($92F0)]
	                               	| [$09b9: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$09ba: ret  nz] [...]
0:
	move.b	l_90A0(a6),d0                   	| [$09bb: ld   a,($90A0)]
	                               	| [$09be: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$09bf: ret  nz] [...]
0:
	move.b	death_ray_sattelites_active_92BE(a6),d0                   	| [$09c0: ld   a,($92BE)]
	                               	| [$09c3: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$09c4: ret  nz] [...]
0:
	lea	l_918E(a6),a0                      	| [$09c5: ld   hl,$918E]
	subq.b	#1,(a0)                         	| [$09c8: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$09c9: ret  nz] [...]
0:
	subq.b	#1,d0                           	| [$09ca: dec  a]
	move.b	d0,l_960C(a6)                   	| [$09cb: ld   ($960C),a]
	jra	l_0dba                             	| [$09ce: jp   $0DBA]

l_09d2:
	move.b	current_player_9662(a6),d0                   	| [$09d2: ld   a,($9662)]
	and.b	#0x01,d0                         	| [$09d5: and  $01]
	jne	is_player_2_09eb                             	| [$09d7: jr   nz,$09EB]
	lea	l_90B0(a6),a0                      	| [$09d9: ld   hl,$90B0]
	move.w	#0x0010,d3                      	| [$09dc: ld   de,$0010]
	jbsr	exx                               	| [$09df: exx]
	lea	l_90B5(a6),a0                      	| [$09e0: ld   hl,$90B5]
	move.w	#0x0010,d3                      	| [$09e3: ld   de,$0010]
	move.b	#0x24,d1                        	| [$09e6: ld   b,$24]
	jra	l_09fa                             	| [$09e8: jp   $09FA]
is_player_2_09eb:
	lea	l_90B0(a6),a0                      	| [$09eb: ld   hl,$90B0]
	move.w	#0x0010,d3                      	| [$09ee: ld   de,$0010]
	jbsr	exx                               	| [$09f1: exx]
	lea	l_90B6(a6),a0                      	| [$09f2: ld   hl,$90B6]
	move.w	#0x0010,d3                      	| [$09f5: ld   de,$0010]
	move.b	#0x24,d1                        	| [$09f8: ld   b,$24]

l_09fa:
	jbsr	exx                               	| [$09fa: exx]
	move.b	(a0),d0                         	| [$09fb: ld   a,(hl)]
	addq.b	#1,d0                           	| [$09fc: inc  a]
	jne	l_0a06                             	| [$09fd: jr   nz,$0A06]
	jbsr	exx                               	| [$09ff: exx]
	st.b	(a0)                      	| [$0a00: ld   (hl),$FF]
	jbsr	exx                               	| [$0a02: exx]
	jra	l_0a14                             	| [$0a03: jp   $0A14]

l_0a06:
	subq.b	#1,d0                           	| [$0a06: dec  a]
	jeq	l_0a10                             	| [$0a07: jr   z,$0A10]
	move.b	l_9605(a6),d0                   	| [$0a09: ld   a,($9605)] [uncovered]
	subq.b	#1,d0                           	| [$0a0c: dec  a] [uncovered]
	move.b	d0,l_9605(a6)                   	| [$0a0d: ld   ($9605),a] [uncovered]
l_0a10:
	jbsr	exx                               	| [$0a10: exx]
	clr.b	(a0)                             	| [$0a11: ld   (hl),$00]
	jbsr	exx                               	| [$0a13: exx]
l_0a14:
	add.w	d3,a0                            	| [$0a14: add  hl,de]
	jbsr	exx                               	| [$0a15: exx]
	add.w	d3,a0                            	| [$0a16: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_09fa                             	| [$0a17: djnz $09FA]
	rts                                    	| [$0a19: ret]

enter_high_score_0a1a:
	move.b	#0xFC,d0                        	| [$0a1a: ld   a,$FC]
	move.b	d0,stars_speed_943B(a6)                   	| [$0a1c: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$0a1f: call $3831]
	move.b	general_fast_timer_9400(a6),d0                   	| [$0a22: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$0a25: and  $01]
	jne	l_0aed                             	| [$0a27: jp   nz,$0AED]
	jbsr	read_player_controls_1720                            	| [$0a2a: call $1720]
	lea	l_9415(a6),a0                      	| [$0a2d: ld   hl,$9415]
	CLEAR_XC_FLAGS
	roxr.b	#1,d0                            	| [$0a30: rrca]
	ROXL_A0_PLUS	                         	| [$0a31: rl   (hl)]
									| [$0a33: inc  hl]
	CLEAR_XC_FLAGS
	roxr.b	#1,d0                            	| [$0a34: rrca]
	ROXL_A0_PLUS                         	| [$0a35: rl   (hl)]
	                           	| [$0a37: inc  hl]
	CLEAR_XC_FLAGS
	roxr.b	#3,d0                            	| [$0a38: rrca] * 3
	ROXL_A0_PLUS                         	| [$0a3b: rl   (hl)]
	                           	| [$0a3d: inc  hl]
	CLEAR_XC_FLAGS
	roxr.b	#1,d0                            	| [$0a3e: rrca]
	ROXL_A0                         	| [$0a3f: rl   (hl)]
	move.b	(a0),d0                         	| [$0a41: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$0a42: and  $07]
	subq.b	#1,d0                           	| [$0a44: dec  a]
	jeq	l_0a82                             	| [$0a45: jr   z,$0A82]
	                           	| [$0a47: dec  hl]
	move.b	-(a0),d0                         	| [$0a48: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$0a49: and  $07]
	subq.b	#1,d0                           	| [$0a4b: dec  a]
	jeq	l_0a82                             	| [$0a4c: jr   z,$0A82]
											| [$0a4e: dec  hl]
	move.b	-(a0),d0                         	| [$0a4f: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0a50: cp   $FF]
	bne.b	0f                               	| [...]
	jbsr	l_0ae2                            	| [$0a52: call z,$0AE2]
0:
	and.b	#0x07,d0                         	| [$0a55: and  $07]
	subq.b	#1,d0                           	| [$0a57: dec  a]
	jeq	l_0a75                             	| [$0a58: jr   z,$0A75]
	                           	| [$0a5a: dec  hl]
	move.b	-(a0),d0                         	| [$0a5b: ld   a,(hl)]
	cmp.b	#0x7F,d0                         	| [$0a5c: cp   $7F]
	bne.b	0f                               	| [...]
	jbsr	l_0ae2                            	| [$0a5e: call z,$0AE2]
0:
	and.b	#0x07,d0                         	| [$0a61: and  $07]
	subq.b	#1,d0                           	| [$0a63: dec  a]
	jeq	l_0a68                             	| [$0a64: jr   z,$0A68]
	jra	l_0ac5                             	| [$0a66: jr   $0AC5]

l_0a68:
	lea	l_9419(a6),a0                      	| [$0a68: ld   hl,$9419]
	subq.b	#1,(a0)                         	| [$0a6b: dec  (hl)]
	move.b	(a0),d0                         	| [$0a6c: ld   a,(hl)]
	cmp.b	#0x80,d0                         	| [$0a6d: cp   $80]
	jcs	l_0ab0                             	| [$0a6f: jr   c,$0AB0]
	move.b	#0x1A,(a0)                      	| [$0a71: ld   (hl),$1A]
	jra	l_0ab0                             	| [$0a73: jr   $0AB0]

l_0a75:
	lea	l_9419(a6),a0                      	| [$0a75: ld   hl,$9419]
	addq.b	#1,(a0)                         	| [$0a78: inc  (hl)]
	move.b	(a0),d0                         	| [$0a79: ld   a,(hl)]
	cmp.b	#0x1B,d0                         	| [$0a7a: cp   $1B]
	jcs	l_0ab0                             	| [$0a7c: jr   c,$0AB0]
	clr.b	(a0)                             	| [$0a7e: ld   (hl),$00] [uncovered]
	jra	l_0ab0                             	| [$0a80: jr   $0AB0] [uncovered]

l_0a82:
	move.b	l_9419(a6),d0                   	| [$0a82: ld   a,($9419)]
	LEA_ROM	0x4DDC,a0                          	| [$0a85: ld   hl,$4DDC]
	jbsr	fetch_a0_plus_d0_0008                            	| [$0a88: rst  $08]
	LOAD_RAM_POINTER	ram_pointer_9411(a6),a0         	| [$0a89: ld   hl,($9411)]

	LOAD_VIDEO_POINTER	video_address_9413(a6),a1         	| [$0a8c: ld   de,($9413)]
	jbsr	write_videoram_a1                         	| [$0a90: ld   (de),a]
	move.b	d0,(a0)                         	| [$0a91: ld   (hl),a]
	move.b	saved_character_attribute_9410(a6),d0                   	| [$0a92: ld   a,($9410)]
	BCLR_A1	10                           	| [$0a95: res  2,d]
	jbsr	write_videoram_a1                         	| [$0a97: ld   (de),a]
	BSET_A1	10                           	| [$0a98: set  2,d]
	jbsr	sub_20_to_a1_0020                            	| [$0a9a: rst  $20]
	addq.w	#1,a0                           	| [$0a9b: inc  hl]
	STORE_RAM_POINTER	a0,ram_pointer_9411(a6)        	| [$0a9c: ld   ($9411),hl]
	STORE_VIDEO_POINTER	a1,video_address_9413(a6)        	| [$0a9f: ld   ($9413),de]
	lea	l_941A(a6),a0                      	| [$0aa3: ld   hl,$941A]
	subq.b	#1,(a0)                         	| [$0aa6: dec  (hl)]
	jeq	l_0ad7                             	| [$0aa7: jr   z,$0AD7]
	clr.b	d0                               	| [$0aa9: xor  a]
	move.b	d0,l_9419(a6)                   	| [$0aaa: ld   ($9419),a]
	jbsr	l_5daa                            	| [$0aad: call $5DAA]
l_0ab0:
	LOAD_VIDEO_POINTER	video_address_9413(a6),a1         	| [$0ab0: ld   de,($9413)]
	move.b	l_9419(a6),d0                   	| [$0ab4: ld   a,($9419)]
	LEA_ROM	0x4DDC,a0                          	| [$0ab7: ld   hl,$4DDC]
	jbsr	fetch_a0_plus_d0_0008                            	| [$0aba: rst  $08]
	jbsr	write_videoram_a1                         	| [$0abb: ld   (de),a]
	BCLR_A1	10                           	    | [$0abc: res  2,d]
	move.b	#0x0E,d0                        	| [$0abe: ld   a,$0E]
	jbsr	write_videoram_a1                         	| [$0ac0: ld   (de),a]
	clr.b	d0                               	| [$0ac1: xor  a]
	move.b	d0,l_941C(a6)                   	| [$0ac2: ld   ($941C),a]
l_0ac5:
	move.b	general_fast_timer_9400(a6),d0                   	| [$0ac5: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$0ac8: and  $07]
	jne	l_0b03                             	| [$0aca: jr   nz,$0B03]
	* each 8 ticks
	lea	distance_to_center_9465(a6),a0                      	| [$0acc: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$0acf: dec  (hl)]
	jne	l_0b03                             	| [$0ad0: jr   nz,$0B03]
	LOAD_VIDEO_POINTER	video_address_9413(a6),a0         	| [$0ad2: ld   hl,($9413)] [uncovered]
	WRITE_VIDEORAM	0x83                      	| [$0ad5: ld   (hl),$83] [uncovered]
l_0ad7:
	move.b	#0x78,d0                        	| [$0ad7: ld   a,$78]
	move.b	d0,distance_to_center_9465(a6)                   	| [$0ad9: ld   ($9465),a]
	jbsr	l_5daa                            	| [$0adc: call $5DAA]
	* highscore entered, save scores
	jbsr	osd_write_high_scores
	jra	next_game_state_080b                             	| [$0adf: jp   $080B]

l_0ae2:
	clr.b	(a0)                             	| [$0ae2: ld   (hl),$00]
	clr.b	d0                               	| [$0ae4: xor  a]
	rts                                    	| [$0ae5: ret]

l_0aed:
	lea	l_941C(a6),a0                      	| [$0aed: ld   hl,$941C]
	addq.b	#1,(a0)                         	| [$0af0: inc  (hl)]
	LOAD_VIDEO_POINTER	video_address_9413(a6),a0         	| [$0af1: ld   hl,($9413)]
	BCLR_A0	10                           	| [$0af4: res  2,h]
	move.b	l_941C(a6),d0                   	| [$0af6: ld   a,($941C)]
	btst.b	#4,d0                           	| [$0af9: bit  4,a]
	jeq	l_0b01                             	| [$0afb: jr   z,$0B01]
	WRITE_VIDEORAM	0x0E                      	| [$0afd: ld   (hl),$0E]
	jra	l_0b03                             	| [$0aff: jr   $0B03]

l_0b01:
	move.b	#0x01,(a0)                      	| [$0b01: ld   (hl),$01]
l_0b03:
	lea	player_2_data_9640(a6),a0                      	| [$0b03: ld   hl,$9640]
	move.b	player_1_data_9620(a6),d0                   	| [$0b06: ld   a,($9620)]
	or.b	(a0),d0                           	| [$0b09: or   (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b0a: ret  nz] [...]
0:
	move.b	l_9440(a6),d0                   	| [$0b0b: ld   a,($9440)]
	                               	| [$0b0e: and  a]
	jne	l_0b31                             	| [$0b0f: jr   nz,$0B31]
	move.b	nb_credits_9406(a6),d0          	| [$0b11: ld   a,(nb_credits_9406)]
	cmp.b	#0x01,d0                         	| [$0b14: cp   $01]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0b16: ret  c] [...]
0:
	jeq	l_0b26                             	| [$0b17: jr   z,$0B26]
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$0b19: ld   a,($942E)] [uncovered]
	and.b	#0x18,d0                         	| [$0b1c: and  $18] [uncovered]
	bne.b	0f                               	| [...]
	rts                                    	| [$0b1e: ret  z] [uncovered] [...]
0:
	cmp.b	#0x08,d0                         	| [$0b1f: cp   $08] [uncovered]
	jeq	l_0b2e                             	| [$0b21: jr   z,$0B2E] [uncovered]
	jra	l_108a                             	| [$0b23: jp   $108A] [uncovered]

l_0b26:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$0b26: ld   a,($942E)]
	and.b	#0x18,d0                         	| [$0b29: and  $18]
	cmp.b	#0x08,d0                         	| [$0b2b: cp   $08]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b2d: ret  nz] [...]
0:
l_0b2e:
	jra	l_10a0                             	| [$0b2e: jp   $10A0] [uncovered]


l_0b31:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$0b31: ld   a,($942E)] [uncovered]
	and.b	#0x18,d0                         	| [$0b34: and  $18] [uncovered]
	bne.b	0f                               	| [...]
	rts                                    	| [$0b36: ret  z] [uncovered] [...]
0:
	jra	l_0f7b                             	| [$0b37: jp   $0F7B] [uncovered]


l_0b42:
	jbsr	l_3b2d                            	| [$0b42: call $3B2D]
	jbsr	disable_game_objects_0e43                            	| [$0b45: call $0E43]
	clr.b	d0                               	| [$0b48: xor  a]
	move.b	d0,game_in_play_9669(a6)                   	| [$0b49: ld   ($9669),a]
	move.b	d0,current_player_9662(a6)                   	| [$0b4c: ld   ($9662),a]
*	clr.b	d0                               	| [$0b4f: xor  a]
*  ROM checksum
*	READ_ROM_WORD	0x0A10,d5             	| [$0b50: ld   hl,($0A10)]
*	READ_ROM_WORD	0x0A12,d3             	| [$0b53: ld   de,($0A12)]
*	READ_ROM_WORD	0x0A14,d1             	| [$0b57: ld   bc,($0A14)]
*	add.w	d3,d5                            	| [$0b5b: add  hl,de]
*	add.w	d1,d5                            	| [$0b5c: add  hl,bc]
*	
*	add.b	d6,d0                            	| [$0b5d: add  a,l]
*	add.b	d5,d0                            	| [$0b5e: add  a,h]
*	sub.b	#0xDA,d0                         	| [$0b5f: sub  $DA]
*	jne	l_2964                             	| [$0b61: jp   nz,$2964]
	                       	| [$0b64: ld   a,($0068)]
	move.b	#1,global_state_942B(a6)                   	| [$0b67: ld   ($942B),a]
	                       	| [$0b6a: ld   a,($0102)]
	move.b	#8,sub_state_942C(a6)                   	| [$0b6d: ld   ($942C),a]
	rts                                    	| [$0b70: ret]

init_end_of_level_sequence_planet_0b71:
	jbsr	update_starfield_in_game_3804                            	| [$0b71: call $3804]
	jbsr	l_4b68                            	| [$0b74: call $4B68]
	jbsr	randomize_18_star_positions_3af2                            	| [$0b77: call $3AF2]
	move.b	current_stage_960B(a6),d0                   	| [$0b7a: ld   a,($960B)]
	ror.b	#2,d0                            	| [$0b7d: rrca] * 2
	and.b	#0x07,d0                         	| [$0b7f: and  $07]
	add.b	#0x20,d0                         	| [$0b81: add  a,$20]
	move.w	#0x0100,d3                        	| [$0b84: ld   d,$01]
	move.b	d0,d3                           	| [$0b83: ld   e,a]
	jbsr	start_task_d3_0038                            	| [$0b86: rst  $38]
	move.b	#0x96,d0                        	| [$0b87: ld   a,$96]
	move.b	d0,distance_to_center_9465(a6)                   	| [$0b89: ld   ($9465),a]
	jbsr	l_5dce                            	| [$0b8c: call $5DCE]
	jbsr	fading_away_computation_start_1b86                            	| [$0b8f: call $1B86]
	move.b	#0xFB,d0                        	| [$0b92: ld   a,$FB]
	move.b	d0,stars_speed_943B(a6)                   	| [$0b94: ld   ($943B),a]
	jra	next_game_state_080b                             	| [$0b97: jp   $080B]

update_end_of_level_sequence_0b9a:
	jbsr	update_starfield_inter_levels_3831                            	| [$0b9a: call $3831]
	jbsr	update_player_ship_fading_away_1be0                            	| [$0b9d: call $1BE0]
	tst.b	d0                               	| [$0ba0: and  a]
	jeq	l_0bb1                             	| [$0ba1: jp   z,$0BB1]
	lea	distance_to_center_9465(a6),a0                      	| [$0ba4: ld   hl,$9465]
	move.b	(a0),d0                         	| [$0ba7: ld   a,(hl)]
	                               	| [$0ba8: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0ba9: ret  z] [...]
0:
	subq.b	#1,(a0)                         	| [$0baa: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0bab: ret  nz] [...]
0:
	move.w	#0x0320,d3                          	| [$0bac: ld   de,$0320]
	jbsr	start_task_d3_0038                            	| [$0baf: rst  $38]
	rts                                    	| [$0bb0: ret]

l_0bb1:
	lea	distance_to_center_9465(a6),a0                      	| [$0bb1: ld   hl,$9465]
	move.b	#0x06,(a0)                      	| [$0bb4: ld   (hl),$06]
	jra	next_game_state_080b                             	| [$0bb6: jp   $080B]

l_0bb9:
	move.b	#0xFC,d0                        	| [$0bb9: ld   a,$FC]
	move.b	d0,stars_speed_943B(a6)                   	| [$0bbb: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$0bbe: call $3831]
	lea	distance_to_center_9465(a6),a0                      	| [$0bc1: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$0bc4: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0bc5: ret  nz] [...]
0:
	move.b	#0xF0,(a0)                      	| [$0bc6: ld   (hl),$F0]
	jbsr	l_4e92                            	| [$0bc8: call $4E92]
	move.w	#0x0114,d3                          	| [$0bcb: ld   de,$0114]
	jbsr	start_task_d3_0038                            	| [$0bce: rst  $38]
	jbsr	l_5c9a                            	| [$0bcf: call $5C9A]
	READ_ROM_BYTE	0x10FE,d0                       	| [$0bd2: ld   a,($10FE)]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$0bd5: ld   ($9000),a]
	move.b	#0x40,d1                        	| [$0bd8: ld   b,$40]
	move.b	is_screen_flipped_9407(a6),d0                   	| [$0bda: ld   a,($9407)]
	ror.b	#1,d0                            	| [$0bdd: rrca]
	and.b	#0x80,d0                         	| [$0bde: and  $80]
	add.b	d1,d0                            	| [$0be0: add  a,b]
	move.b	d0,player_ship_angle_9001(a6)                   	| [$0be1: ld   ($9001),a]
	jra	next_game_state_080b                             	| [$0be4: jp   $080B]

l_0be7:
	move.b	#0xFD,d0                        	| [$0be7: ld   a,$FD]
	move.b	d0,stars_speed_943B(a6)                   	| [$0be9: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$0bec: call $3831]
	jbsr	move_player_ship_1857                            	| [$0bef: call $1857]
	jbsr	l_0cb6                            	| [$0bf2: call $0CB6]
	lea	distance_to_center_9465(a6),a0                      	| [$0bf5: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$0bf8: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0bf9: ret  nz] [...]
0:
	move.w	#0x0314,d3                          	| [$0bfa: ld   de,$0314]
	jbsr	start_task_d3_0038                            	| [$0bfd: rst  $38]
	jbsr	l_5c82                            	| [$0bfe: call $5C82]
	jra	next_game_state_080b                             	| [$0c01: jp   $080B]

l_0c04:
	jbsr	update_starfield_inter_levels_3831                            	| [$0c04: call $3831]
	jbsr	l_1686                            	| [$0c07: call $1686]
	jbsr	l_590e                            	| [$0c0a: call $590E]
	jbsr	move_player_ship_1857                            	| [$0c0d: call $1857]
	jbsr	update_player_shots_1f30                            	| [$0c10: call $1F30]
	jbsr	l_324b                            	| [$0c13: call $324B]
	jbsr	l_22f3                            	| [$0c16: call $22F3]
	jbsr	check_for_extra_life_1617                            	| [$0c19: call $1617]
	move.b	l_9605(a6),d0                   	| [$0c1c: ld   a,($9605)]
	                               	| [$0c1f: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0c20: ret  nz] [...]
0:
	lea	l_918E(a6),a0                      	| [$0c21: ld   hl,$918E]
	move.b	(a0),d0                         	| [$0c24: ld   a,(hl)]
	                               	| [$0c25: and  a]
	jeq	l_0c2a                             	| [$0c26: jr   z,$0C2A]
	subq.b	#1,(a0)                         	| [$0c28: dec  (hl)]
	rts                                    	| [$0c29: ret]

l_0c2a:
	lea	distance_to_center_9465(a6),a0                      	| [$0c2a: ld   hl,$9465]
	move.b	#0x64,(a0)                      	| [$0c2d: ld   (hl),$64]
	clr.b	d0                               	| [$0c2f: xor  a]
	move.b	d0,l_91AE(a6)                   	| [$0c30: ld   ($91AE),a]
	move.b	bcd_nb_chance_ships_shot_917e(a6),d0                   	| [$0c33: ld   a,($917E)]
	cmp.b	#0x40,d0                         	| [$0c36: cp   $40]
	jcs	report_chance_stage_results_0c53                             	| [$0c38: jr   c,$0C53]
	* PERFECT!
	move.w	#0x0119,d3                          	| [$0c3a: ld   de,$0119] [uncovered]
	jbsr	start_task_d3_0038                            	| [$0c3d: rst  $38] [uncovered]
	move.b	#0x1E,d3                        	| [$0c3e: ld   e,$1E] [uncovered]
	jbsr	start_task_d3_0038                            	| [$0c40: rst  $38] [uncovered]
	READ_ROM_BYTE	0x1208,d0                       	| [$0c41: ld   a,($1208)] [uncovered]
	move.b	d0,bcd_nb_chance_ships_shot_917e(a6)                   	| [$0c44: ld   ($917E),a] [uncovered]
	READ_ROM_BYTE	0x24EA,d0                       	| [$0c47: ld   a,($24EA)] [uncovered]
	move.b	d0,l_934E(a6)                   	| [$0c4a: ld   ($934E),a] [uncovered]
	jbsr	l_5d92                            	| [$0c4d: call $5D92] [uncovered]
	jra	write_10000_points_0c7a                             	| [$0c50: jp   $0C7A] [uncovered]

report_chance_stage_results_0c53:
	move.w	#0x0118,d3                          	| [$0c53: ld   de,$0118]
	jbsr	start_task_d3_0038                            	| [$0c56: rst  $38]
	move.w	#0x011A,d3                          	| [$0c57: ld   de,$011A]
	jbsr	start_task_d3_0038                            	| [$0c5a: rst  $38]
	addq.w	#1,d3                           	| [$0c5b: inc  e]
	jbsr	start_task_d3_0038                            	| [$0c5c: rst  $38]
	lea		0x8652,a1                          	| [$0c5d: ld   de,$8652]
	move.b	bcd_nb_chance_ships_shot_917e(a6),d0                   	| [$0c60: ld   a,($917E)]
	move.b	#0x01,d2                        	| [$0c63: ld   c,$01]
	jbsr	write_2_digits_05ea                            	| [$0c65: call $05EA]
	move.b	bcd_nb_chance_ships_shot_917e(a6),d0                   	| [$0c68: ld   a,($917E)]
	lea		0x85B2,a1                          	| [$0c6b: ld   de,$85B2]
	jbsr	write_2_digits_05ea                            	| [$0c6e: call $05EA]
	jbsr	music_off_5c88                            	| [$0c71: call $5C88]
	jbsr	l_5dd4                            	| [$0c74: call $5DD4]
	jra	next_game_state_080b                             	| [$0c77: jp   $080B]


write_10000_points_0c7a:
	READ_ROM_BYTE 0x0072,d0                       	| [$0c7a: ld   a,($0072)]
	lea	0x85B2,a1                      	| [$0c7d: ld   de,$85B2]
	move.b	#0x01,d2                        	| [$0c80: ld   c,$01]
	jbsr	write_2_digits_05ea                            	| [$0c82: call $05EA]
	move.w	#0x011B,d3                          	| [$0c85: ld   de,$011B]
	jbsr	start_task_d3_0038                            	| [$0c88: rst  $38]
	lea	0x85D2,a0                      	| [$0c89: ld   hl,$85D2]
	* write the "1" of "10000" points
	WRITE_VIDEORAM	0x17                      	| [$0c8c: ld   (hl),$17]
	BCLR_A0  10                         	| [$0c8e: res  2,h]
	WRITE_VIDEORAM	1                      	| [$0c90: ld   (hl),$01]
	jbsr	music_off_5c88                            	| [$0c92: call $5C88]
	jra	next_game_state_080b                             	| [$0c95: jp   $080B]


l_0c98:
	move.b	#0xFC,d0                        	| [$0c98: ld   a,$FC]
	move.b	d0,stars_speed_943B(a6)                   	| [$0c9a: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$0c9d: call $3831]
	jbsr	move_player_ship_1857                            	| [$0ca0: call $1857]
	jbsr	update_player_shots_1f30                            	| [$0ca3: call $1F30]
	jbsr	l_0cb6                            	| [$0ca6: call $0CB6]
	lea	distance_to_center_9465(a6),a0                      	| [$0ca9: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$0cac: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0cad: ret  nz] [...]
0:
	lea	distance_to_center_9465(a6),a0                      	| [$0cae: ld   hl,$9465]
	move.b	#0x78,(a0)                      	| [$0cb1: ld   (hl),$78]
	jra	next_game_state_080b                             	| [$0cb3: jp   $080B]

l_0cb6:
	move.b	general_fast_timer_9400(a6),d0                   	| [$0cb6: ld   a,($9400)]
	move.b	d0,d1                           	| [$0cb9: ld   b,a]
	and.b	#0x07,d0                         	| [$0cba: and  $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$0cbc: ret  nz] [...]
0:
	move.b	d1,d0                           	| [$0cbd: ld   a,b]
	ror.b	#3,d0                            	| [$0cbe: rrca] * 3
	and.b	#0x03,d0                         	| [$0cc1: and  $03]
	LEA_ROM	0x0CF3,a0                          	| [$0cc3: ld   hl,$0CF3]
	jbsr	fetch_a0_plus_d0_0008                            	| [$0cc6: rst  $08]
	lea	0x832E,a0                          	| [$0cc7: ld   hl,$832E]
	move.w	#-0x25,d3                       	| [$0cca: ld   de,$FFDB]
	move.b	#0x14,d2                        	| [$0ccd: ld   c,$14]
l_0ccf:
	move.b	#0x05,d1                        	| [$0ccf: ld   b,$05]
l_0cd1:
	jbsr	osd_w_videoram                         	| [$0cd1: ld   (hl),a]
	addq	#1,a0                           	| [$0cd2: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_0cd1                             	| [$0cd3: djnz $0CD1]
	add.w	d3,a0                            	| [$0cd5: add  hl,de]
	subq.b	#1,d2                           	| [$0cd6: dec  c]
	jne	l_0ccf                             	| [$0cd7: jr   nz,$0CCF]
	rts                                    	| [$0cd9: ret]

l_0cf7:
	move.b	#0xFC,d0                        	| [$0cf7: ld   a,$FC]
	move.b	d0,stars_speed_943B(a6)                   	| [$0cf9: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$0cfc: call $3831]
	jbsr	l_0cb6                            	| [$0cff: call $0CB6]
	jbsr	move_player_ship_1857                            	| [$0d02: call $1857]
	jbsr	update_player_shots_1f30                            	| [$0d05: call $1F30]
	jbsr	check_for_extra_life_1617                            	| [$0d08: call $1617]
	lea	l_934E(a6),a0                      	| [$0d0b: ld   hl,$934E]
	move.b	(a0),d0                         	| [$0d0e: ld   a,(hl)]
	                               	| [$0d0f: and  a]
	jne	l_0d6e                             	| [$0d10: jr   nz,$0D6E]
	move.b	bcd_nb_chance_ships_shot_917e(a6),d0                   	| [$0d12: ld   a,($917E)]
	                               	| [$0d15: and  a]
	jeq	l_0d3d                             	| [$0d16: jr   z,$0D3D]
	move.b	general_fast_timer_9400(a6),d0                   	| [$0d18: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$0d1b: and  $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d1d: ret  nz] [...]
0:
	lea	bcd_nb_chance_ships_shot_917e(a6),a0                      	| [$0d1e: ld   hl,$917E]
	move.w	#0x0402,d3                          	| [$0d21: ld   de,$0402]
	move.b	(a0),d0                         	| [$0d24: ld   a,(hl)]
	moveq	#1,d7
	sbcd	d7,d0                        	| [$0d25: sub  $01]+daa
	move.b	d0,(a0)                         	| [$0d28: ld   (hl),a]
	jeq	l_0d39                             	| [$0d29: jr   z,$0D39]
	addq.b	#1,d3                           	| [$0d2b: inc  e]
	move.b	(a0),d0                         	| [$0d2c: ld   a,(hl)]
	sbcd	d7,d0                        	| [$0d2d: sub  $01]+daa
	move.b	d0,(a0)                         	| [$0d30: ld   (hl),a]
	jeq	l_0d39                             	| [$0d31: jr   z,$0D39]
	addq.b	#1,d3                           	| [$0d33: inc  e]
	move.b	(a0),d0                         	| [$0d34: ld   a,(hl)]
	sbcd	d7,d0                        	| [$0d35: sub  $01]+daa
	move.b	d0,(a0)                         	| [$0d38: ld   (hl),a]
l_0d39:
	jbsr	start_task_d3_0038                            	| [$0d39: rst  $38]
	jbsr	l_5d8c                            	| [$0d3a: call $5D8C]
l_0d3d:
	lea	distance_to_center_9465(a6),a0                      	| [$0d3d: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$0d40: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d41: ret  nz] [...]
0:
	jbsr	l_3b2d                            	| [$0d42: call $3B2D]
	READ_ROM_BYTE	0x3526,d0                       	| [$0d45: ld   a,($3526)]
	move.b	d0,sub_state_942C(a6)                   	| [$0d48: ld   ($942C),a]
	move.w	#0x0319,d3                          	| [$0d4b: ld   de,$0319]
	jbsr	start_task_d3_0038                            	| [$0d4e: rst  $38]
	addq.b	#1,d3                           	| [$0d4f: inc  e]
	jbsr	start_task_d3_0038                            	| [$0d50: rst  $38]
	addq.b	#1,d3                           	| [$0d51: inc  e]
	jbsr	start_task_d3_0038                            	| [$0d52: rst  $38]
	move.b	#0x1E,d3                        	| [$0d53: ld   e,$1E]
	jbsr	start_task_d3_0038                            	| [$0d55: rst  $38]
	READ_ROM_BYTE	0x4134,d0                       	| [$0d56: ld   a,($4134)]
	WRITE_D0_VIDEORAM	0x8652                       	| [$0d59: ld   ($8652),a]
	WRITE_D0_VIDEORAM   0x8632                       	| [$0d5c: ld   ($8632),a]
	WRITE_D0_VIDEORAM   0x85B2                       	| [$0d5f: ld   ($85B2),a]
	WRITE_D0_VIDEORAM   0x8592                       	| [$0d62: ld   ($8592),a]
	WRITE_D0_VIDEORAM   0x85D2                       	| [$0d65: ld   ($85D2),a]
	WRITE_D0_VIDEORAM   0x8672                       	| [$0d68: ld   ($8672),a]
	jra	l_0dba                             	| [$0d6b: jp   $0DBA]

l_0d6e:
	clr.b	(a0)                             	| [$0d6e: ld   (hl),$00]
	move.w	#0x0402,d3                          	| [$0d70: ld   de,$0402]
	jra	l_0d39  
	
l_0d75:
	READ_ROM_BYTE	0x4418,d0                       	| [$0d75: ld   a,($4418)]
	move.b	d0,sub_state_942C(a6)                   	| [$0d78: ld   ($942C),a]
	READ_ROM_BYTE	0x46B0,d0                       	| [$0d7b: ld   a,($46B0)]
	move.b	d0,global_state_942B(a6)                   	| [$0d7e: ld   ($942B),a]
	READ_ROM_BYTE	0x57F5,d0                       	| [$0d81: ld   a,($57F5)]
	move.b	d0,l_9803(a6)                   	| [$0d84: ld   ($9803),a]
	move.b	d0,l_9807(a6)                   	| [$0d87: ld   ($9807),a]
	move.b	d0,l_980B(a6)                   	| [$0d8a: ld   ($980B),a]
	move.b	d0,l_980F(a6)                   	| [$0d8d: ld   ($980F),a]
	jbsr	disable_game_objects_0e43                            	| [$0d90: call $0E43]
	jbsr	l_5dd4                            	| [$0d93: call $5DD4]
	rts                                    	| [$0d96: ret]

l_0d97:
	jbsr	update_starfield_inter_levels_3831                            	| [$0d97: call $3831]
	jbsr	update_player_ship_fading_away_1be0                            	| [$0d9a: call $1BE0]
	tst.b	d0                               	| [$0d9d: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d9e: ret  nz] [...]
0:
	jbsr	l_172e                            	| [$0d9f: call $172E]
	READ_ROM_BYTE	0x5859,d0                       	| [$0da2: ld   a,($5859)]
	move.b	d0,sub_state_942C(a6)                   	| [$0da5: ld   ($942C),a]
*  ROM checksum
*	LEA_ROM	0x0500,a1                          	| [$0da8: ld   de,$0500]
*	lea	0x8000,a4                          	| [$0dab: ld   bc,$8000]
*l_0dae:
*	move.b	(a1),d0                         	| [$0dae: ld   a,(de)]
*	add.b	d2,d0                            	| [$0daf: add  a,c]
*	move.b	d0,d2                           	| [$0db0: ld   c,a]
*	addq.w	#1,a1                           	| [$0db1: inc  de]
*	subq.b	#1,d1                           	| [...]
*	jne	l_0dae                             	| [$0db2: djnz $0DAE]
*	sub.b	#0xC9,d0                         	| [$0db4: sub  $C9]
*	jne	l_dd0000                             	| [$0db6: jp   nz,$0000]
	rts                                    	| [$0db9: ret]

l_0dba:
	move.b	game_in_play_9669(a6),d0                   	| [$0dba: ld   a,($9669)]
	                               	| [$0dbd: and  a]
	jeq	l_0d75                             	| [$0dbe: jp   z,$0D75]
l_0dc1:
	jbsr	disable_game_objects_0e43                            	| [$0dc1: call $0E43]
	jbsr	l_09d2                            	| [$0dc4: call $09D2]
	* advance stage
	lea	current_stage_number_9609(a6),a0         	| [$0dc7: ld   hl,current_stage_number_9609]
	addq.b	#1,(a0)                         	| [$0dca: inc  (hl)]
	move.b	(a0),d1                         	| [$0dcb: ld   b,(hl)]
	lea	current_stage_960B(a6),a0                      	| [$0dcc: ld   hl,$960B]
	addq.b	#1,(a0)                         	| [$0dcf: inc  (hl)]
	move.b	(a0),d0                         	| [$0dd0: ld   a,(hl)]
	cmp.b	#0x18,d0                         	| [$0dd1: cp   $18]
	jcs	l_0df2                             	| [$0dd3: jr   c,$0DF2]
	move.b	d1,d0                           	| [$0dd5: ld   a,b] [uncovered]
	move.b	#0x05,d4                        	| [$0dd6: ld   e,$05] [uncovered]
l_0dd8:
	sub.b	#0x18,d0                         	| [$0dd8: sub  $18] [uncovered]
	jcs	l_0dec                             	| [$0dda: jr   c,$0DEC] [uncovered]
	move.b	#0x08,d4                        	| [$0ddc: ld   e,$08] [uncovered]
	sub.b	#0x18,d0                         	| [$0dde: sub  $18] [uncovered]
	jcs	l_0dec                             	| [$0de0: jr   c,$0DEC] [uncovered]
	move.b	#0x0B,d4                        	| [$0de2: ld   e,$0B] [uncovered]
	sub.b	#0x18,d0                         	| [$0de4: sub  $18] [uncovered]
	jcs	l_0dec                             	| [$0de6: jr   c,$0DEC] [uncovered]
	clr.b	d4                               	| [$0de8: ld   e,$00] [uncovered]
	jra	l_0dd8                             	| [$0dea: jr   $0DD8] [uncovered]

l_0dec:
	clr.b	(a0)                             	| [$0dec: ld   (hl),$00] [uncovered]
	move.b	d4,d0                           	| [$0dee: ld   a,e]
	move.b	d0,l_960A(a6)                   	| [$0def: ld   ($960A),a]

l_0df2:
	move.b	d1,d0                           	| [$0df2: ld   a,b]
	addq.b	#1,d0                           	| [$0df3: inc  a]
	and.b	#0x03,d0                         	| [$0df4: and  $03]
	cmp.b	#0x03,d0                         	| [$0df6: cp   $03]
	jeq	l_0e69                             	| [$0df8: jr   z,$0E69]
	jbsr	l_5dd4                            	| [$0dfa: call $5DD4]
	jbsr	l_0050                            	| [$0dfd: call $0050]
	addq.b	#1,(a0)                         	| [$0e00: inc  (hl)]
	move.b	(a0),d0                         	| [$0e01: ld   a,(hl)]
	cmp.b	#0x12,d0                         	| [$0e02: cp   $12]
	jcs	l_0e08                             	| [$0e04: jr   c,$0E08]
	move.b	#0x11,(a0)                      	| [$0e06: ld   (hl),$11] [uncovered]
l_0e08:
	move.b	#0x24,d0                        	| [$0e08: ld   a,$24]
	move.b	d0,l_9601(a6)                   	| [$0e0a: ld   ($9601),a]
	move.b	d0,l_9605(a6)                   	| [$0e0d: ld   ($9605),a]
	clr.b	d0                               	| [$0e10: xor  a]
	move.b	d0,l_961D(a6)                   	| [$0e11: ld   ($961D),a]
	move.b	d0,iceberg_on_screen_915e(a6)                   	| [$0e14: ld   ($915E),a]
	move.b	d0,l_9603(a6)                   	| [$0e17: ld   ($9603),a]
	move.b	d0,l_960D(a6)                   	| [$0e1a: ld   ($960D),a]
	move.b	d0,at_least_one_active_enemy_902E(a6)                   	| [$0e1d: ld   ($902E),a]
	move.b	d0,l_913E(a6)                   	| [$0e20: ld   ($913E),a]
	move.b	d0,l_9602(a6)                   	| [$0e23: ld   ($9602),a]
	move.b	d0,l_900E(a6)                   	| [$0e26: ld   ($900E),a]
	move.b	d0,l_919E(a6)                   	| [$0e29: ld   ($919E),a]
	move.b	d0,l_9610(a6)                   	| [$0e2c: ld   ($9610),a]
	move.b	#0x05,d3                        	| [$0e2f: ld   d,$05]
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$0e31: rst  $38]
	lea	distance_to_center_9465(a6),a0                      	| [$0e32: ld   hl,$9465]
	move.b	#0x78,(a0)                      	| [$0e35: ld   (hl),$78]
	lea	sub_state_942C(a6),a0                      	| [$0e37: ld   hl,$942C]
	move.b	#0x14,(a0)                      	| [$0e3a: ld   (hl),$14]
	jbsr	randomize_18_star_positions_3af2                            	| [$0e3c: call $3AF2]
	jra	l_5c9a                             	| [$0e3f: jp   $5C9A]

disable_game_objects_0e43:
	clr.b	d0                               	| [$0e43: xor  a]
	lea	enemy_objects_9010(a6),a0                      	| [$0e44: ld   hl,$9010]
	move.w	#0x0010,d3                      	| [$0e47: ld   de,$0010]
	move.b	#0x3D,d1                        	| [$0e4a: ld   b,$3D]
l_0e4c:
	move.b	d0,(a0)                         	| [$0e4c: ld   (hl),a]
	add.w	d3,a0                            	| [$0e4d: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0e4c                             	| [$0e4e: djnz $0E4C]
	lea	sprite_shadow_ram_9800+0x10(a6),a0                      	| [$0e50: ld   hl,$9810]
	move.w	#0x0004,d3                      	| [$0e53: ld   de,$0004]
	move.b	#0x38,d1                        	| [$0e56: ld   b,$38]
l_0e58:
	move.b	d0,(a0)                         	| [$0e58: ld   (hl),a]
	add.w	d3,a0                            	| [$0e59: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0e58                             	| [$0e5a: djnz $0E58]
	lea	l_9900(a6),a0                      	| [$0e5c: ld   hl,$9900]
	move.w	#0x0004,d3                      	| [$0e5f: ld   de,$0004]
	move.b	#0x0E,d1                        	| [$0e62: ld   b,$0E]
l_0e64:
	move.b	d0,(a0)                         	| [$0e64: ld   (hl),a]
	add.w	d3,a0                            	| [$0e65: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0e64                             	| [$0e66: djnz $0E64]
	rts                                    	| [$0e68: ret]

l_0e69:
	jbsr	l_0058                            	| [$0e69: call $0058]
	jbsr	l_5d9e                            	| [$0e6c: call $5D9E]
	move.b	#0x33,d0                        	| [$0e6f: ld   a,$33]
	move.b	d0,l_9601(a6)                   	| [$0e71: ld   ($9601),a]
	move.b	d0,l_9605(a6)                   	| [$0e74: ld   ($9605),a]
	move.b	d0,l_91AE(a6)                   	| [$0e77: ld   ($91AE),a]
	clr.b	d0                               	| [$0e7a: xor  a]
	move.b	d0,l_960D(a6)                   	| [$0e7b: ld   ($960D),a]
	move.b	d0,at_least_one_active_enemy_902E(a6)                   	| [$0e7e: ld   ($902E),a]
	move.b	d0,l_913E(a6)                   	| [$0e81: ld   ($913E),a]
	move.b	d0,l_9602(a6)                   	| [$0e84: ld   ($9602),a]
	move.b	d0,bcd_nb_chance_ships_shot_917e(a6)                   	| [$0e87: ld   ($917E),a]
	move.b	d0,iceberg_on_screen_915e(a6)                   	| [$0e8a: ld   ($915E),a]
	move.b	#0x05,d3                        	| [$0e8d: ld   d,$05]
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$0e8f: rst  $38]
	lea	distance_to_center_9465(a6),a0                      	| [$0e90: ld   hl,$9465]
	move.b	#0x78,(a0)                      	| [$0e93: ld   (hl),$78]
	move.b	#0x0F,d0                        	| [$0e95: ld   a,$0F]
	move.b	d0,l_918E(a6)                   	| [$0e97: ld   ($918E),a]
	READ_ROM_BYTE	0x3542,d0                       	| [$0e9a: ld   a,($3542)]
	move.b	d0,sub_state_942C(a6)                   	| [$0e9d: ld   ($942C),a]
	rts                                    	| [$0ea0: ret]

handle_level_timeout_0ea1:
	lea	sixtieth_of_seconds_since_last_respawn_9606(a6),a0                      	| [$0ea1: ld   hl,$9606]
	jbsr	bcd_add_base_60_0ec0                            	| [$0ea4: call $0EC0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0ea7: ret  c] [...]
0:
	lea	seconds_since_last_respawn_935e(a6),a0                      	| [$0ea8: ld   hl,$935E]
	addq.b	#1,(a0)                         	| [$0eab: inc  (hl)]
	move.b	(a0),d0                         	| [$0eac: ld   a,(hl)]
	cmp.b	#0x32,d0                         	| [$0ead: cp   $32]
	jne	l_0eb4                             	| [$0eaf: jr   nz,$0EB4]
	* something happens after 32 seconds playing the level or respawn
	* after having been killed: 
	* from now on, every attacking enemy will flee (less points,
	* no hogging the machine by stalling in the level)
	move.b	d0,enemy_flees_flag_91ee(a6)                   	| [$0eb1: ld   ($91EE),a] [uncovered]
l_0eb4:
	lea	l_9608(a6),a0                      	| [$0eb4: ld   hl,$9608]
	jbsr	bcd_add_base_60_0ec0                            	| [$0eb7: call $0EC0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0eba: ret  c] [...]
0:
	subq.w	#1,a0                           	| [$0ebb: dec  l]
	jbsr	bcd_add_base_60_0ec0                            	| [$0ebc: call $0EC0]
	rts                                    	| [$0ebf: ret]

bcd_add_base_60_0ec0:
	CLEAR_XC_FLAGS
	move.b	(a0),d0                         	| [$0ec0: ld   a,(hl)]
	moveq	#1,d7
	abcd	d7,d0                        	| [$0ec1: add  a,$01]+daa
	move.b	d0,(a0)                         	| [$0ec4: ld   (hl),a]
	cmp.b	#0x60,d0                         	| [$0ec5: cp   $60]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0ec7: ret  c] [...]
0:
	clr.b	(a0)                             	| [$0ec8: ld   (hl),$00]
	rts                                    	| [$0eca: ret]

l_0ecb:
	lea	sprite_shadow_ram_9800(a6),a0      	| [$0ecb: ld   hl,sprite_shadow_ram_9800]
	move.w	#0x0004,d3                      	| [$0ece: ld   de,$0004]
	clr.b	d0                               	| [$0ed1: xor  a]
	move.b	#0x3C,d1                        	| [$0ed2: ld   b,$3C]
l_0ed4:
	move.b	d0,(a0)                         	| [$0ed4: ld   (hl),a]
	add.w	d3,a0                            	| [$0ed5: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0ed4                             	| [$0ed6: djnz $0ED4]
	lea	l_9900(a6),a0                      	| [$0ed8: ld   hl,$9900]
	move.b	#0x0E,d1                        	| [$0edb: ld   b,$0E]
l_0edd:
	move.b	d0,(a0)                         	| [$0edd: ld   (hl),a]
	add.w	d3,a0                            	| [$0ede: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0edd                             	| [$0edf: djnz $0EDD]
	lea	l_9803(a6),a0                      	| [$0ee1: ld   hl,$9803]
	move.b	#0x04,d1                        	| [$0ee4: ld   b,$04]
l_0ee6:
	move.b	d0,(a0)                         	| [$0ee6: ld   (hl),a]
	add.w	d3,a0                            	| [$0ee7: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0ee6                             	| [$0ee8: djnz $0EE6]
	* clear the variables
	move.b	d0,update_sequence_control_flag_a7fd(a6)                       	| [$0eea: ld   ($A7FD),a]
	move.b	d0,update_sequence_control_flag_a7fc(a6)                       	| [$0eed: ld   ($A7FC),a]
	lea	level_playing_flag_9000(a6),a0                      	| [$0ef0: ld   hl,$9000]
	move.w	#0x0010,d3                      	| [$0ef3: ld   de,$0010]
	move.b	#0x3B,d1                        	| [$0ef6: ld   b,$3B]
l_0ef8:
	clr.b	(a0)                             	| [$0ef8: ld   (hl),$00]
	add.w	d3,a0                            	| [$0efa: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0ef8                             	| [$0efb: djnz $0EF8]
	rts                                    	| [$0efd: ret]

global_state_init_0efe:
	move.b	sub_state_942C(a6),d0                   	| [$0efe: ld   a,($942C)]
	jbsr	jump_table_jump_0030                            	| [$0f01: rst  $30]
* [jump_table]
	.long	rom_checksum_and_next_state_0f11
	.long	clear_screen_then_init_tasks_4C00
	.long	-1                           	|   bogus
	.long	-1                           	|   bogus
	.long	-1                           	|   bogus
	.long	-1
	.long	-1

rom_checksum_and_next_state_0f11:
	jbsr	l_01bb                            	| [$0f11: call $01BB]
* ROM checksum
*	READ_ROM_BYTE	0x37A9,d0                       	| [$0f14: ld   a,($37A9)]
*	LOAD_RAM_POINTER	l_37AA,a0             	| [$0f17: ld   hl,($37AA)]
*
*	ADD_D0_TO_A0_0018                            	| [$0f1a: rst  $18]
*	eor.b	d5,d0                            	| [$0f1b: xor  h]
*	sub.b	#0xEB,d0                         	| [$0f1c: sub  $EB]
*	jne	l_dd0000                             	| [$0f1e: jp   nz,$0000]
	jra	next_game_state_080b                             	| [$0f21: jp   $080B]

global_state_title_screen_0f24:
	pea		l_0f4c(pc)                          	| [$0f24: ld   hl,$0F4C]

												| [$0f27: push hl]
	move.b	sub_state_942C(a6),d0                   	| [$0f28: ld   a,($942C)]
	jbsr	jump_table_jump_0030                            	| [$0f2b: rst  $30]
* [jump_table]
	.long	title_screen_init_5e1a			| ran once
	.long	start_title_screen_tasks_46b6
	.long	show_title_for_a_while_24c2
	.long	switch_to_highscores_3509		| ran once
	.long	show_highscores_for_a_while_3909
	.long	switch_to_game_demo_00f9
	.long	clear_screen_and_go_to_demo_4104
	.long	new_demo_game_start_2e8f
	.long	l_43f4
	.long	l_055c
	.long	-1                           	|   bogus
	.long	-1                           	|   bogus
	.long	-1                           	|   bogus
	.long	-1
	.long	-1

l_0f4c:
	move.b	global_state_942B(a6),d0                   	| [$0f4c: ld   a,($942B)]
	subq.b	#1,d0                           	| [$0f4f: dec  a]
	bne.b	0f                               	| [...]
	jbsr	update_starfield_in_game_3804                            	| [$0f50: call z,$3804]
0:
	move.b	nb_credits_9406(a6),d0          	| [$0f53: ld   a,(nb_credits_9406)]
	                               	| [$0f56: and  a]
	jeq	l_0f67                             	| [$0f57: jp   z,$0F67]
	READ_ROM_BYTE	0x00F1,d0                       	| [$0f5a: ld   a,($00F1)]
	move.b	d0,global_state_942B(a6)                   	| [$0f5d: ld   ($942B),a]
	READ_ROM_BYTE	0x0112,d0                       	| [$0f60: ld   a,($0112)]
	move.b	d0,sub_state_942C(a6)                   	| [$0f63: ld   ($942C),a]
	rts                                    	| [$0f66: ret]

l_0f67:
	move.b	l_9440(a6),d0                   	| [$0f67: ld   a,($9440)]
	                               	| [$0f6a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0f6b: ret  z] [...]
0:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$0f6c: ld   a,($942E)] [uncovered]
	and.b	#0x18,d0                         	| [$0f6f: and  $18] [uncovered]
	bne.b	0f                               	| [...]
	rts                                    	| [$0f71: ret  z] [uncovered] [...]
0:
	jbsr	l_0ecb                            	| [$0f72: call $0ECB] [uncovered]
	jbsr	music_off_5c88                            	| [$0f75: call $5C88] [uncovered]
	jbsr	l_5dd4                            	| [$0f78: call $5DD4] [uncovered]
l_0f7b:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$0f7b: ld   a,($942E)] [uncovered]
	btst.b	#4,d0                           	| [$0f7e: bit  4,a] [uncovered]
	jne	set_lives_for_both_players_0f87                             	| [$0f80: jr   nz,$0F87] [uncovered]
	btst.b	#3,d0                           	| [$0f82: bit  3,a] [uncovered]
	jne	l_0f9a                             	| [$0f84: jr   nz,$0F9A] [uncovered]
	rts                                    	| [$0f86: ret] [uncovered]


set_lives_for_both_players_0f87:
	st.b	d0                                	| [$0f87: ld   a,$FF] [uncovered]
	move.b	d0,game_in_play_9669(a6)                   	| [$0f89: ld   ($9669),a]
	move.b	d0,l_9458(a6)                   	| [$0f8c: ld   ($9458),a]
	move.b	start_lives_9441(a6),d0                   	| [$0f8f: ld   a,($9441)]
	move.b	d0,player_1_data_9620(a6)                   	| [$0f92: ld   ($9620),a]
	move.b	d0,player_2_data_9640(a6)                   	| [$0f95: ld   ($9640),a]
	jra	l_0fab                             	| [$0f98: jr   $0FAB]

l_0f9a:
	CLEAR_XC_FLAGS                         	| [$0f9a: xor  a]
	clr.b	d0                               	| [$0f9a: xor  a]
	move.b	d0,l_9458(a6)                   	| [$0f9b: ld   ($9458),a]
	move.b	d0,player_2_data_9640(a6)                   	| [$0f9e: ld   ($9640),a]
	subq.b	#1,d0                           	| [$0fa1: dec  a]
	move.b	d0,game_in_play_9669(a6)                   	| [$0fa2: ld   ($9669),a]
	move.b	start_lives_9441(a6),d0                   	| [$0fa5: ld   a,($9441)]
	move.b	d0,player_1_data_9620(a6)                   	| [$0fa8: ld   ($9620),a]

l_0fab:
	READ_ROM_BYTE	0x06D9,d0                       	| [$0fab: ld   a,($06D9)]
	move.b	d0,global_state_942B(a6)                   	| [$0fae: ld   ($942B),a]
	READ_ROM_BYTE	0x0981,d0                       	| [$0fb1: ld   a,($0981)]
	move.b	d0,sub_state_942C(a6)                   	| [$0fb4: ld   ($942C),a]
	jbsr	osd_read_dsw_2                      	| [$0fb7: ld   a,($C000)]
	not.b	d0                               	| [$0fba: cpl]
	ror.b	#4,d0                            	| [$0fbb: rrca] * 4
	and.b	#0x07,d0                         	| [$0fbf: and  $07]
	move.b	d0,difficulty_9444(a6)                   	| [$0fc1: ld   ($9444),a]
	rts                                    	| [$0fc4: ret]

l_1019:
	jbsr	l_130f                            	| [$1019: call $130F]
	jra	read_dip_switches_2_599d                             	| [$101c: jp   $599D]

global_state_push_start_101f:
	jbsr	update_starfield_in_game_3804                            	| [$101f: call $3804]
	move.b	sub_state_942C(a6),d0                   	| [$1022: ld   a,($942C)]
	jbsr	jump_table_jump_0030                            	| [$1025: rst  $30]
* [jump_table]
	.long	l_139d
	.long	l_06de
	.long	l_155f
	.long	l_1043
	.long	l_105a
	.long	-1
	.long	-1
	.long	-1
	.long	-1
	.long	-1


l_1043:
	jbsr	l_0cb6                            	| [$1043: call $0CB6]
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$1046: ld   a,($942E)]
	btst.b	#3,d0                           	| [$1049: bit  3,a]
	jne	l_10a0                             	| [$104b: jp   nz,$10A0]
	move.b	nb_credits_9406(a6),d0          	| [$104e: ld   a,(nb_credits_9406)]
	subq.b	#1,d0                           	| [$1051: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1052: ret  z] [...]
0:
	move.w	#0x0117,d3                          	| [$1053: ld   de,$0117] [uncovered]
	jbsr	start_task_d3_0038                            	| [$1056: rst  $38] [uncovered]
	jra	next_game_state_080b                             	| [$1057: jp   $080B] [uncovered]

l_105a:
	jbsr	l_0cb6                            	| [$105a: call $0CB6]
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$105d: ld   a,($942E)]
	btst.b	#4,d0                           	| [$1060: bit  4,a]
	jne	l_108a                             	| [$1062: jp   nz,$108A]
	btst.b	#3,d0                           	| [$1065: bit  3,a]
	jne	l_10a0                             	| [$1067: jp   nz,$10A0]
	move.l	a0,-(a7)
	move.b		(0x05FB,a6),d0            | [$106a: ld   a,($85FB)]
	move.l	(a7)+,a0

	sub.b	#0x48,d0                         	| [$106d: sub  $48]
	jne	l_07ff                             	| [$106f: jp   nz,$07FF]
	rts                                    	| [$1072: ret]


l_108a:
	lea	nb_credits_9406(a6),a0                      	| [$108a: ld   hl,$9406] [uncovered]
	move.b	(a0),d0                         	| [$108d: ld   a,(hl)]
	moveq	#2,d7
	sbcd	d7,d0                        	| [$108e: sub  $02]+daa
	move.b	d0,(a0)                         	| [$1091: ld   (hl),a]
	st.b	d0                                	| [$1092: ld   a,$FF]
	move.b	d0,game_in_play_9669(a6)                   	| [$1094: ld   ($9669),a]
	move.b	d0,l_9458(a6)                   	| [$1097: ld   ($9458),a]
	jbsr	l_135a                            	| [$109a: call $135A]
	jra	l_0fab                             	| [$109d: jp   $0FAB]


l_10a0:
	lea	nb_credits_9406(a6),a0             	| [$10a0: ld   hl,nb_credits_9406]
	move.b	(a0),d0                         	| [$10a3: ld   a,(hl)]
	moveq	#1,d7
	sbcd	d7,d0                        	| [$10a4: sub  $01]+daa
	move.b	d0,(a0)                         	| [$10a7: ld   (hl),a]
	move.b	l_9458(a6),d0                   	| [$10a8: ld   a,($9458)]
	CLEAR_XC_FLAGS                         	| [$10ab: xor  a]
	clr.b	d0                               	| [$10ab: xor  a]
	move.b	d0,l_9458(a6)                   	| [$10ac: ld   ($9458),a]
	move.b	d0,player_2_data_9640(a6)                   	| [$10af: ld   ($9640),a]
	addq.b	#1,d0                           	| [$10b2: inc  a]
	move.b	d0,game_in_play_9669(a6)                   	| [$10b3: ld   ($9669),a]
	jbsr	l_135a                            	| [$10b6: call $135A]
	jra	l_0fab                             	| [$10b9: jp   $0FAB]

l_10bc:
	jbsr	l_114f                            	| [$10bc: call $114F]
	jbsr	l_11c9                            	| [$10bf: call $11C9]
	jbsr	l_1188                            	| [$10c2: call $1188]
	jbsr	l_120c                            	| [$10c5: call $120C]
	jbsr	l_12eb                            	| [$10c8: call $12EB]
	rts                                    	| [$10cb: ret]

l_114f:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$114f: ld   a,($942E)]
	CLEAR_XC_FLAGS			| jotd: ror => roxr
	roxr.b	#3,d0                            	| [$1152: rrca] * 3
	lea	l_9403(a6),a0                      	| [$1155: ld   hl,$9403]
	ROXL_A0                        	| [$1158: rl   (hl)]
	move.b	(a0),d0                         	| [$115a: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$115b: and  $07]
	cmp.b	#0x01,d0                         	| [$115d: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$115f: ret  nz] [...]
0:
	jbsr	l_5c72                            	| [$1160: call $5C72] [uncovered]
	move.b	#0x01,d2                        	| [$1163: ld   c,$01] [uncovered]
	jra	l_11f6                             	| [$1165: jp   $11F6] [uncovered]

l_1188:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$1188: ld   a,($942E)]
	lea	l_944A(a6),a0                      	| [$118b: ld   hl,$944A]
	CLEAR_XC_FLAGS			| jotd: ror => roxr
	roxr.b	#2,d0                            	| [$118e: rrca] * 2
	ROXL_A0                         	| [$1190: rl   (hl)]
	move.b	(a0),d0                         	| [$1192: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$1193: and  $07]
	cmp.b	#0x01,d0                         	| [$1195: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$1197: ret  nz] [...]
0:
	exg	a1,a0                              	| [$1198: ex   de,hl] [uncovered]
	jbsr	l_5c72                            	| [$1199: call $5C72] [uncovered]
	lea	l_9402(a6),a0                      	| [$119c: ld   hl,$9402] [uncovered]
	addq.b	#1,(a0)                         	| [$119f: inc  (hl)] [uncovered]
	exg	a1,a0                              	| [$11a0: ex   de,hl] [uncovered]
	addq.w	#1,a0                           	| [$11a1: inc  hl] [uncovered]
	move.b	(a0),d0                         	| [$11a2: ld   a,(hl)] [uncovered]
	add.b	#0x10,d0                         	| [$11a3: add  a,$10] [uncovered]
	move.b	d0,(a0)+                         	| [$11a5: ld   (hl),a] [uncovered]
	move.b	d0,d1                           	| [$11a6: ld   b,a] [uncovered]
	                           	| [$11a7: inc  hl] [uncovered]
	move.b	(a0),d0                         	| [$11a8: ld   a,(hl)] [uncovered]
	sub.b	d1,d0                            	| [$11a9: sub  b] [uncovered]
	bcs.b	0f                               	| [...]
	rts                                    	| [$11aa: ret  nc] [uncovered] [...]
0:
	move.b	(a0),d0                         	| [$11ab: ld   a,(hl)] [uncovered]
	move.b	d0,d2                           	| [$11ac: ld   c,a] [uncovered]
	and.b	#0xF0,d0                         	| [$11ad: and  $F0] [uncovered]
	add.b	#0x10,d0                         	| [$11af: add  a,$10] [uncovered]
	subq.w	#1,a0                           	| [$11b1: dec  hl] [uncovered]
	neg.b	d0                               	| [$11b2: neg] [uncovered]
	add.b	(a0),d0                          	| [$11b4: add  a,(hl)] [uncovered]
	move.b	d0,(a0)                         	| [$11b5: ld   (hl),a] [uncovered]
	jra	l_11f6                             	| [$11b6: jr   $11F6] [uncovered]

l_11c9:
	move.b	copy_of_system_inputs_942E(a6),d0                   	| [$11c9: ld   a,($942E)]
	lea	l_9447(a6),a0                      	| [$11cc: ld   hl,$9447]
	CLEAR_XC_FLAGS		| jotd ror => roxr
	roxr.b	#1,d0                            	| [$11cf: rrca]
	ROXL_A0                         	| [$11d0: rl   (hl)]
	move.b	(a0),d0                         	| [$11d2: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$11d3: and  $07]
	cmp.b	#0x01,d0                         	| [$11d5: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$11d7: ret  nz] [...]
0:
	exg	a1,a0                              	| [$11d8: ex   de,hl]
	jbsr	l_5c72                            	| [$11d9: call $5C72]
	lea	l_9401(a6),a0                      	| [$11dc: ld   hl,$9401]
	addq.b	#1,(a0)                         	| [$11df: inc  (hl)]
	exg	a1,a0                              	| [$11e0: ex   de,hl]
	addq.w	#1,a0                           	| [$11e1: inc  hl]
	move.b	(a0),d0                         	| [$11e2: ld   a,(hl)]
	add.b	#0x10,d0                         	| [$11e3: add  a,$10]
	move.b	d0,(a0)                         	| [$11e5: ld   (hl),a]
	move.b	d0,d1                           	| [$11e6: ld   b,a]
	addq.w	#1,a0                           	| [$11e7: inc  hl]
	move.b	(a0),d0                         	| [$11e8: ld   a,(hl)]
	sub.b	d1,d0                            	| [$11e9: sub  b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$11ea: ret  nc] [...]
0:
	move.b	(a0),d0                         	| [$11eb: ld   a,(hl)]
	move.b	d0,d2                           	| [$11ec: ld   c,a]
	and.b	#0xF0,d0                         	| [$11ed: and  $F0]
	add.b	#0x10,d0                         	| [$11ef: add  a,$10]
	subq.w	#1,a0                           	| [$11f1: dec  hl]
	neg.b	d0                               	| [$11f2: neg]
	add.b	(a0),d0                          	| [$11f4: add  a,(hl)]
	move.b	d0,(a0)                         	| [$11f5: ld   (hl),a]
l_11f6:
	move.b	l_9440(a6),d0                   	| [$11f6: ld   a,($9440)]
	                               	| [$11f9: and  a]
	jne	l_120c                             	| [$11fa: jr   nz,$120C]
	move.b	d2,d0                           	| [$11fc: ld   a,c]
	and.b	#0x0F,d0                         	| [$11fd: and  $0F]
	lea	nb_credits_9406(a6),a0             	| [$11ff: ld   hl,nb_credits_9406]
	CLEAR_XC_FLAGS
	move.b	(a0),d7
	abcd	d7,d0                          	| [$1202: add  a,(hl)] + daa
* add credit
	jcc	l_1209                             	| [$1205: jr   nc,$1209]
	move.b	#0x99,d0                      	| [$1207: ld   (hl),$99] [uncovered]
l_1209:
	move.b	d0,(a0)                         	| [$1204: ld   (hl),a]
	jbsr	l_135a                            	| [$1209: call $135A]
l_120c:
	move.b	l_9401(a6),d0                   	| [$120c: ld   a,($9401)]
	                               	| [$120f: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1210: ret  z] [...]
0:
	lea	l_9404(a6),a0                      	| [$1211: ld   hl,$9404]
	move.b	(a0),d0                         	| [$1214: ld   a,(hl)]
	                               	| [$1215: and  a]
	jne	l_121f                             	| [$1216: jr   nz,$121F]
	move.b	#0x30,(a0)                      	| [$1218: ld   (hl),$30]
	addq.b	#1,d0                           	| [$121a: inc  a]
	* sound?
	*move.b	d0,l_C182                       	| [$121b: ld   ($C182),a]
	rts                                    	| [$121e: ret]

l_121f:
	subq.b	#1,(a0)                         	| [$121f: dec  (hl)]
	jeq	l_12e6                             	| [$1220: jp   z,$12E6]
	move.b	(a0),d0                         	| [$1223: ld   a,(hl)]
	cmp.b	#0x18,d0                         	| [$1224: cp   $18]
	beq.b	0f                               	| [...]
	rts                                    	| [$1226: ret  nz] [...]
0:
	CLEAR_XC_FLAGS                         	| [$1227: xor  a]
	clr.b	d0                               	| [$1227: xor  a]
	* sound?
	*move.b	d0,l_C182                       	| [$1228: ld   ($C182),a]
	rts                                    	| [$122b: ret]

ship_materializing_122c:
	lea	ship_materializing_timer_943F(a6),a0                      	| [$122c: ld   hl,$943F]
	move.b	(a0),d0                         	| [$122f: ld   a,(hl)]
	                               	| [$1230: and  a]
	jeq	l_12a4                             	| [$1231: jr   z,$12A4] not active!
	cmp.b	#0x22,d0                         	| [$1233: cp   $22]
	jcc	l_1268                             	| [$1235: jr   nc,$1268]
	cmp.b	#0x02,d0                         	| [$1237: cp   $02]
	jeq	l_126b                             	| [$1239: jr   z,$126B]
	subq.b	#1,(a0)                         	| [$123b: dec  (hl)]
	jeq	l_12a6                             	| [$123c: jr   z,$12A6]
	lea	aux_objects_9300(a6),a2                      	| [$123e: ld   ix,$9300]
	lea	l_9900(a6),a3                      	| [$1242: ld   iy,$9900]
	move.b	#0x0B,d1                        	| [$1246: ld   b,$0B]
l_1248:
	movem.w	d1/d2,-(sp)                    	| [$1248: push bc]
	jbsr	l_4ec5                            	| [$1249: call $4EC5]
	move.b	#0x28,(0x01,a3)                 	| [$124c: ld   (iy+$01),$28]
	move.b	#0x08,(0x02,a3)                 	| [$1250: ld   (iy+$02),$08]
	move.w	#0x0004,d3                      	| [$1254: ld   de,$0004]
	add.w	d3,a3                            	| [$1257: add  iy,de]
	move.w	#0x0004*4,d3                      	| [$1254: ld   de,$0004]
	add.w	d3,a2                            	| [$1259: add  ix,de]
												| [$125b: add  ix,de]
												| [$125d: add  ix,de]
												| [$125f: add  ix,de]
	movem.w	(sp)+,d1/d2                    	| [$1261: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_1248                             	| [$1262: djnz $1248]
l_1264:
	move.b	#0x01,d0                        	| [$1264: ld   a,$01]
	                               	| [$1266: and  a]
	rts                                    	| [$1267: ret]

l_1268:
	subq.b	#1,(a0)                         	| [$1268: dec  (hl)]
	jra	l_1264                             	| [$1269: jr   $1264]

l_126b:
	subq.b	#1,(a0)                         	| [$126b: dec  (hl)]
* ROM checksum
*	LEA_ROM	0x5D50,a0                          	| [$126c: ld   hl,$5D50]
*	move.b	#0x40,d1                        	| [$126f: ld   b,$40]
*	sub.b	d0,d0                            	| [$1271: sub  a]
*l_1272:
*	move.b	(a0)+,d7
*	eor.b	d7,d0                            	| [$1272: xor  (hl)]
*	addq.w	#1,a0                           	| [$1273: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_1272                             	| [$1274: djnz $1272]
*	add.b	#0xE7,d0                         	| [$1276: add  a,$E7]
*	jne	l_1892                             	| [$1278: jp   nz,$1892]
	lea	sprite_shadow_ram_9800(a6),a3      	| [$127b: ld   iy,sprite_shadow_ram_9800]
	lea	level_playing_flag_9000(a6),a2                      	| [$127f: ld   ix,$9000]
	move.b	#0xFF,(0x00,a2)                 	| [$1283: ld   (ix+$00),$FF]
	lea	aux_objects_9300(a6),a0                      	| [$1287: ld   hl,$9300]
	move.w	#0x0010,d3                      	| [$128a: ld   de,$0010]
	clr.b	d0                               	| [$128d: xor  a]
	move.b	#0x0B,d1                        	| [$128e: ld   b,$0B]
l_1290:
	move.b	d0,(a0)                         	| [$1290: ld   (hl),a]
	add.w	d3,a0                            	| [$1291: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1290                             	| [$1292: djnz $1290]
	lea	l_9900(a6),a0                      	| [$1294: ld   hl,$9900]
	move.b	#0x2C,d1                        	| [$1297: ld   b,$2C]
l_1299:
	move.b	d0,(a0)+                         	| [$1299: ld   (hl),a]
	addq.w	#1,a0                           	| [$129a: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_1299                             	| [$129b: djnz $1299]
	move.b	d0,l_9476(a6)                   	| [$129d: ld   ($9476),a]
	move.b	d0,l_923E(a6)                   	| [$12a0: ld   ($923E),a]
	rts                                    	| [$12a3: ret]

l_12a4:
	CLEAR_XC_FLAGS                         	| [$12a4: xor  a]
	clr.b	d0                               	| [$12a4: xor  a]
	rts                                    	| [$12a5: ret]

l_12a6:
	CLEAR_XC_FLAGS                         	| [$12a6: xor  a]
	clr.b	d0                               	| [$12a6: xor  a]
	move.b	d0,update_sequence_control_flag_a7fd(a6)                      	| [$12a7: ld   ($A7FD),a]
	rts                                    	| [$12aa: ret]

l_12e6:
	lea	l_9401(a6),a0                      	| [$12e6: ld   hl,$9401]
	subq.b	#1,(a0)                         	| [$12e9: dec  (hl)]
	rts                                    	| [$12ea: ret]

l_12eb:
	move.b	l_9402(a6),d0                   	| [$12eb: ld   a,($9402)]
	                               	| [$12ee: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$12ef: ret  z] [...]
0:
	lea	l_9405(a6),a0                      	| [$12f0: ld   hl,$9405] [uncovered]
	move.b	(a0),d0                         	| [$12f3: ld   a,(hl)] [uncovered]
	                               	| [$12f4: and  a] [uncovered]
	jne	l_12fe                             	| [$12f5: jr   nz,$12FE] [uncovered]
	move.b	#0x30,(a0)                      	| [$12f7: ld   (hl),$30] [uncovered]
	addq.b	#1,d0                           	| [$12f9: inc  a] [uncovered]
	*move.b	d0,l_C183                       	| [$12fa: ld   ($C183),a] [uncovered]
	rts                                    	| [$12fd: ret] [uncovered]


l_12fe:
	subq.b	#1,(a0)                         	| [$12fe: dec  (hl)]
	jeq	l_130a                             	| [$12ff: jr   z,$130A]
	move.b	(a0),d0                         	| [$1301: ld   a,(hl)]
	cmp.b	#0x18,d0                         	| [$1302: cp   $18]
	beq.b	0f                               	| [...]
	rts                                    	| [$1304: ret  nz] [...]
0:
	clr.b	d0                               	| [$1305: xor  a]
	*move.b	d0,l_C183                       	| [$1306: ld   ($C183),a]
	rts                                    	| [$1309: ret]


l_130a:
	lea	l_9402(a6),a0                      	| [$130a: ld   hl,$9402]
	subq.b	#1,(a0)                         	| [$130d: dec  (hl)]
	rts                                    	| [$130e: ret]

l_130f:
	move.b	copy_of_dsw1_9431(a6),d0                   	| [$130f: ld   a,($9431)]
	and.b	#0x0F,d0                         	| [$1312: and  $0F]
	cmp.b	#0x0F,d0                         	| [$1314: cp   $0F]
	jne	l_131d                             	| [$1316: jr   nz,$131D]
	lea	l_9440(a6),a0                      	| [$1318: ld   hl,$9440] [uncovered]
	move.b	#0xFF,(a0)                      	| [$131b: ld   (hl),$FF] [uncovered]
l_131d:
	LEA_ROM	0x133E,a0                          	| [$131d: ld   hl,$133E]
	jbsr	fetch_a0_plus_d0_0008                            	| [$1320: rst  $08]
	move.b	d0,l_9449(a6)                   	| [$1321: ld   ($9449),a]
	move.b	copy_of_dsw1_9431(a6),d0                   	| [$1324: ld   a,($9431)]
	ror.b	#4,d0                            	| [$1327: rrca] * 4
	and.b	#0x0F,d0                         	| [$132b: and  $0F]
	cmp.b	#0x0F,d0                         	| [$132d: cp   $0F]
	jne	l_1336                             	| [$132f: jr   nz,$1336]
	lea	l_9440(a6),a0                      	| [$1331: ld   hl,$9440] [uncovered]
	move.b	#0xFF,(a0)                      	| [$1334: ld   (hl),$FF] [uncovered]
l_1336:
	LEA_ROM	0x133E,a0                          	| [$1336: ld   hl,$133E]
	jbsr	fetch_a0_plus_d0_0008                            	| [$1339: rst  $08]
	move.b	d0,l_944C(a6)                   	| [$133a: ld   ($944C),a]
	rts                                    	| [$133d: ret]

l_135a:
	move.b	#0x10,d2                        	| [$135a: ld   c,$10]
	lea	0x847F,a1                          	| [$135c: ld   de,$847F]
	lea	nb_credits_9406(a6),a0             	| [$135f: ld   hl,nb_credits_9406]
	jbsr	write_bcd_byte_to_screen_077f                            	| [$1362: call $077F]
	rts                                    	| [$1365: ret]

randomize_direction_1381:
	jbsr	exx                               	| [$1381: exx]
	lea	l_94BF(a6),a0                      	| [$1382: ld   hl,$94BF]
	lea	l_94C0(a6),a1                      	| [$1385: ld   de,$94C0]
	move.w	#0x0010,d1                      	| [$1388: ld   bc,$0010]
	jbsr	lddr                              	| [$138b: lddr]
	lea	l_94C0(a6),a0                      	| [$138d: ld   hl,$94C0]
	move.b	l_94B7(a6),d0                   	| [$1390: ld   a,($94B7)]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$1393: xor  (hl)]
	move.b	d0,l_94B0(a6)                   	| [$1394: ld   ($94B0),a]
	lea	general_fast_timer_9400(a6),a0                      	| [$1397: ld   hl,$9400]
	add.b	(a0),d0                          	| [$139a: add  a,(hl)]
	jbsr	exx                               	| [$139b: exx]
	rts                                    	| [$139c: ret]

l_139d:
	jbsr	l_4e92                            	| [$139d: call $4E92]
	jbsr	l_0ecb                            	| [$13a0: call $0ECB]
	jbsr	l_01d6                            	| [$13a3: call $01D6]
	jbsr	music_off_5c88                            	| [$13a6: call $5C88]
	jbsr	l_5dd4                            	| [$13a9: call $5DD4]
* another ROM checksum
*	LEA_ROM	0x4BC7,a0                          	| [$13ac: ld   hl,$4BC7]
*	CLEAR_XC_FLAGS                         	| [$13af: xor  a]
*	clr.b	d0                               	| [$13af: xor  a]
*	move.b	d0,d1                           	| [$13b0: ld   b,a]
*l_13b1:
*	add.b	(a0),d0                          	| [$13b1: add  a,(hl)]
*	addq.w	#1,a0                           	| [$13b2: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_13b1                             	| [$13b3: djnz $13B1]
*	sub.b	#0xC8,d0                         	| [$13b5: sub  $C8]
*	jne	l_0fab                             	| [$13b7: jp   nz,$0FAB]
	jra	next_game_state_080b                             	| [$13ba: jp   $080B]

l_13bd:
	move.b	#0xFB,d0                        	| [$13bd: ld   a,$FB]
	move.b	d0,stars_speed_943B(a6)                   	| [$13bf: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$13c2: call $3831]
	lea	distance_to_center_9465(a6),a0                      	| [$13c5: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$13c8: dec  (hl)]
	move.b	(a0),d0                         	| [$13c9: ld   a,(hl)]
	cmp.b	#0x3C,d0                         	| [$13ca: cp   $3C]
	jeq	l_5db0                             	| [$13cc: jp   z,$5DB0]
	tst.b	d0                               	| [$13cf: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$13d0: ret  nz] [...]
0:
l_13d1:
	move.b	current_player_9662(a6),d0                   	| [$13d1: ld   a,($9662)]
	                               	| [$13d4: and  a]
	lea	player_2_data_9640(a6),a0                      	| [$13d5: ld   hl,$9640]
	jeq	l_13dd                             	| [$13d8: jr   z,$13DD]
	lea	player_1_data_9620(a6),a0                      	| [$13da: ld   hl,$9620] [uncovered]
l_13dd:
	move.b	(a0),d0                         	| [$13dd: ld   a,(hl)]
	                               	| [$13de: and  a]
	jne	l_13e5                             	| [$13df: jp   nz,$13E5]
	jra	next_game_state_080b                             	| [$13e2: jp   $080B]


l_13e5:
	jbsr	l_01d6                            	| [$13e5: call $01D6] [uncovered]
	jbsr	disable_game_objects_0e43                            	| [$13e8: call $0E43]
	move.b	current_player_9662(a6),d0                   	| [$13eb: ld   a,($9662)]
	addq.b	#1,d0                           	| [$13ee: inc  a]
	and.b	#0x01,d0                         	| [$13ef: and  $01]
	move.b	d0,current_player_9662(a6)                   	| [$13f1: ld   ($9662),a]
	move.b	#0x5A,d0                        	| [$13f4: ld   a,$5A]
	move.b	d0,distance_to_center_9465(a6)                   	| [$13f6: ld   ($9465),a]
	READ_ROM_BYTE	0x24F4,d0                       	| [$13f9: ld   a,($24F4)]
	move.b	d0,sub_state_942C(a6)                   	| [$13fc: ld   ($942C),a]
	rts                                    	| [$13ff: ret]

l_1400:
	LEA_ROM	0x140C,a0                          	| [$1400: ld   hl,$140C]
	lea	l_94B0(a6),a1                      	| [$1403: ld   de,$94B0]
	move.w	#0x0011,d1                      	| [$1406: ld   bc,$0011]
	jbsr	ldir                              	| [$1409: ldir]
	rts                                    	| [$140b: ret]

init_default_hiscores_1428:
	LEA_ROM	0x4AF4,a0                          	| [$1428: ld   hl,$4AF4]
	lea	high_score_table_9488(a6),a1                      	| [$142b: ld   de,$9488]
	move.w	#0x0028,d1                      	| [$142e: ld   bc,$0028]
	jbsr	ldir                              	| [$1431: ldir]
	rts                                    	| [$1433: ret]

display_higscore_entries_145e:
	lea	high_score_table_9488(a6),a0                      	| [$143e: ld   hl,$9488]
	lea	0x8711,a1                          	| [$1441: ld   de,$8711]
	move.b	#0x01,d2                        	| [$1444: ld   c,$01]
	jbsr	display_higscore_entry_1476                            	| [$1446: call $1476]
	lea	l_9490(a6),a0                      	| [$1449: ld   hl,$9490]
	lea	0x8713,a1                          	| [$144c: ld   de,$8713]
	clr.b	d2                               	| [$144f: ld   c,$00]
	jbsr	display_higscore_entry_1476                            	| [$1451: call $1476]
	lea	l_9498(a6),a0                      	| [$1454: ld   hl,$9498]
	lea	0x8715,a1                          	| [$1457: ld   de,$8715]
	move.b	#0x0F,d2                        	| [$145a: ld   c,$0F]
	jbsr	display_higscore_entry_1476                            	| [$145c: call $1476]
	lea	l_94A0(a6),a0                      	| [$145f: ld   hl,$94A0]
	lea	0x8717,a1                          	| [$1462: ld   de,$8717]
	move.b	#0x0D,d2                        	| [$1465: ld   c,$0D]
	jbsr	display_higscore_entry_1476                            	| [$1467: call $1476]
	lea	l_94A8(a6),a0                      	| [$146a: ld   hl,$94A8]
	lea	0x8719,a1                          	| [$146d: ld   de,$8719]
	move.b	#0x0E,d2                        	| [$1470: ld   c,$0E]
	jbsr	display_higscore_entry_1476                            	| [$1472: call $1476]
	rts                                    	| [$1475: ret]

display_higscore_entry_1476:

	move.l	a0,-(sp)                        	| [$1476: push hl]
	move.b	(a0),d0                         	| [$1477: ld   a,(hl)]
	add.b	d0,d0                            	| [$1478: add  a,a]
	add.b	(a0),d0                          	| [$1479: add  a,(hl)]
	LEA_ROM	0x14CC,a0                          	| [$147a: ld   hl,$14CC]
	jbsr	fetch_a0_plus_d0_0008                            	| [$147d: rst  $08]
	jbsr	write_videoram_a1                         	| [$147e: ld   (de),a]
	BCLR_A1	10                           	| [$147f: res  2,d]
	move.b	d2,d0                           	| [$1481: ld   a,c]
	jbsr	write_videoram_a1                         	| [$1482: ld   (de),a]
	BSET_A1	10                           	| [$1483: set  2,d]
	addq.w	#1,a0                           	| [$1485: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$1486: rst  $20]
	move.b	(a0),d0                         	| [$1487: ld   a,(hl)]
	jbsr	write_videoram_a1                         	| [$1488: ld   (de),a]
	BCLR_A1	10                           	| [$1489: res  2,d]
	move.b	d2,d0                           	| [$148b: ld   a,c]
	jbsr	write_videoram_a1                         	| [$148c: ld   (de),a]
	BSET_A1	10                           	| [$148d: set  2,d]
	addq.w	#1,a0                           	| [$148f: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$1490: rst  $20]
	move.b	(a0),d0                         	| [$1491: ld   a,(hl)]
	jbsr	write_videoram_a1                         	| [$1492: ld   (de),a]
	BCLR_A1	10                           	| [$1493: res  2,d]
	move.b	d2,d0                           	| [$1495: ld   a,c]
	jbsr	write_videoram_a1                         	| [$1496: ld   (de),a]
	BSET_A1	10                           	| [$1497: set  2,d]
	sub.w	#0x80,a1						| [$1499: ld   hl,$FF80]
											| [$149c: add  hl,de]
											| [$149d: ex   de,hl]
	move.l	(sp)+,a0                        	| [$149e: pop  hl]
	addq.w	#3,a0                           	| [$149f: inc  hl] * 3
	jbsr	write_player_score_0771                            	| [$14a2: call $0771]
												| [$14a5: push hl] no need to save A0
	move.l	#-0x60,d5                       	| [$14a6: ld   hl,$FFA0]
	add.l	a1,d5                            	| [$14a9: add  hl,de]
	exg		d5,a1                              	| [$14aa: ex   de,hl]
												| [$14ab: pop  hl] no need to restore A0
	addq.w	#3,a0                           	| [$14ac: inc  hl] * 3
	move.b	(a0),d0                         	| [$14af: ld   a,(hl)]
	jbsr	write_videoram_a1                         	| [$14b0: ld   (de),a]
	BCLR_A1	10                           	| [$14b1: res  2,d]
	move.b	d2,d0                           	| [$14b3: ld   a,c]
	jbsr	write_videoram_a1                         	| [$14b4: ld   (de),a] attribute
	BSET_A1	10                           	| [$14b5: set  2,d]
	addq.w	#1,a0                           	| [$14b7: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$14b8: rst  $20]
	move.b	(a0),d0                         	| [$14b9: ld   a,(hl)]
	jbsr	write_videoram_a1                         	| [$14ba: ld   (de),a]
	BCLR_A1	10                           	| [$14bb: res  2,d]
	move.b	d2,d0                           	| [$14bd: ld   a,c]
	jbsr	write_videoram_a1                         	| [$14be: ld   (de),a] attribute
	BSET_A1	10                           	| [$14bf: set  2,d]
	addq.w	#1,a0                           	| [$14c1: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$14c2: rst  $20]
	move.b	(a0),d0                         	| [$14c3: ld   a,(hl)]
	jbsr	write_videoram_a1                         	| [$14c4: ld   (de),a]
	BCLR_A1	10                           	| [$14c5: res  2,d]
	move.b	d2,d0                           	| [$14c7: ld   a,c]
	jbsr	write_videoram_a1                         	| [$14c8: ld   (de),a] attribute
	BSET_A1	10                           	| [$14c9: set  2,d]
	rts                                    	| [$14cb: ret]

l_155f:
	move.w	#0x0100,d3                          	| [$155f: ld   de,$0100]
	jbsr	start_task_d3_0038                            	| [$1562: rst  $38]
	addq.b	#1,d3                           	| [$1563: inc  e]
	jbsr	start_task_d3_0038                            	| [$1564: rst  $38]
	move.b	#0x01,d3                        	| [$1565: ld   d,$01]
	move.b	#0x0F,d4                        	| [$1567: ld   e,$0F]
	move.b	bonus_life_40k_9443(a6),d0                   	| [$1569: ld   a,($9443)]
	                               	| [$156c: and  a]
	jeq	l_1571                             	| [$156d: jr   z,$1571]
	addq.b	#2,d4                           	| [$156f: inc  e] [uncovered]
l_1571:
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$1571: rst  $38]
	addq.b	#1,d3                           	| [$1572: inc  e]
	jbsr	start_task_d3_0038                            	| [$1573: rst  $38]
	move.b	#0x15,d3                        	| [$1574: ld   e,$15]
	jbsr	start_task_d3_0038                            	| [$1576: rst  $38]
	move.b	nb_credits_9406(a6),d0          	| [$1577: ld   a,(nb_credits_9406)]
	cmp.b	#0x02,d0                         	| [$157a: cp   $02]
	jcc	l_1596                             	| [$157c: jr   nc,$1596]
	move.b	#0x16,d3                        	| [$157e: ld   e,$16]
l_1580:
	jbsr	start_task_d3_0038                            	| [$1580: rst  $38]
*	LEA_ROM	0x24C1,a0                          	| [$1581: ld   hl,$24C1]
*	clr.b	d2                               	| [$1584: ld   c,$00]
*	move.b	sub_state_942C(a6),d0                   	| [$1586: ld   a,($942C)]
*l_1589:
*	sub.b	(a0)+,d0                          	| [$1589: sub  (hl)]
*												| [$158a: inc  hl]
*	subq.b	#1,d2                           	| [$158b: dec  c]
*	jne	l_1589                             	| [$158c: jr   nz,$1589]
*	eor.b	#0x1E,d0                         	| [$158e: xor  $1E]
*   result of 0x1C ^ 0x1E is 2
	move.b	#2,sub_state_942C(a6)                   	| [$1590: ld   ($942C),a]
	jra	next_game_state_080b                             	| [$1593: jp   $080B]

l_1596:
	move.b	#0x17,d3                        	| [$1596: ld   e,$17]
	jbsr	start_task_d3_0038                            	| [$1598: rst  $38]
	READ_ROM_BYTE	0x05E8,d0                       	| [$1599: ld   a,($05E8)]
	move.b	d0,sub_state_942C(a6)                   	| [$159c: ld   ($942C),a]
	rts                                    	| [$159f: ret]

allocate_high_score_entry_15a0:
	lea	high_score_table_9488+3(a6),a0                      	| [$15a0: ld   hl,$948B]
	move.b	#0x05,d1                        	| [$15a3: ld   b,$05]
	lea	player_1_score_9663+2(a6),a1                      	| [$15a9: ld   de,$9665]
	tst.b	current_player_9662(a6)                   	| [$15a5: ld   a,($9662)]
	                               	| [$15a8: and  a]
	jeq	l_15b1                             	| [$15ac: jr   z,$15B1]
	lea	player_2_score_9666+2(a6),a1                      	| [$15ae: ld   de,$9668]
l_15b1:

	move.l	a0,-(sp)                        	| [$15b1: push hl]
	move.l	a1,-(sp)                        	| [$15b2: push de]
	jbsr	compare_scores_1608                            	| [$15b3: call $1608]
	jcc	make_room_for_entry_15c1                 | [$15b6: jr   nc,$15C1]
	move.l	(sp)+,a1                        	| [$15b8: pop  de]
	move.l	(sp)+,a0                        	| [$15b9: pop  hl]
	move.b	#0x08,d0                        	| [$15ba: ld   a,$08]
	jbsr	fetch_a0_plus_d0_0008                            	| [$15bc: rst  $08]
	subq.b	#1,d1                           	| [...]
	jne	l_15b1                             	| [$15bd: djnz $15B1]
	SET_XC_FLAGS                           	| [$15bf: scf] [uncovered]
	rts                                    	| [$15c0: ret] [uncovered]

make_room_for_entry_15c1:
	subq.b	#1,d1                           	| [$15c1: dec  b]
	jeq	l_1603                             	| [$15c2: jr   z,$1603]	last entry: no need
	* shift as many entries below needed
	lea	l_94A7(a6),a0                      	| [$15c4: ld   hl,$94A7]
	lea	l_94AF(a6),a1                      	| [$15c7: ld   de,$94AF]
	move.b	d1,d0                           	| [$15ca: ld   a,b]
	add.b	d0,d0                            	| [$15cb: add  a,a]
	add.b	d0,d0                            	| [$15cc: add  a,a]
	add.b	d0,d0                            	| [$15cd: add  a,a]
	clr.w	d1                               	| [$15cf: ld   b,$00]
	move.b	d0,d1                           	| [$15ce: ld   c,a]
	jbsr	lddr                              	| [$15d1: lddr]
	exg	a1,a0                              	| [$15d3: ex   de,hl]
l_15d4:
	* clear score entry
	                           	| [$15d4: dec  hl]
	move.b	#0x83,-(a0)                      	| [$15d5: ld   (hl),$83]
	                           	| [$15d7: dec  hl]
	move.b	#0x83,-(a0)                      	| [$15d8: ld   (hl),$83]
	                           	| [$15da: dec  hl]
	move.b	#0x83,-(a0)                      	| [$15db: ld   (hl),$83]
	STORE_RAM_POINTER	a0,ram_pointer_9411(a6)        	| [$15dd: ld   ($9411),hl]
l_15e0:
	subq.w	#1,a0                           	| [$15e0: dec  hl]
	move.l	(sp)+,a1                        	| [$15e1: pop  de]
	move.w	#0x0003,d1                      	| [$15e2: ld   bc,$0003]
	exg	a1,a0                              	| [$15e5: ex   de,hl]
	jbsr	lddr                              	| [$15e6: lddr]
	move.b	(a1),d0                         	| [$15e8: ld   a,(de)]
	move.l	(sp)+,a0                        	| [$15e9: pop  hl]
	lea	0x8531,a0                          	| [$15ea: ld   hl,$8531] base score screen address (1ST place)
	add.b	d0,d0                            	| [$15ed: add  a,a]
	and.w	#0xFF,d0            | [$0008: add  a,l]
	add.w	d0,a0               | [$0009: ld   l,a]
	jbsr	read_videoram_a0                 	| [$15ee: rst  $08]
	STORE_VIDEO_POINTER	a0,video_address_9413(a6)        	| [$15ef: ld   ($9413),hl]
	lea	high_score_table_9488(a6),a0                      	| [$15f2: ld   hl,$9488]
	move.w	#0x0008,d3                      	| [$15f5: ld   de,$0008]
	move.b	#0x05,d1                        	| [$15f8: ld   b,$05]
	clr.b	d0                               	| [$15fa: xor  a]
l_15fb:
	move.b	d0,(a0)                         	| [$15fb: ld   (hl),a]
	add.w	d3,a0                            	| [$15fc: add  hl,de]
	addq.b	#1,d0                           	| [$15fd: inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_15fb                             	| [$15fe: djnz $15FB]
	SET_XC_FLAGS                           	| [$1600: scf]
	INVERT_XC_FLAGS                        	| [$1601: ccf]
	rts                                    	| [$1602: ret]

l_1603:
	lea	l_94AF(a6),a0                      	| [$1603: ld   hl,$94AF]
	jra	l_15d4                             	| [$1606: jr   $15D4]

compare_scores_1608:
	move.b	#0x03,d2                        	| [$1608: ld   c,$03]
l_160a:
	move.b	(a1),d0                         	| [$160a: ld   a,(de)]
	cmp.b	(a0),d0                          	| [$160b: cp   (hl)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$160c: ret  c] [...]
0:
	jne	l_1614                             	| [$160d: jr   nz,$1614]
	subq.w	#1,a1                           	| [$160f: dec  de]
	subq.w	#1,a0                           	| [$1610: dec  hl]
	subq.b	#1,d2                           	| [$1611: dec  c]
	jne	l_160a                             	| [$1612: jr   nz,$160A]
l_1614:
	SET_XC_FLAGS                           	| [$1614: scf]
	INVERT_XC_FLAGS                        	| [$1615: ccf]
	rts                                    	| [$1616: ret]

check_for_extra_life_1617:
	move.b	game_in_play_9669(a6),d0                   	| [$1617: ld   a,($9669)]
	                               	| [$161a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$161b: ret  z] [...]
0:
	move.b	bonus_life_40k_9443(a6),d0                   	| [$161c: ld   a,($9443)]
	LEA_ROM	0x1653,a0                          	| [$1621: ld   hl,$1653]
	and.b	#0x01,d0                         	| [$161f: and  $01]
	jeq	l_1629                             	| [$1624: jr   z,$1629]
	LEA_ROM	0x4BF3,a0                          	| [$1626: ld   hl,$4BF3] [uncovered]
l_1629:
	clr.w	d1                               	| [$162a: ld   b,$00]
	move.b	(a0)+,d1                         	| [$1629: ld   c,(hl)]
	                           	| [$162c: inc  hl]
	                               	| [$1630: and  a]
	move.b	l_9665(a6),d0                   	| [$1631: ld   a,($9665)]
	tst.b	current_player_9662(a6)                   	| [$162d: ld   a,($9662)]
	jeq	l_1639                             	| [$1634: jr   z,$1639]
	move.b	l_9668(a6),d0                   	| [$1636: ld   a,($9668)] [uncovered]
l_1639:
	jbsr	cpir                              	| [$1639: cpir]
	lea	l_9604(a6),a0                      	| [$163b: ld   hl,$9604]
	jne	l_1650                             	| [$163e: jr   nz,$1650]
	btst.b	#0,(a0)                         	| [$1640: bit  0,(hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1642: ret  nz] [...]
0:
	bset.b	#0,(a0)                         	| [$1643: set  0,(hl)]
	lea	lives_9600(a6),a0                  	| [$1645: ld   hl,lives_9600]
	move.b	(a0),d0                         	| [$1648: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$1649: inc  (hl)]
	move.b	#0x06,d3                        	| [$164a: ld   d,$06]
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$164c: rst  $38]
	jra	l_5da4                             	| [$164d: jp   $5DA4]

l_1650:
	bclr.b	#0,(a0)                         	| [$1650: res  0,(hl)]
	rts                                    	| [$1652: ret]

l_1686:
	lea	l_90EE(a6),a0                      	| [$1686: ld   hl,$90EE]
	move.b	(a0),d0                         	| [$1689: ld   a,(hl)]
	                               	| [$168a: and  a]
	jeq	l_16a7                             	| [$168b: jr   z,$16A7]
	subq.b	#1,(a0)                         	| [$168d: dec  (hl)]
	jne	l_16c8                             	| [$168e: jr   nz,$16C8]
	move.b	l_90DE(a6),d0                   	| [$1690: ld   a,($90DE)]
	move.b	d0,d1                           	| [$1693: ld   b,a]
	move.b	difficulty_9444(a6),d0                   	| [$1694: ld   a,($9444)]
	add.b	d0,d0                            	| [$1697: add  a,a]
	add.b	d0,d0                            	| [$1698: add  a,a]
	sub.b	#0x0C,d0                         	| [$1699: sub  $0C]
	neg.b	d0                               	| [$169b: neg]
	add.b	d1,d0                            	| [$169d: add  a,b]
	move.b	d0,l_937E(a6)                   	| [$169e: ld   ($937E),a]
	clr.b	d0                               	| [$16a1: xor  a]
	move.b	d0,l_939E(a6)                   	| [$16a2: ld   ($939E),a]
	jra	l_16c8                             	| [$16a5: jr   $16C8]

l_16a7:
	lea	l_937E(a6),a0                      	| [$16a7: ld   hl,$937E]
	move.b	(a0),d0                         	| [$16aa: ld   a,(hl)]
	                               	| [$16ab: and  a]
	jne	l_16c7                             	| [$16ac: jr   nz,$16C7]
	move.b	l_90AE(a6),d0                   	| [$16ae: ld   a,($90AE)]
	                               	| [$16b1: and  a]
	jeq	l_16c8                             	| [$16b2: jr   z,$16C8]
	move.b	d0,d1                           	| [$16b4: ld   b,a]
	move.b	difficulty_9444(a6),d0                   	| [$16b5: ld   a,($9444)]
	add.b	d0,d0                            	| [$16b8: add  a,a]
	add.b	d0,d0                            	| [$16b9: add  a,a]
	sub.b	#0x0C,d0                         	| [$16ba: sub  $0C]
	add.b	d1,d0                            	| [$16bc: add  a,b]
	move.b	d0,l_90EE(a6)                   	| [$16bd: ld   ($90EE),a]
	move.b	#0x01,d0                        	| [$16c0: ld   a,$01]
	move.b	d0,l_939E(a6)                   	| [$16c2: ld   ($939E),a]
	jra	l_16c8                             	| [$16c5: jr   $16C8]

l_16c7:
	subq.b	#1,(a0)                         	| [$16c7: dec  (hl)]
l_16c8:
	lea	l_90BE(a6),a0                      	| [$16c8: ld   hl,$90BE]
	move.b	(a0),d0                         	| [$16cb: ld   a,(hl)]
	                               	| [$16cc: and  a]
	jeq	l_16d0                             	| [$16cd: jr   z,$16D0]
	subq.b	#1,(a0)                         	| [$16cf: dec  (hl)]
l_16d0:
	lea	l_90FE(a6),a0                      	| [$16d0: ld   hl,$90FE]
	move.b	(a0),d0                         	| [$16d3: ld   a,(hl)]
	                               	| [$16d4: and  a]
	jeq	l_16d8                             	| [$16d5: jr   z,$16D8]
	subq.b	#1,(a0)                         	| [$16d7: dec  (hl)]
l_16d8:
	lea	l_906E(a6),a0                      	| [$16d8: ld   hl,$906E]
	move.b	(a0),d0                         	| [$16db: ld   a,(hl)]
	                               	| [$16dc: and  a]
	jeq	l_16e0                             	| [$16dd: jr   z,$16E0]
	subq.b	#1,(a0)                         	| [$16df: dec  (hl)]
l_16e0:
	lea	l_910E(a6),a0                      	| [$16e0: ld   hl,$910E]
	move.b	(a0),d0                         	| [$16e3: ld   a,(hl)]
	                               	| [$16e4: and  a]
	jeq	l_16e8                             	| [$16e5: jr   z,$16E8]
	subq.b	#1,(a0)                         	| [$16e7: dec  (hl)]
l_16e8:
	move.b	general_fast_timer_9400(a6),d0                   	| [$16e8: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$16eb: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$16ed: ret  z] [...]
0:
	lea	l_93AD(a6),a0                      	| [$16ee: ld   hl,$93AD]
	move.b	(a0),d0                         	| [$16f1: ld   a,(hl)]
	                               	| [$16f2: and  a]
	jeq	l_16f6                             	| [$16f3: jr   z,$16F6]
	subq.b	#1,(a0)                         	| [$16f5: dec  (hl)] [uncovered]
l_16f6:
	lea	unknown_active_flag_92ce(a6),a0                      	| [$16f6: ld   hl,$92CE]
	move.b	(a0),d0                         	| [$16f9: ld   a,(hl)]
	                               	| [$16fa: and  a]
	jeq	l_16fe                             	| [$16fb: jr   z,$16FE]
	subq.b	#1,(a0)                         	| [$16fd: dec  (hl)]
l_16fe:
	rts                                    	| [$16fe: ret]

write_number_16ff:
	move.b	d0,d1                           	| [$16ff: ld   b,a]
	ror.b	#4,d0                            	| [$1700: rrca] * 4
	and.b	#0x0F,d0                         	| [$1704: and  $0F]
	jeq	l_1711                             	| [$1706: jr   z,$1711]
l_1708:
	jbsr	l_1714                            	| [$1708: call $1714]
	                              	| [$170b: ex   de,hl]
	                       	| [$170c: ld   de,$FFE0]
	sub.w	#0x20,a1                            	| [$170f: add  hl,de]
	                              	| [$1710: ex   de,hl]
l_1711:
	move.b	d1,d0                           	| [$1711: ld   a,b]
	and.b	#0x0F,d0                         	| [$1712: and  $0F]
l_1714:
	LEA_ROM	0x3362,a0                          	| [$1714: ld   hl,$3362]
	jbsr	fetch_a0_plus_d0_0008                            	| [$1717: rst  $08]
	jbsr	write_videoram_a1                         	| [$1718: ld   (de),a]
	BCLR_A1	10                           	| [$1719: res  2,d]
	move.b	d2,d0                           	| [$171b: ld   a,c]
	jbsr	write_videoram_a1                         	| [$171c: ld   (de),a]
l_171d:
	BSET_A1	10                           	| [$171d: set  2,d]
	rts                                    	| [$171f: ret]

read_player_controls_1720:
*	lea	copy_of_inputs_2_9430(a6),a0                      	| [$1724: ld   hl,$9430]
*	move.b	is_screen_flipped_9407(a6),d0                   	| [$1720: ld   a,($9407)]
*	                               	| [$1723: and  a]
*	jne	l_172c                             	| [$1727: jr   nz,$172C]
	lea	copy_of_inputs_1_942F(a6),a0                      	| [$1729: ld   hl,$942F]
l_172c:
	move.b	(a0),d0                         	| [$172c: ld   a,(hl)]
	rts                                    	| [$172d: ret]

l_172e:
	lea	sprite_shadow_ram_9800(a6),a3      	| [$172e: ld   iy,sprite_shadow_ram_9800]
	lea	level_playing_flag_9000(a6),a2                      	| [$1732: ld   ix,$9000]
	move.b	#0x40,d1                        	| [$1736: ld   b,$40]
	move.b	is_screen_flipped_9407(a6),d0                   	| [$1738: ld   a,($9407)]
	                               	| [$173b: and  a]
	jeq	l_1740                             	| [$173c: jr   z,$1740]
	move.b	#0xC0,d1                        	| [$173e: ld   b,$C0] [uncovered]
l_1740:
	move.b	d1,(0x01,a2)                    	| [$1740: ld   (ix+$01),b]
	READ_ROM_BYTE	0x066D,d0                       	| [$1743: ld   a,($066D)]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$1746: ld   ($9000),a]
	lea	enemy_objects_9010(a6),a2                      	| [$1749: ld   ix,$9010]
	READ_ROM_BYTE	0x0688,d0                       	| [$174d: ld   a,($0688)]
	move.b	d0,d1                           	| [$1750: ld   b,a]
	move.b	#0x01,d0                        	| [$1751: ld   a,$01]
	move.w	#0x0010,d3                      	| [$1753: ld   de,$0010]
l_1756:
	move.b	d0,(0x0f,a2)                    	| [$1756: ld   (ix+$0f),a]
	addq.b	#1,d0                           	| [$1759: inc  a]
	add.w	d3,a2                            	| [$175a: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1756                             	| [$175c: djnz $1756]
	move.b	#0x32,d0                       	| [$175e: ld   a,($011B)]
	move.b	d0,ship_materializing_timer_943F(a6)         | [$1761: ld   ($943F),a]
	move.b	d0,update_sequence_control_flag_a7fd(a6)                    	| [$1764: ld   ($A7FD),a]
	move.b	game_in_play_9669(a6),d0                   	| [$1767: ld   a,($9669)]
	                               	| [$176a: and  a]
	jne	l_1790                             	| [$176b: jr   nz,$1790]
	READ_ROM_BYTE	0x0662,d0                       	| [$176d: ld   a,($0662)]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$1770: ld   ($9000),a]
	jbsr	l_191f                            	| [$1773: call $191F]
	move.b	l_9450(a6),d0                   	| [$1776: ld   a,($9450)]
	subq.b	#1,d0                           	| [$1779: dec  a]
	and.b	#0x03,d0                         	| [$177a: and  $03]
	LEA_ROM	0x17B7,a0                          	| [$177c: ld   hl,$17B7]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$177f: rst  $10]
	move.b	(a1),d0                         	| [$1780: ld   a,(de)]
	addq.b	#1,d0                           	| [$1781: inc  a]
	move.b	d0,l_9438(a6)                   	| [$1782: ld   ($9438),a]
	lea	l_9439(a6),a0                      	| [$1785: ld   hl,$9439]
	LOAD_D3D4_FROM_A1_ROM
	move.b	d4,(a0)+                         	| [$1788: ld   (hl),e]
											| [$1789: inc  l]
	move.b	d3,(a0)                         	| [$178a: ld   (hl),d]
	clr.b	d0                               	| [$178b: xor  a]
	move.b	d0,l_924E(a6)                   	| [$178c: ld   ($924E),a]
	rts                                    	| [$178f: ret]

l_1790:
	lea	aux_objects_9300(a6),a2                      	| [$1790: ld   ix,$9300]
	lea	l_9900(a6),a3                      	| [$1794: ld   iy,$9900]
	LEA_ROM	0x17FF,a0                          	| [$1798: ld   hl,$17FF]
	move.b	#0x0B,d1                        	| [$179b: ld   b,$0B]
	move.w	#0x0004,d3                      	| [$179d: ld   de,$0004]
l_17a0:
*	move.b	is_screen_flipped_9407(a6),d0                   	| [$17a0: ld   a,($9407)]
*	                               	| [$17a3: and  a]
*	jeq	l_17bf                             	| [$17a4: jr   z,$17BF]
*	move.b	(a0)+,d0                         	| [$17a6: ld   a,(hl)] [uncovered]
*	add.b	#0x0D,d0                         	| [$17a7: add  a,$0D] [uncovered]
*	not.b	d0                               	| [$17a9: cpl] [uncovered]
*	move.b	d0,(displayed_x_03,a3)                    	| [$17aa: ld   (iy+$03),a] [uncovered]
*												| [$17ad: inc  hl] [uncovered]
*	move.b	(a0),d0                         	| [$17ae: ld   a,(hl)] [uncovered]
*	addq.b	#0x07,d0                        	| [$17af: add  a,$07] [uncovered]
*	not.b	d0                               	| [$17b1: cpl] [uncovered]
*	move.b	d0,(displayed_y_00,a3)                    	| [$17b2: ld   (iy+$00),a] [uncovered]
*	jra	l_17c8                             	| [$17b5: jr   $17C8] [uncovered]

l_17bf:
	move.b	(a0)+,d0                         	| [$17bf: ld   a,(hl)]
										| [$17c0: inc  hl]
	move.b	d0,(displayed_x_03,a3)                    	| [$17c1: ld   (iy+$03),a]
	move.b	(a0),d0                         	| [$17c4: ld   a,(hl)]
	move.b	d0,(displayed_y_00,a3)                    	| [$17c5: ld   (iy+$00),a]
l_17c8:
	addq.w	#1,a0                           	| [$17c8: inc  hl]
	clr.b	(0x01,a3)                        	| [$17c9: ld   (iy+$01),$00]
	clr.b	(0x02,a3)                        	| [$17cd: ld   (iy+$02),$00]
	move.b	is_screen_flipped_9407(a6),d0                   	| [$17d1: ld   a,($9407)]
	ror.b	#1,d0                            	| [$17d4: rrca]
	and.b	#0x80,d0                         	| [$17d5: and  $80]
	add.b	(a0)+,d0                          	| [$17d7: add  a,(hl)]
												| [$17d8: inc  hl]
	move.b	d0,(0x01,a2)                    	| [$17d9: ld   (ix+$01),a]
	move.b	#0xFF,(0x00,a2)                 	| [$17dc: ld   (ix+$00),$FF]
	add.w	d3,a3                            	| [$17e0: add  iy,de]
	add.w	d3,a2                            	| [$17e2: add  ix,de]
	add.w	d3,a2                            	| [$17e4: add  ix,de]
	add.w	d3,a2                            	| [$17e6: add  ix,de]
	add.w	d3,a2                            	| [$17e8: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_17a0                             	| [$17ea: djnz $17A0]
	clr.b	(displayed_y_00,a3)                        	| [$17ec: ld   (iy+$00),$00]
	clr.b	(sprite_code_01,a3)                        	| [$17f0: ld   (iy+$01),$00]
	clr.b	(sprite_code_01,a3)                        	| [$17f4: ld   (iy+$02),$00]
	clr.b	(displayed_x_03,a3)                        	| [$17f8: ld   (iy+$03),$00]
	jra	l_5d3f                             	| [$17fc: jp   $5D3F]

l_182b:
	lea	l_9438(a6),a0                      	| [$182b: ld   hl,$9438]
	move.b	(a0),d0                         	| [$182e: ld   a,(hl)]
	move.b	d0,d1                           	| [$182f: ld   b,a]
	and.b	#0x3F,d0                         	| [$1830: and  $3F]
	jeq	l_183b                             	| [$1832: jr   z,$183B]
	subq.b	#1,d0                           	| [$1834: dec  a]
	jeq	l_183b                             	| [$1835: jr   z,$183B]
	subq.b	#1,d1                           	| [$1837: dec  b]
	move.b	d1,(a0)                         	| [$1838: ld   (hl),b]
	jra	l_184a                             	| [$1839: jr   $184A]

l_183b:
	addq.w	#1,a0                           	| [$183b: inc  hl]
	move.b	(a0)+,d4                         	| [$183c: ld   e,(hl)]
	                           	| [$183d: inc  hl]
	move.b	(a0),d3                         	| [$183e: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	addq.w	#1,d3                           	| [$183f: inc  de]
	LOAD_D3D4_FROM_D3_16
	move.b	d3,(a0)                         	| [$1840: ld   (hl),d]
	                           	| [$1841: dec  hl]
	move.b	d4,-(a0)                         	| [$1842: ld   (hl),e]
	LOAD_A1_FROM_D3D4_ROM
	exg	a1,a0                              	| [$1843: ex   de,hl]
	move.b	(a0),d0                         	| [$1844: ld   a,(hl)]
	                           	| [$1845: dec  de]
	addq.b	#1,d0                           	| [$1846: inc  a]
	move.b	d0,-(a1)                         	| [$1847: ld   (de),a]
	jra	l_182b                             	| [$1848: jr   $182B]

l_184a:
	move.b	d1,d0                           	| [$184a: ld   a,b]
	btst.b	#7,d0                           	| [$184b: bit  7,a]
	jne	move_ship_counter_clockwise_18cc                             	| [$184d: jp   nz,$18CC]
	btst.b	#6,d0                           	| [$1850: bit  6,a]
	jne	move_ship_clockwise_1898                             	| [$1852: jr   nz,$1898]
	jra	l_1910                             	| [$1854: jp   $1910]

move_player_ship_1857:
	lea	level_playing_flag_9000(a6),a2                      	| [$1857: ld   ix,$9000]
	lea	sprite_shadow_ram_9800(a6),a3      	| [$185b: ld   iy,sprite_shadow_ram_9800]
	move.b	(a2),d0                    	| [$185f: ld   a,(ix+$00)]
	                               	| [$1862: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1863: ret  z] [...]
0:
	addq.b	#1,d0                           	| [$1864: inc  a]
	jne	l_1a4b                             	| [$1865: jp   nz,$1A4B]
	move.b	game_in_play_9669(a6),d0                   	| [$1868: ld   a,($9669)]
	                               	| [$186b: and  a]
	jeq	l_182b                             	| [$186c: jp   z,$182B]
	jbsr	read_player_controls_1720                            	| [$186f: call $1720]
	and.b	#0x0F,d0                         	| [$1872: and  $0F]
	jeq	l_1910                             	| [$1874: jp   z,$1910]
	* non-zero inputs
	LEA_ROM	0x1D1F,a0                          	| [$1877: ld   hl,$1D1F]
	jbsr	fetch_a0_plus_d0_0008                            	| [$187a: rst  $08]
	move.b	d0,d1                           	| [$187b: ld   b,a]
*	move.b	is_screen_flipped_9407(a6),d0                   	| [$187c: ld   a,($9407)]
*	                               	| [$187f: and  a]
*	jeq	l_1886                             	| [$1880: jr   z,$1886]
*	move.b	d1,d0                           	| [$1882: ld   a,b] [uncovered]
*	add.b	#0x80,d0                         	| [$1883: add  a,$80] [uncovered]
*	move.b	d0,d1                           	| [$1885: ld   b,a] [uncovered]
*l_1886:
	move.b	(ship_angle_01,a2),d0                    	| [$1886: ld   a,(ix+$01)]
	sub.b	d1,d0                            	| [$1889: sub  b]
	jeq	l_1910                             	| [$188a: jp   z,$1910]
	addq.b	#0x02,d0                        	| [$188d: add  a,$02]
	cmp.b	#0x05,d0                         	| [$188f: cp   $05]
	jcs	l_1909                             	| [$1891: jp   c,$1909]
	cmp.b	#0x80,d0                         	| [$1894: cp   $80]
	jcc	move_ship_counter_clockwise_18cc                             	| [$1896: jr   nc,$18CC]
move_ship_clockwise_1898:
	move.b	l_943C(a6),d0                   	| [$1898: ld   a,($943C)]
	btst.b	#7,d0                           	| [$189b: bit  7,a]
	jne	l_18a1                             	| [$189d: jr   nz,$18A1]
	move.b	#0x7F,d0                        	| [$189f: ld   a,$7F]
l_18a1:
	addq.b	#1,d0                           	| [$18a1: inc  a]
	cmp.b	#0x90,d0                         	| [$18a2: cp   $90]
	jcs	l_18a9                             	| [$18a4: jr   c,$18A9]
	READ_ROM_BYTE	0x4B74,d0               | [$18a6: ld   a,($4B74)]
l_18a9:
	move.b	d0,l_943C(a6)                   	| [$18a9: ld   ($943C),a]
	and.b	#0x0F,d0                         	| [$18ac: and  $0F]
	LEA_ROM	0x19C7,a0                   		| [$18ae: ld   hl,$19C7]
	jbsr	load_word_in_d3_0010				| [$18b1: rst  $10]
	move.b	(ship_angle_01,a2),d5                    	| [$18b2: ld   h,(ix+$01)]
	move.b	(ship_fine_angle_05,a2),d6                    	| [$18b5: ld   l,(ix+$05)]
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$18b8: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(ship_angle_01,a2)                    	| [$18b9: ld   (ix+$01),h]
	move.b	d6,(ship_fine_angle_05,a2)                    	| [$18bc: ld   (ix+$05),l]
	move.b	d5,d0                           	| [$18bf: ld   a,h]
	sub.b	#0x40,d0                         	| [$18c0: sub  $40]
	move.b	d0,l_900D(a6)                   	| [$18c2: ld   ($900D),a]
	sub.b	#0x80,d0                         	| [$18c5: sub  $80]
	move.b	d0,l_900C(a6)                   	| [$18c7: ld   ($900C),a]
	jra	l_191f                             	| [$18ca: jr   $191F]

move_ship_counter_clockwise_18cc:
	* counter-clockwise rotation
	move.b	l_943C(a6),d0                   	| [$18cc: ld   a,($943C)]
	btst.b	#6,d0                           	| [$18cf: bit  6,a]
	jne	l_18d6                             	| [$18d1: jr   nz,$18D6]
	READ_ROM_BYTE	0x122D,d0                       	| [$18d3: ld   a,($122D)]
l_18d6:
	addq.b	#1,d0                           	| [$18d6: inc  a]
	cmp.b	#0x50,d0                         	| [$18d7: cp   $50]
	jcs	l_18de                             	| [$18d9: jr   c,$18DE]
	READ_ROM_BYTE	0x00B5,d0                       	| [$18db: ld   a,($00B5)]
l_18de:
	move.b	d0,l_943C(a6)                   	| [$18de: ld   ($943C),a]
	and.b	#0x0F,d0                         	| [$18e1: and  $0F]
	LEA_ROM	0x19F5,a0                          	| [$18e3: ld   hl,$19F5]
	jbsr	load_word_in_d3_0010               	| [$18e6: rst  $10]
	move.b	(ship_angle_01,a2),d5                    	| [$18e7: ld   h,(ix+$01)]
	move.b	(ship_fine_angle_05,a2),d6                    	| [$18ea: ld   l,(ix+$05)]
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$18ed: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(ship_angle_01,a2)                    	| [$18ee: ld   (ix+$01),h]
	move.b	d6,(ship_fine_angle_05,a2)                    	| [$18f1: ld   (ix+$05),l]
	move.b	d5,d0                           	| [$18f4: ld   a,h]
	add.b	#0x40,d0                         	| [$18f5: add  a,$40]
	move.b	d0,l_900D(a6)                   	| [$18f7: ld   ($900D),a]
	add.b	#0x80,d0                         	| [$18fa: add  a,$80]
	move.b	d0,l_900C(a6)                   	| [$18fc: ld   ($900C),a]
	jra	l_191f                             	| [$18ff: jr   $191F]

l_1901:
	clr.b	d0                               	| [$1901: ld   a,$00]
	*move.b	d0,l_C185                       	| [$1903: ld   ($C185),a] no flip screen cocktail mode
	jra	l_4faf                             	| [$1906: jp   $4FAF]

l_1909:
	move.b	d1,(ship_angle_01,a2)                    	| [$1909: ld   (ix+$01),b]
	clr.b	(ship_fine_angle_05,a2)                        	| [$190c: ld   (ix+$05),$00]
l_1910:
	move.b	player_ship_angle_9001(a6),d0                   	| [$1910: ld   a,($9001)]
	move.b	d0,l_900C(a6)                   	| [$1913: ld   ($900C),a]
	move.b	d0,l_900D(a6)                   	| [$1916: ld   ($900D),a]
	READ_ROM_BYTE	0x4105,d0                       	| [$1919: ld   a,($4105)]
	move.b	d0,l_943C(a6)                   	| [$191c: ld   ($943C),a]
l_191f:
	move.b	player_ship_angle_9001(a6),d0                   	| [$191f: ld   a,($9001)]
	add.b	#0x10,d0                         	| [$1922: add  a,$10]
	move.b	d0,l_9006(a6)                   	| [$1924: ld   ($9006),a]
	add.b	#0xE0,d0                         	| [$1927: add  a,$E0]
	move.b	d0,l_9007(a6)                   	| [$1929: ld   ($9007),a]
	add.b	#0x30,d0                         	| [$192c: add  a,$30]
	move.b	d0,l_9008(a6)                   	| [$192e: ld   ($9008),a]
	add.b	#0xC0,d0                         	| [$1931: add  a,$C0]
	move.b	d0,l_9009(a6)                   	| [$1933: ld   ($9009),a]
	add.b	#0x50,d0                         	| [$1936: add  a,$50]
	move.b	d0,l_900A(a6)                   	| [$1938: ld   ($900A),a]
	add.b	#0xA0,d0                         	| [$193b: add  a,$A0]
	move.b	d0,l_900B(a6)                   	| [$193d: ld   ($900B),a]
	move.b	(ship_angle_01,a2),d0                    	| [$1940: ld   a,(ix+$01)]
	jbsr	l_19a1                            	| [$1943: call $19A1]
	move.b	d0,(0x03,a2)                    	| [$1946: ld   (ix+$03),a]
	move.b	d1,d0                           	| [$1949: ld   a,b]
	sub.b	#0xC0,d0                         	| [$194a: sub  $C0]
	jbsr	l_19a1                            	| [$194c: call $19A1]
	move.b	d0,(0x02,a2)                    	| [$194f: ld   (ix+$02),a]
	move.b	(ship_angle_01,a2),d0                    	| [$1952: ld   a,(ix+$01)]
	addq.b	#0x04,d0                        	| [$1955: add  a,$04]
	move.b	d0,d2                           	| [$1957: ld   c,a]
	ror.b	#1,d0                            	| [$1958: rrca]
	and.b	#0x7C,d0                         	| [$1959: and  $7C]
	jbsr	l_1a15                            	| [$195b: call $1A15]
	move.b	d2,d0                           	| [$195e: ld   a,c]
	ror.b	#3,d0                            	| [$195f: rrca] * 3
	and.b	#0x1F,d0                         	| [$1962: and  $1F]
	move.b	d0,d2                           	| [$1964: ld   c,a]
	add.b	d0,d0                            	| [$1965: add  a,a]
	add.b	d0,d0                            	| [$1966: add  a,a]
	add.b	d2,d0                            	| [$1967: add  a,c]
	LEA_ROM	0x5EAD,a0                          	| [$1968: ld   hl,$5EAD]
	ADD_D0_TO_A0_0018                            	| [$196b: rst  $18]
	clr.b	d1                               	| [$196c: ld   b,$00]
	move.b	double_fire_930E(a6),d0         	| [$196e: ld   a,(double_fire_930E)]
	                               	| [$1971: and  a]
	jeq	l_1976                             	| [$1972: jr   z,$1976]
	move.b	#0x02,d1                        	| [$1974: ld   b,$02]
l_1976:
	move.b	general_fast_timer_9400(a6),d0                   	| [$1976: ld   a,($9400)]
	ror.b	#1,d0                            	| [$1979: rrca]
	and.b	#0x01,d0                         	| [$197a: and  $01]
	add.b	d1,d0                            	| [$197c: add  a,b]
	move.b	d0,d1                           	| [$197d: ld   b,a]
	move.b	(a0)+,d0                         	| [$197e: ld   a,(hl)]
	add.b	d1,d0                            	| [$197f: add  a,b]
	move.b	d0,(0x02,a3)                    	| [$1980: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$1983: ld   (iy+$06),a]
	move.b	d0,(0x0a,a3)                    	| [$1986: ld   (iy+$0a),a]
	move.b	d0,(0x0e,a3)                    	| [$1989: ld   (iy+$0e),a]
												| [$198c: inc  hl]
	move.b	(a0),d0                         	| [$198d: ld   a,(hl)]
l_198e:
	move.b	d0,(0x01,a3)                    	| [$198e: ld   (iy+$01),a]
	addq.w	#1,a0                           	| [$1991: inc  hl]
	move.b	(a0)+,d0                         	| [$1992: ld   a,(hl)]
	move.b	d0,(0x05,a3)                    	| [$1993: ld   (iy+$05),a]
	                           	| [$1996: inc  hl]
	move.b	(a0)+,d0                         	| [$1997: ld   a,(hl)]
	move.b	d0,(0x09,a3)                    	| [$1998: ld   (iy+$09),a]
	                           	| [$199b: inc  hl]
	move.b	(a0),d0                         	| [$199c: ld   a,(hl)]
	move.b	d0,(0x0d,a3)                    	| [$199d: ld   (iy+$0d),a]
	rts                                    	| [$19a0: ret]

l_19a1:
	move.b	d0,d1                           	| [$19a1: ld   b,a]
	and.b	#0x3F,d0                         	| [$19a2: and  $3F]
	jeq	l_19be                             	| [$19a4: jr   z,$19BE]
	btst.b	#6,d1                           	| [$19a6: bit  6,b]
	jeq	l_19ae                             	| [$19a8: jr   z,$19AE]
	move.b	d0,d2                           	| [$19aa: ld   c,a]
	move.b	#0x40,d0                        	| [$19ab: ld   a,$40]
	sub.b	d2,d0                            	| [$19ad: sub  c]
l_19ae:
	LEA_ROM	0x5DDA,a0                          	| [$19ae: ld   hl,$5DDA]
	jbsr	fetch_a0_plus_d0_0008                            	| [$19b1: rst  $08]
l_19b2:
	btst.b	#7,d1                           	| [$19b2: bit  7,b]
	jeq	l_19bb                             	| [$19b4: jr   z,$19BB]
	move.b	d0,d2                           	| [$19b6: ld   c,a]
	move.b	#0x80,d0                        	| [$19b7: ld   a,$80]
	sub.b	d2,d0                            	| [$19b9: sub  c]
	rts                                    	| [$19ba: ret]

l_19bb:
	add.b	#0x80,d0                         	| [$19bb: add  a,$80]
	rts                                    	| [$19bd: ret]

l_19be:
	move.b	#0x68,d0                        	| [$19be: ld   a,$68]
	btst.b	#6,d1                           	| [$19c0: bit  6,b]
	jne	l_19b2                             	| [$19c2: jr   nz,$19B2]
	clr.b	d0                               	| [$19c4: xor  a]
	jra	l_19b2                             	| [$19c5: jr   $19B2]



* for sprite structures (0x9800, 0xA000, 0x4040)
displayed_y_00 = 0x00
sprite_code_01 = 0x01
sprite_code_02 = 0x02
displayed_x_03 = 0x03

* < A2: object structure (9000: main ship)
* < A3: sprite shadow
l_1a15:
	LEA_ROM	0x5E2D,a0                          	| [$1a15: ld   hl,$5E2D]
	ADD_D0_TO_A0_0018                            	| [$1a18: rst  $18]
	move.b	(a0)+,d1                         	| [$1a19: ld   b,(hl)]
												| [$1a1a: inc  hl]
	move.b	(fine_x_02,a2),d3                    	| [$1a1b: ld   d,(ix+$02)]
	move.b	d3,d0                           	| [$1a1e: ld   a,d]
	add.b	d1,d0                            	| [$1a1f: add  a,b]
	move.b	d0,(displayed_x_03,a3)              | [$1a20: ld   (iy+$03),a]
	move.b	d0,(displayed_x_03+4,a3)                    	| [$1a23: ld   (iy+$07),a]
	move.b	(a0)+,d1                         	| [$1a26: ld   b,(hl)]
												| [$1a27: inc  hl]
	move.b	(fine_y_03,a2),d4                    	| [$1a28: ld   e,(ix+$03)]
	move.b	d4,d0                           	| [$1a2b: ld   a,e]
	add.b	d1,d0                            	| [$1a2c: add  a,b]
	move.b	d0,(displayed_y_00,a3)                    	| [$1a2d: ld   (iy+$00),a]
	add.b	#0x08,d0                         	| [$1a30: add  a,$08]
	move.b	d0,(displayed_y_00+4,a3)                    	| [$1a32: ld   (iy+$04),a]
	move.b	(a0)+,d1                         	| [$1a35: ld   b,(hl)]
	                           	| [$1a36: inc  hl]
	move.b	d3,d0                           	| [$1a37: ld   a,d]
	add.b	d1,d0                            	| [$1a38: add  a,b]
	move.b	d0,(0x0b,a3)                    	| [$1a39: ld   (iy+$0b),a]
	move.b	d0,(0x0f,a3)                    	| [$1a3c: ld   (iy+$0f),a]
	move.b	(a0),d1                         	| [$1a3f: ld   b,(hl)]
	move.b	d4,d0                           	| [$1a40: ld   a,e]
	add.b	d1,d0                            	| [$1a41: add  a,b]
	move.b	d0,(0x08,a3)                    	| [$1a42: ld   (iy+$08),a]
	add.b	#0x08,d0                         	| [$1a45: add  a,$08]
	move.b	d0,(0x0c,a3)                    	| [$1a47: ld   (iy+$0c),a]
	rts                                    	| [$1a4a: ret]

l_1a4b:
	move.b	(0x00,a2),d0                    	| [$1a4b: ld   a,(ix+$00)]
	cmp.b	#0xF0,d0                         	| [$1a4e: cp   $F0]
	jcs	l_1a64                             	| [$1a50: jr   c,$1A64]
	move.b	#0xB4,(0x00,a2)                 	| [$1a52: ld   (ix+$00),$B4]
	jbsr	l_5d6e                            	| [$1a56: call $5D6E]
	move.b	#0x12,d0                        	| [$1a59: ld   a,$12]
	move.b	d0,l_91BE(a6)                   	| [$1a5b: ld   ($91BE),a]
	st.b	d0                                	| [$1a5e: ld   a,$FF]
	move.b	d0,l_91CE(a6)                   	| [$1a60: ld   ($91CE),a]
	rts                                    	| [$1a63: ret]

l_1a64:
	lea	l_91BE(a6),a0                      	| [$1a64: ld   hl,$91BE]
	move.b	(a0),d0                         	| [$1a67: ld   a,(hl)]
	                               	| [$1a68: and  a]
	jeq	l_1a87                             	| [$1a69: jr   z,$1A87]
	subq.b	#1,(a0)                         	| [$1a6b: dec  (hl)]
	move.b	general_fast_timer_9400(a6),d0                   	| [$1a6c: ld   a,($9400)]
	ror.b	#2,d0                            	| [$1a6f: rrca] * 2
	and.b	#0x0F,d0                         	| [$1a71: and  $0F]
	move.b	d0,d1                           	| [$1a73: ld   b,a]
	move.b	(0x02,a3),d0                    	| [$1a74: ld   a,(iy+$02)]
	and.b	#0xC0,d0                         	| [$1a77: and  $C0]
	add.b	d1,d0                            	| [$1a79: add  a,b]
	move.b	d0,(0x02,a3)                    	| [$1a7a: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$1a7d: ld   (iy+$06),a]
	move.b	d0,(0x0a,a3)                    	| [$1a80: ld   (iy+$0a),a]
	move.b	d0,(0x0e,a3)                    	| [$1a83: ld   (iy+$0e),a]
	rts                                    	| [$1a86: ret]

l_1a87:
	lea	l_91CE(a6),a0                      	| [$1a87: ld   hl,$91CE]
	move.b	(a0),d0                         	| [$1a8a: ld   a,(hl)]
	                               	| [$1a8b: and  a]
	jeq	l_1b4d                             	| [$1a8c: jp   z,$1B4D]
	subq.b	#1,(a0)                         	| [$1a8f: dec  (hl)]
	cmp.b	#0xFF,d0                         	| [$1a90: cp   $FF]
	jeq	l_1aec                             	| [$1a92: jr   z,$1AEC]
	lea	l_9900(a6),a3                      	| [$1a94: ld   iy,$9900]
	lea	aux_objects_9300(a6),a2                      	| [$1a98: ld   ix,$9300]
											| [$1a9c: ld   de,$0004]
											| [$1a9f: ld   bc,$0010]
										    | [$1aa2: exx]
	move.b	#0x0E,d1                        	| [$1aa3: ld   b,$0E]
	LEA_ROM	0x1AE2,a0                          	| [$1aa5: ld   hl,$1AE2]
	move.b	l_91CE(a6),d0                   	| [$1aa8: ld   a,($91CE)]
	ror.b	#4,d0                            	| [$1aab: rrca] * 4
	and.b	#0x0F,d0                         	| [$1aaf: and  $0F]
	ADD_D0_TO_A0_0018                            	| [$1ab1: rst  $18]
	move.b	(a0),d2                         	| [$1ab2: ld   c,(hl)]
l_1ab3:
	move.b	(displayed_y_00,a3),d0                    	| [$1ab3: ld   a,(iy+$00)]
	cmp.b	#0x02,d0                         	| [$1ab6: cp   $02]
	jcs	l_1ad3                             	| [$1ab8: jr   c,$1AD3]
	move.b	(0x03,a3),d0                    	| [$1aba: ld   a,(iy+$03)]
	cmp.b	#0x02,d0                         	| [$1abd: cp   $02]
	jcs	l_1adc                             	| [$1abf: jr   c,$1ADC]
	movem.w	d1/d2,-(sp)                    	| [$1ac1: push bc]
	jbsr	l_4ebf                            	| [$1ac2: call $4EBF]
	move.b	general_fast_timer_9400(a6),d0                   	| [$1ac5: ld   a,($9400)]
	ror.b	#2,d0                            	| [$1ac8: rrca] * 2
	and.b	#0x0F,d0                         	| [$1aca: and  $0F]
	move.b	d0,(sprite_code_02,a3)             | [$1acc: ld   (iy+$02),a]
	movem.w	(sp)+,d1/d2                    	| [$1acf: pop  bc]
	move.b	d2,(sprite_code_01,a3)          | [$1ad0: ld   (iy+$01),c]
l_1ad3:
	* optim, add 4/1 directly
	                               	| [$1ad3: exx]
	addq.w	#4,a3                            	| [$1ad4: add  iy,de]
	add.w	#0x10,a2                            | [$1ad6: add  ix,bc]
	                               	| [$1ad8: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_1ab3                             	| [$1ad9: djnz $1AB3]
	rts                                    	| [$1adb: ret]

l_1adc:
	clr.b	(0x00,a3)                        	| [$1adc: ld   (iy+$00),$00]
	jra	l_1ad3                             	| [$1ae0: jr   $1AD3]

l_1aec:
	lea	l_9900(a6),a3                      	| [$1aec: ld   iy,$9900]
	lea	aux_objects_9300(a6),a2                      	| [$1af0: ld   ix,$9300]
										| [$1af4: ld   de,$0010]
										| [$1af7: ld   bc,$0004]
											| [$1afa: exx]
	move.b	player_ship_angle_9001(a6),d0                   	| [$1afb: ld   a,($9001)]
	add.b	#0x40,d0                         	| [$1afe: add  a,$40]
	move.b	d0,d2                           	| [$1b00: ld   c,a]
	move.b	#0x0E,d1                        	| [$1b01: ld   b,$0E]
	move.b	l_9003(a6),d0                   	| [$1b03: ld   a,($9003)]
	move.b	d0,d4                           	| [$1b06: ld   e,a]
	move.b	l_9002(a6),d0                   	| [$1b07: ld   a,($9002)]
	move.b	d0,d3                           	| [$1b0a: ld   d,a]
l_1b0b:
	move.b	d3,(0x03,a3)                    	| [$1b0b: ld   (iy+$03),d]
	move.b	d4,(0x00,a3)                    	| [$1b0e: ld   (iy+$00),e]
	move.b	d1,d0                           	| [$1b11: ld   a,b]
	add.b	d0,d0                            	| [$1b12: add  a,a]
	add.b	d0,d0                            	| [$1b13: add  a,a]
	add.b	d0,d0                            	| [$1b14: add  a,a]
	add.b	d0,d0                            	| [$1b15: add  a,a]
	add.b	#0xC0,d0                         	| [$1b16: add  a,$C0]
	add.b	d2,d0                            	| [$1b18: add  a,c]
	move.b	d0,(0x01,a2)                    	| [$1b19: ld   (ix+$01),a]
	move.b	#0x67,(0x01,a3)                 	| [$1b1c: ld   (iy+$01),$67]
	clr.b	(0x02,a3)                        	| [$1b20: ld   (iy+$02),$00]
	move.b	#0xFF,(0x00,a2)                 	| [$1b24: ld   (ix+$00),$FF]
	                               	| [$1b28: exx]
	add.w	#0x10,a2                            	| [$1b29: add  ix,de]
	addq.w	#4,a3                            	| [$1b2b: add  iy,bc]
										| [$1b2d: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_1b0b                             	| [$1b2e: djnz $1B0B]
	move.b	#0x50,d0                        	| [$1b30: ld   a,$50]
	move.b	d0,l_91CE(a6)                   	| [$1b32: ld   ($91CE),a]
	move.b	d0,update_sequence_control_flag_a7fd(a6)                       	| [$1b35: ld   ($A7FD),a]
	lea	sprite_shadow_ram_9800(a6),a3      	| [$1b38: ld   iy,sprite_shadow_ram_9800]
	clr.b	(0x03,a3)                        	| [$1b3c: ld   (iy+$03),$00]
	clr.b	(0x07,a3)                        	| [$1b40: ld   (iy+$07),$00]
	clr.b	(0x0b,a3)                        	| [$1b44: ld   (iy+$0b),$00]
	clr.b	(0x0f,a3)                        	| [$1b48: ld   (iy+$0f),$00]
	rts                                    	| [$1b4c: ret]

l_1b4d:
	clr.b	d0                               	| [$1b4d: xor  a]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$1b4e: ld   ($9000),a]
	clr.b	(0x03,a3)                        	| [$1b51: ld   (iy+$03),$00]
	clr.b	(0x07,a3)                        	| [$1b55: ld   (iy+$07),$00]
	clr.b	(0x0b,a3)                        	| [$1b59: ld   (iy+$0b),$00]
	clr.b	(0x0f,a3)                        	| [$1b5d: ld   (iy+$0f),$00]
	move.b	d0,aux_objects_9300(a6)                   	| [$1b61: ld   ($9300),a]
	move.b	d0,l_9310(a6)                   	| [$1b64: ld   ($9310),a]
	move.b	d0,l_9320(a6)                   	| [$1b67: ld   ($9320),a]
	lea	l_9900(a6),a0                      	| [$1b6a: ld   hl,$9900]
	lea	l_9901(a6),a1                      	| [$1b6d: ld   de,$9901]
	move.w	#0x0038,d1                      	| [$1b70: ld   bc,$0038]
	clr.b	(a0)                             	| [$1b73: ld   (hl),$00]
	jbsr	ldir                              	| [$1b75: ldir]
*  ROM checksum
*	LEA_ROM	0x0560,a0                          	| [$1b77: ld   hl,$0560]
*	clr.b	d0                               	| [$1b7a: xor  a]
*	move.b	d0,d1                           	| [$1b7b: ld   b,a]
*l_1b7c:
*	add.b	(a0)+,d0                          	| [$1b7c: add  a,(hl)]
*	                           	| [$1b7d: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_1b7c                             	| [$1b7e: djnz $1B7C]
*	add.b	#0x62,d0                         	| [$1b80: add  a,$62]
*	jne	l_cc0000                             	| [$1b82: jp   nz,$0000]
	rts                                    	| [$1b85: ret]

* used at start of the fade away sequence when player ends a level
fading_away_computation_start_1b86:
	lea	level_playing_flag_9000(a6),a2                      	| [$1b86: ld   ix,$9000]
	lea	sprite_shadow_ram_9800(a6),a3      	| [$1b8a: ld   iy,sprite_shadow_ram_9800]
	move.w	#0x8000,d5                          	| [$1b8e: ld   hl,$8000]
	move.b	(fine_x_02,a2),d3                    	| [$1b91: ld   d,(ix+$02)]
	clr.b	d4                               	| [$1b94: ld   e,$00]
	LOAD_D3_16_FROM_D3D4                        | [$1b96: and  a]
	sub.w	d3,d5                            	| [$1b97: sbc  hl,de]
	jbsr	shifting_on_d5d6_1bc3                            	| [$1b99: call $1BC3]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x06,a2)                    	| [$1b9c: ld   (ix+$06),h]
	move.b	d6,(0x07,a2)                    	| [$1b9f: ld   (ix+$07),l]
	move.w	#0x8000,d5                          	| [$1ba2: ld   hl,$8000]
	move.b	(fine_y_03,a2),d3                    	| [$1ba5: ld   d,(ix+$03)]
	clr.b	d4                               	| [$1ba8: ld   e,$00]
	LOAD_D3_16_FROM_D3D4                               	| [$1baa: and  a]
	sub.w	d3,d5                            	| [$1bab: sbc  hl,de]
	jbsr	shifting_on_d5d6_1bc3                            	| [$1bad: call $1BC3]
	LOAD_D5D6_FROM_D5_16			| doesn't change X, we're good
	move.b	d5,(0x08,a2)                    	| [$1bb0: ld   (ix+$08),h]
	move.b	d6,(0x09,a2)                    	| [$1bb3: ld   (ix+$09),l]
	clr.b	(0x0a,a2)                        	| [$1bb6: ld   (ix+$0a),$00]
	clr.b	(0x0b,a2)                        	| [$1bba: ld   (ix+$0b),$00]
	move.b	#0xFF,(0x0c,a2)                 	| [$1bbe: ld   (ix+$0c),$FF]
	rts                                    	| [$1bc2: ret]

* optimized to only 1 roxr and a multi-bit asr
* (not really important as it's only used to fade out player ship)

shifting_on_d5d6_1bc3:
	roxr.w	#1,d5                           	| [$1bc3: rr   h]
	                           	| [$1bc5: rr   l]
	asr.w	#6,d5                            	| [$1bc7: sra  h]
	                           	| [$1bc9: rr   l]
	                            	| [$1bcb: sra  h]
	                           	| [$1bcd: rr   l]
	                            	| [$1bcf: sra  h]
	                           	| [$1bd1: rr   l]
	                            	| [$1bd3: sra  h]
	                           	| [$1bd5: rr   l]
	                            	| [$1bd7: sra  h]
	                           	| [$1bd9: rr   l]
	                            	| [$1bdb: sra  h]
	                           	| [$1bdd: rr   l]
	rts                                    	| [$1bdf: ret]




update_player_ship_fading_away_1be0:
	lea	sprite_shadow_ram_9800(a6),a3      	| [$1be0: ld   iy,sprite_shadow_ram_9800]
	lea	level_playing_flag_9000(a6),a2                      	| [$1be4: ld   ix,$9000]
	move.b	(0x0c,a2),d1                    	| [$1be8: ld   b,(ix+$0c)]
	move.b	d1,d0                           	| [$1beb: ld   a,b]
	cmp.b	#0xEB,d0                         	| [$1bec: cp   $EB]
	jeq	l_1c32                             	| [$1bee: jp   z,$1C32]
	jcs	move_fading_away_ship_1c90                             	| [$1bf1: jp   c,$1C90]
	cmp.b	#0xF7,d0                         	| [$1bf4: cp   $F7]
	jeq	l_1c61                             	| [$1bf6: jp   z,$1C61]
l_1bf9:
	subq.b	#1,(0x0c,a2)                    	| [$1bf9: dec  (ix+$0c)]
	move.b	d1,d0                           	| [$1bfc: ld   a,b]
	move.b	(fine_x_02,a2),d5                    	| [$1bfd: ld   h,(ix+$02)]
	move.b	(0x0a,a2),d6                    	| [$1c00: ld   l,(ix+$0a)]
	move.b	(0x06,a2),d3                    	| [$1c03: ld   d,(ix+$06)]
	move.b	(0x07,a2),d4                    	| [$1c06: ld   e,(ix+$07)]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$1c09: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(fine_x_02,a2)                    	| [$1c0a: ld   (ix+$02),h]
	move.b	d6,(0x0a,a2)                    	| [$1c0d: ld   (ix+$0a),l]
	move.b	(fine_y_03,a2),d5                    	| [$1c10: ld   h,(ix+$03)]
	move.b	(0x0b,a2),d6                    	| [$1c13: ld   l,(ix+$0b)]
	move.b	(0x08,a2),d3                    	| [$1c16: ld   d,(ix+$08)]
	move.b	(0x09,a2),d4                    	| [$1c19: ld   e,(ix+$09)]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$1c1c: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(fine_y_03,a2)                    	| [$1c1d: ld   (ix+$03),h]
	move.b	d6,(0x0b,a2)                    	| [$1c20: ld   (ix+$0b),l]
	move.b	(ship_angle_01,a2),d0                    	| [$1c23: ld   a,(ix+$01)]
	addq.b	#0x04,d0                        	| [$1c26: add  a,$04]
	ror.b	#1,d0                            	| [$1c28: rrca]
	and.b	#0x7C,d0                         	| [$1c29: and  $7C]
	jbsr	l_1a15                            	| [$1c2b: call $1A15]
l_1c2e:
	st.b	d0                                	| [$1c2e: ld   a,$FF]
	tst.b	d0                               	| [$1c30: and  a]
	rts                                    	| [$1c31: ret]

l_1c32:
	subq.b	#1,(0x0c,a2)                    	| [$1c32: dec  (ix+$0c)]
	lea	enemy_objects_9010(a6),a2                      	| [$1c35: ld   ix,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$1c39: ld   iy,$9810]
	move.b	player_ship_angle_9001(a6),d0                   	| [$1c3d: ld   a,($9001)]
	move.b	d0,(displayed_x_03,a3)                    	| [$1c40: ld   (iy+$03),a]
	move.b	#0x36,(displayed_y_00,a3)                 	| [$1c43: ld   (iy+$00),$36]
	move.b	#0x40,(0x01,a2)                 	| [$1c47: ld   (ix+$01),$40]
	clr.b	d0                               	| [$1c4b: xor  a]
	move.b	d0,l_9803(a6)                   	| [$1c4c: ld   ($9803),a]
	move.b	d0,l_9807(a6)                   	| [$1c4f: ld   ($9807),a]
	move.b	d0,l_980B(a6)                   	| [$1c52: ld   ($980B),a]
	move.b	d0,l_980F(a6)                   	| [$1c55: ld   ($980F),a]
	jbsr	update_player_ship_fading_away_2f94                            	| [$1c58: call $2F94]
	jbsr	l_4ebf                            	| [$1c5b: call $4EBF]
	jra	l_1c2e                             	| [$1c5e: jp   $1C2E]

l_1c61:
	subq.b	#1,(0x0c,a2)                    	| [$1c61: dec  (ix+$0c)]
	move.b	(0x01,a2),d0                    	| [$1c64: ld   a,(ix+$01)]
	add.b	#0x08,d0                         	| [$1c67: add  a,$08]
	ror.b	#4,d0                            	| [$1c69: rrca] * 4
	and.b	#0x0F,d0                         	| [$1c6d: and  $0F]
	add.b	d0,d0                            	| [$1c6f: add  a,a]
	add.b	d0,d0                            	| [$1c70: add  a,a]
	LEA_ROM	0x5FC0,a0                          	| [$1c71: ld   hl,$5FC0]
	jbsr	fetch_a0_plus_d0_0008                            	| [$1c74: rst  $08]
	jbsr	l_198e                            	| [$1c75: call $198E]
	move.b	(0x02,a3),d0                    	| [$1c78: ld   a,(iy+$02)]
	bset.b	#5,d0                           	| [$1c7b: set  5,a]
	and.b	#0xF0,d0                         	| [$1c7d: and  $F0]
	add.b	#0x09,d0                         	| [$1c7f: add  a,$09]
	move.b	d0,(0x02,a3)                    	| [$1c81: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$1c84: ld   (iy+$06),a]
	move.b	d0,(0x0a,a3)                    	| [$1c87: ld   (iy+$0a),a]
	move.b	d0,(0x0e,a3)                    	| [$1c8a: ld   (iy+$0e),a]
	jra	l_1bf9                             	| [$1c8d: jp   $1BF9]

move_fading_away_ship_1c90:
	* game is using enemy slot #1 to display fading ship
	lea	sprite_shadow_ram_9800+0x10(a6),a3          	| [$1c90: ld   iy,$9810]
	lea	enemy_objects_9010(a6),a2                      	| [$1c94: ld   ix,$9010]
	move.b	#0x02,d1                        	| [$1c98: ld   b,$02]
	move.b	sub_state_942C(a6),d0                   	| [$1c9a: ld   a,($942C)]
	btst.b	#4,d0                           	| [$1c9d: bit  4,a]
	jeq	l_1ca3                             	| [$1c9f: jr   z,$1CA3]
	move.b	#0x30,d1                        	| [$1ca1: ld   b,$30]
l_1ca3:
	move.b	(displayed_y_00,a3),d0                    	| [$1ca3: ld   a,(iy+$00)]
	cmp.b	d1,d0                            	| [$1ca6: cp   b]
	jcs	l_1d1a                             	| [$1ca7: jp   c,$1D1A]
	move.w	#0x00C0,d3                          	| [$1caa: ld   de,$00C0]
	move.b	sub_state_942C(a6),d0                   	| [$1cad: ld   a,($942C)]
	btst.b	#4,d0                           	| [$1cb0: bit  4,a]
	jeq	l_1cb7                             	| [$1cb2: jr   z,$1CB7]
	move.w	#0x0180,d3                          	| [$1cb4: ld   de,$0180]
l_1cb7:
	move.b	(displayed_y_00,a3),d5                    	| [$1cb7: ld   h,(iy+$00)]
	move.b	(fine_y_03,a2),d6                    	| [$1cba: ld   l,(ix+$03)]
	LOAD_D5_16_FROM_D5D6
	* this makes the ship zoom away after it has migrated from
	* untransformed coordinates to transformed ones
	add.w	d3,d5                            	| [$1cbd: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_y_00,a3)                    	| [$1cbe: ld   (iy+$00),h]
	move.b	d6,(fine_y_03,a2)                    	| [$1cc1: ld   (ix+$03),l]
	jbsr	read_player_controls_1720                            	| [$1cc4: call $1720]
	and.b	#0x0F,d0                         	| [$1cc7: and  $0F]
	jeq	l_1d14                             	| [$1cc9: jr   z,$1D14]
	move.b	#0x80,d1                        	| [$1ccb: ld   b,$80]
	LEA_ROM	0x1D1F,a0                          	| [$1ccd: ld   hl,$1D1F]
	jbsr	fetch_a0_plus_d0_0008                            	| [$1cd0: rst  $08]
	move.b	d0,d1                           	| [$1cd1: ld   b,a]
	* remove cocktail mode					| [$1cd2: ld   a,($9407)]
								| [$1cd5: and  a]
							| [$1cd6: jr   z,$1CDD]
							| [$1cd8: ld   a,($006D)] [uncovered]
							| [$1cdb: add  a,b] [uncovered]
							| [$1cdc: ld   b,a] [uncovered]
l_1cdd:
	move.b	(displayed_x_03,a3),d0                    	| [$1cdd: ld   a,(iy+$03)]
	sub.b	d1,d0                            	| [$1ce0: sub  b]
	jeq	l_1d14                             	| [$1ce1: jr   z,$1D14]
	addq.b	#0x02,d0                        	| [$1ce3: add  a,$02]
	cmp.b	#0x05,d0                         	| [$1ce5: cp   $05]
	jcs	l_1d11                             	| [$1ce7: jr   c,$1D11]
	cmp.b	#0x80,d0                         	| [$1ce9: cp   $80]
	jcc	l_1cff                             	| [$1ceb: jr   nc,$1CFF]
	move.b	(displayed_x_03,a3),d5                    	| [$1ced: ld   h,(iy+$03)] [uncovered]
	move.b	(fine_x_02,a2),d6                    	| [$1cf0: ld   l,(ix+$02)] [uncovered]
	move.w	#-0xe0,d1                       	| [$1cf3: ld   bc,$FF20] [uncovered]
	LOAD_D5_16_FROM_D5D6
	add.w	d1,d5                            	| [$1cf6: add  hl,bc] [uncovered]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_x_03,a3)                    	| [$1cf7: ld   (iy+$03),h] [uncovered]
	move.b	d6,(fine_x_02,a2)                    	| [$1cfa: ld   (ix+$02),l] [uncovered]
	jra	l_1d14                             	| [$1cfd: jr   $1D14] [uncovered]

l_1cff:
	move.b	(displayed_x_03,a3),d5                    	| [$1cff: ld   h,(iy+$03)]
	move.b	(fine_x_02,a2),d6                    	| [$1d02: ld   l,(ix+$02)]
	LOAD_D5_16_FROM_D5D6
	move.w	#0x00E0,d1                          	| [$1d05: ld   bc,$00E0]
	add.w	d1,d5                            	| [$1d08: add  hl,bc]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_x_03,a3)                    	| [$1d09: ld   (iy+$03),h]
	move.b	d6,(fine_x_02,a2)                    	| [$1d0c: ld   (ix+$02),l]
	jra	l_1d14                             	| [$1d0f: jr   $1D14]

l_1d11:
	move.b	d1,(displayed_x_03,a3)                    	| [$1d11: ld   (iy+$03),b]
l_1d14:
	jbsr	update_player_ship_fading_away_2f94                            	| [$1d14: call $2F94]
	jra	l_1c2e                             	| [$1d17: jp   $1C2E]

l_1d1a:
	clr.b	d0                               	| [$1d1a: xor  a]
	move.b	d0,sprite_shadow_ram_9800+0x10(a6)                   	| [$1d1b: ld   ($9810),a]
	rts                                    	| [$1d1e: ret]

* shoots & update shots
update_player_shots_1f30:
	move.b	update_sequence_control_flag_a7fd(a6),d0                       	| [$1f30: ld   a,($A7FD)]
	                               	| [$1f33: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1f34: ret  nz] [...]
0:
	move.b	game_in_play_9669(a6),d0                   	| [$1f35: ld   a,($9669)]
	                               	| [$1f38: and  a]
	jeq	l_1fc2                             	| [$1f39: jp   z,$1FC2]
	jbsr	read_player_controls_1720                            	| [$1f3c: call $1720]
	CLEAR_XC_FLAGS
	roxl.b	#4,d0                            	| [$1f3f: rlca] * 4
	lea	l_90CE(a6),a0                      	| [$1f43: ld   hl,$90CE]
	ROXL_A0                         	| [$1f46: rl   (hl)]
	move.b	(a0),d0                         	| [$1f48: ld   a,(hl)]
	and.b	#0x03,d0                         	| [$1f49: and  $03]
	cmp.b	#0x01,d0                         	| [$1f4b: cp   $01]
	jeq	l_1f5c                             	| [$1f4d: jp   z,$1F5C]
	cmp.b	#0x03,d0                         	| [$1f50: cp   $03]
	jra	l_204a                             	| [$1f52: jp   $204A]

l_1f5c:
	move.b	level_playing_flag_9000(a6),d0                   	| [$1f5c: ld   a,($9000)]
	addq.b	#1,d0                           	| [$1f5f: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1f60: ret  nz] [...]
0:
	lea	l_936E(a6),a0                      	| [$1f61: ld   hl,$936E]
	move.b	#0x10,(a0)                      	| [$1f64: ld   (hl),$10]
	lea	aux_objects_9300(a6),a2                      	| [$1f66: ld   ix,$9300]
	lea	l_9900(a6),a3                      	| [$1f6a: ld   iy,$9900]
											| [$1f6e: ld   de,$0010]
												| [$1f71: exx]
											| [$1f72: ld   de,$0008]
												| [$1f75: exx]
	move.b	double_fire_930E(a6),d0         	| [$1f76: ld   a,(double_fire_930E)]
	                               	| [$1f79: and  a]
	jne	l_2008                             	| [$1f7a: jp   nz,$2008]
	READ_ROM_BYTE	0x24F5,d0                       	| [$1f7d: ld   a,($24F5)]
	move.b	#0x03,d1                        	| [$1f80: ld   b,$03]
l_1f82:
	move.b	(0x00,a2),d0                    	| [$1f82: ld   a,(ix+$00)]
	                               	| [$1f85: and  a]
	jne	l_1fa4                             	| [$1f86: jr   nz,$1FA4]
	move.b	#0x28,(displayed_y_00,a3)                 	| [$1f88: ld   (iy+$00),$28]
	move.b	player_ship_angle_9001(a6),d0                   	| [$1f8c: ld   a,($9001)]
	move.b	d0,(displayed_x_03,a3)                    	| [$1f8f: ld   (iy+$03),a]
	move.b	#0x08,(sprite_code_02,a3)                 	| [$1f92: ld   (iy+$02),$08]
	move.b	#0x5B,(sprite_code_01,a3)                 	| [$1f96: ld   (iy+$01),$5B]
	st.b	(0x00,a2)                 	| [$1f9a: ld   (ix+$00),$FF]
	jbsr	l_5c8e                            	| [$1f9e: call $5C8E]
	jra	l_204a                             	| [$1fa1: jp   $204A]

l_1fa4:
	add.w	#0x10,a2                            	| [$1fa4: add  ix,de]
	                               	| [$1fa6: exx]
	addq.w	#8,a3                            	| [$1fa7: add  iy,de]
	                               	| [$1fa9: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_1f82                             	| [$1faa: djnz $1F82]
	jra	l_204a                             	| [$1fac: jp   $204A]


l_1faf:
	LEA_ROM	0x40A6,a0                          	| [$1faf: ld   hl,$40A6]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$1fb2: rst  $10]
	exg	a1,a0                              	| [$1fb3: ex   de,hl]
	move.b	(a0)+,d4                         	| [$1fb4: ld   e,(hl)]
	                           	| [$1fb5: inc  hl]
	move.b	(a0),d3                         	| [$1fb6: ld   d,(hl)]
	addq.w	#2,a0                           	| [$1fb7: inc  hl] * 2
l_1fb9:
	move.b	(a0),d0                         	| [$1fb9: ld   a,(hl)]
	cmp.b	#0x9E,d0                         	| [$1fba: cp   $9E]
	bne.b	0f                               	| [...]
	rts                                    	| [$1fbc: ret  z] [...]
0:
	LOAD_A1_FROM_D3D4_RAM
	BREAKPOINT	"check A1 is videoram 1FBD ?"
	move.b	d0,(a1)                         	| [$1fbd: ld   (de),a]
	addq.w	#1,a0                           	| [$1fbe: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$1fbf: rst  $20]
	jra	l_1fb9                             	| [$1fc0: jr   $1FB9]


l_1fc2:
	lea	l_929E(a6),a0                      	| [$1fc2: ld   hl,$929E]
	subq.b	#1,(a0)                         	| [$1fc5: dec  (hl)]
	jne	l_204a                             	| [$1fc6: jp   nz,$204A]
	move.b	#0x06,(a0)                      	| [$1fc9: ld   (hl),$06]
	jra	l_1f5c                             	| [$1fcb: jp   $1F5C]

l_1fce:
	jbsr	l_22f3                            	| [$1fce: call $22F3]
	move.b	#0xFB,d0                        	| [$1fd1: ld   a,$FB]
	move.b	d0,stars_speed_943B(a6)                   	| [$1fd3: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$1fd6: call $3831]
	move.b	current_player_9662(a6),d0                   	| [$1fd9: ld   a,($9662)]
	                               	| [$1fdc: and  a]
	lea	player_1_data_9620(a6),a0                      	| [$1fdd: ld   hl,$9620]
	jeq	l_1fe5                             	| [$1fe0: jr   z,$1FE5]
	lea	player_2_data_9640(a6),a0                      	| [$1fe2: ld   hl,$9640] [uncovered]
l_1fe5:
	lea	lives_9600(a6),a1                  	| [$1fe5: ld   de,lives_9600]
	move.w	#0x0020,d1                      	| [$1fe8: ld   bc,$0020]
	jbsr	ldir                              	| [$1feb: ldir]
	move.b	start_level,d0
	jeq		0f
	move.b	d0,current_stage_960B(a6)
	move.b	d0,current_stage_number_9609(a6)
0:
	jbsr	l_172e                            	| [$1fed: call $172E]
	jbsr	randomize_18_star_positions_3af2                            	| [$1ff0: call $3AF2]
	* another ROM checksum that changes sub state if fails
*	LEA_ROM	0x1556,a0                          	| [$1ff3: ld   hl,$1556]
*	move.b	#0x80,d2                        	| [$1ff6: ld   c,$80]
*	move.b	global_state_942B(a6),d0                   	| [$1ff8: ld   a,($942B)]
*l_1ffb:
*	add.b	(a0)+,d0                          	| [$1ffb: add  a,(hl)]
*	                          	| [$1ffc: inc  hl]
*	subq.b	#1,d2                           	| [$1ffd: dec  c]
*	jne	l_1ffb                             	| [$1ffe: jr   nz,$1FFB]
*	add.b	#0x94,d0                         	| [$2000: add  a,$94]
*	move.b	d0,sub_state_942C(a6)                   	| [$2002: ld   ($942C),a]
	jra	next_game_state_080b                             	| [$2005: jp   $080B]

l_2008:
	READ_ROM_BYTE	0x3504,d0                       	| [$2008: ld   a,($3504)]
	move.b	d0,d1                           	| [$200b: ld   b,a]
l_200c:
	move.b	(0x00,a2),d0                    	| [$200c: ld   a,(ix+$00)]
	                               	| [$200f: and  a]
	jne	l_2042                             	| [$2010: jr   nz,$2042]
	move.b	#0x28,(0x00,a3)                 	| [$2012: ld   (iy+$00),$28]
	move.b	#0x28,(0x04,a3)                 	| [$2016: ld   (iy+$04),$28]
	move.b	player_ship_angle_9001(a6),d0                   	| [$201a: ld   a,($9001)]
	subq.b	#0x03,d0                        	| [$201d: sub  $03]
	move.b	d0,(0x03,a3)                    	| [$201f: ld   (iy+$03),a]
	addq.b	#0x06,d0                        	| [$2022: add  a,$06]
	move.b	d0,(0x07,a3)                    	| [$2024: ld   (iy+$07),a]
	addq.b	#0x02,d0                        	| [$2027: add  a,$02]
	move.b	#0x08,(0x02,a3)                 	| [$2029: ld   (iy+$02),$08]
	move.b	#0x08,(0x06,a3)                 	| [$202d: ld   (iy+$06),$08]
	move.b	#0x5B,(0x01,a3)                 	| [$2031: ld   (iy+$01),$5B]
	move.b	#0x5B,(0x05,a3)                 	| [$2035: ld   (iy+$05),$5B]
	move.b	#0xFE,(0x00,a2)                 	| [$2039: ld   (ix+$00),$FE]
	jbsr	l_5c94                            	| [$203d: call $5C94]
	jra	l_204a                             	| [$2040: jr   $204A]

l_2042:
	add.w	#0x10,a2                            	| [$2042: add  ix,de]
	                               	| [$2044: exx]
	addq.w	#8,a3                            	| [$2045: add  iy,de]
													| [$2047: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_200c                             	| [$2048: djnz $200C]
l_204a:
	lea	aux_objects_9300(a6),a2                      	| [$204a: ld   ix,$9300]
	lea	l_9900(a6),a3                      	| [$204e: ld   iy,$9900]
										| [$2052: ld   de,$0008]
										| [$2055: exx]
	move.b	#0x03,d1                        	| [$2056: ld   b,$03]
	                      	| [$2058: ld   de,$0010]
l_205b:
	movem.w	d1/d2,-(sp)                    	| [$205b: push bc]
	movem.w	d3/d4,-(sp)                    	| [$205c: push de]
	move.b	(0x00,a2),d0                    	| [$205d: ld   a,(ix+$00)]
	                               	| [$2060: and  a]
	jeq	l_20c7                             	| [$2061: jr   z,$20C7]
	addq.b	#1,d0                           	| [$2063: inc  a]
	jeq	l_20f1                             	| [$2064: jp   z,$20F1]
	addq.b	#1,d0                           	| [$2067: inc  a]
	jeq	l_2119                             	| [$2068: jp   z,$2119]
	move.b	#0x01,d0                        	| [$206b: ld   a,$01]
	move.b	d0,l_936E(a6)                   	| [$206d: ld   ($936E),a]
	jra	l_2170                             	| [$2070: jp   $2170]

l_20be:
	* set default highscore to 10000
	                       	| [$20be: ld   a,($0117)]
	move.b	#1,highscore_last_digit_940D(a6)                   	| [$20c1: ld   ($940D),a]

	* now is a good time to load the saved highscores & highscore
	jbsr	osd_read_high_scores

	jra	l_4e45                             	| [$20c4: jp   $4E45]

l_20c7:
	movem.w	(sp)+,d3/d4                    	| [$20c7: pop  de]
	add.w	#0x10,a2                            	| [$20c8: add  ix,de]
	                               	| [$20ca: exx]
	addq.w	#8,a3                            	| [$20cb: add  iy,de]
	                               	| [$20cd: exx]
	movem.w	(sp)+,d1/d2                    	| [$20ce: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_205b                             	| [$20cf: djnz $205B]
	rts                                    	| [$20d1: ret]

l_20f1:
	move.b	(0x03,a3),d0                    	| [$20f1: ld   a,(iy+$03)]
	add.b	#0x80,d0                         	| [$20f4: add  a,$80]
	move.b	d0,(0x03,a3)                    	| [$20f6: ld   (iy+$03),a]
	jbsr	l_2d1a                            	| [$20f9: call $2D1A]
	* useless add of zero...
	*jeq	l_2106                             	| [$20fc: jr   z,$2106]
	*move.b	(0x02,a3),d0                    	| [$20fe: ld   a,(iy+$02)]
	*addq.b	#0x00,d0                        	| [$2101: add  a,$00]
	*move.b	d0,(0x02,a3)                    	| [$2103: ld   (iy+$02),a]
l_2106:
	move.b	(0x03,a3),d0                    	| [$2106: ld   a,(iy+$03)]
	add.b	#0x80,d0                         	| [$2109: add  a,$80]
	move.b	d0,(0x03,a3)                    	| [$210b: ld   (iy+$03),a]
	move.b	(0x00,a3),d0                    	| [$210e: ld   a,(iy+$00)]
	addq.b	#0x05,d0                        	| [$2111: add  a,$05]
	move.b	d0,(0x00,a3)                    	| [$2113: ld   (iy+$00),a]
	jra	l_214d                             	| [$2116: jp   $214D]

l_2119:
	move.b	(0x03,a3),d0                    	| [$2119: ld   a,(iy+$03)]
	add.b	#0x80,d0                         	| [$211c: add  a,$80]
	move.b	d0,(0x03,a3)                    	| [$211e: ld   (iy+$03),a]
	jbsr	l_2d1a                            	| [$2121: call $2D1A]
	* useless code
*	jeq	l_212e                             	| [$2124: jr   z,$212E]
*	move.b	(0x02,a3),d0                    	| [$2126: ld   a,(iy+$02)]
*	addq.b	#0x00,d0                        	| [$2129: add  a,$00]
*	move.b	d0,(0x02,a3)                    	| [$212b: ld   (iy+$02),a]
*l_212e:
	move.b	(0x03,a3),d0                    	| [$212e: ld   a,(iy+$03)]
	add.b	#0x80,d0                         	| [$2131: add  a,$80]
	move.b	d0,(0x03,a3)                    	| [$2133: ld   (iy+$03),a]
	move.b	(0x02,a3),d0                    	| [$2136: ld   a,(iy+$02)]
	move.b	d0,(0x06,a3)                    	| [$2139: ld   (iy+$06),a]
	move.b	(0x01,a3),d0                    	| [$213c: ld   a,(iy+$01)]
	move.b	d0,(0x05,a3)                    	| [$213f: ld   (iy+$05),a]
	move.b	(0x00,a3),d0                    	| [$2142: ld   a,(iy+$00)]
	addq.b	#0x05,d0                        	| [$2145: add  a,$05]
	move.b	d0,(0x00,a3)                    	| [$2147: ld   (iy+$00),a]
	move.b	d0,(0x04,a3)                    	| [$214a: ld   (iy+$04),a]
l_214d:
	cmp.b	#0xF4,d0                         	| [$214d: cp   $F4]
	jcc	l_2170                             	| [$214f: jr   nc,$2170]
	jra	l_20c7                             	| [$2151: jp   $20C7]

l_2170:
	move.b	double_fire_930E(a6),d0         	| [$2170: ld   a,(double_fire_930E)]
	                               	| [$2173: and  a]
	jne	l_2181                             	| [$2174: jr   nz,$2181]
	clr.b	(0x00,a2)                        	| [$2176: ld   (ix+$00),$00]
	clr.b	(0x00,a3)                        	| [$217a: ld   (iy+$00),$00]
	jra	l_20c7                             	| [$217e: jp   $20C7]

l_2181:
	clr.b	(0x00,a2)                        	| [$2181: ld   (ix+$00),$00]
	clr.b	(0x00,a3)                        	| [$2185: ld   (iy+$00),$00]
	clr.b	(0x04,a3)                        	| [$2189: ld   (iy+$04),$00]
	jra	l_20c7                             	| [$218d: jp   $20C7]

l_2190:
	move.b	update_sequence_control_flag_a7fd(a6),d0                       	| [$2190: ld   a,($A7FD)]
	                               	| [$2193: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2194: ret  nz] [...]
0:
	lea	bullet_sprite_structures_9330(a6),a2                      	| [$2195: ld   ix,$9330]
	lea	bullet_sprite_shadow_ram_9918(a6),a3                      	| [$2199: ld   iy,$9918]
												| [$219d: ld   de,$0004]
												| [$21a0: ld   bc,$0010]
												| [$21a3: exx]
	move.b	#0x08,d1                        	| [$21a4: ld   b,$08]
l_21a6:
	movem.w	d1/d2,-(sp)                    	| [$21a6: push bc]
	move.b	(0x00,a2),d0                    	| [$21a7: ld   a,(ix+$00)]
	                               	| [$21aa: and  a]
	jeq	l_21ee                             	| [$21ab: jp   z,$21EE]
	addq.b	#1,d0                           	| [$21ae: inc  a]
	jne	l_21f8                             	| [$21af: jp   nz,$21F8]
	move.b	(0x00,a3),d3                    	| [$21b2: ld   d,(iy+$00)]
	move.b	d3,d0                           	| [$21b5: ld   a,d]
	cmp.b	#0x20,d0                         	| [$21b6: cp   $20]
	jcs	l_21f8                             	| [$21b8: jp   c,$21F8]
	move.b	(0x08,a2),d6                    	| [$21bb: ld   l,(ix+$08)]
	move.b	(0x07,a2),d5                    	| [$21be: ld   h,(ix+$07)]
	move.b	(0x03,a2),d4                    	| [$21c1: ld   e,(ix+$03)]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$21c4: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x00,a3)                    	| [$21c5: ld   (iy+$00),h]
	move.b	d6,(0x03,a2)                    	| [$21c8: ld   (ix+$03),l]
	subq.b	#1,(0x05,a2)                    	| [$21cb: dec  (ix+$05)]
	jne	l_21eb                             	| [$21ce: jr   nz,$21EB]
	move.b	(0x03,a3),d0                    	| [$21d0: ld   a,(iy+$03)]
	add.b	(0x04,a2),d0                     	| [$21d3: add  a,(ix+$04)]
	move.b	d0,(0x03,a3)                    	| [$21d6: ld   (iy+$03),a]
	move.b	(0x09,a2),d3                    	| [$21d9: ld   d,(ix+$09)]
	move.b	(0x0a,a2),d4                    	| [$21dc: ld   e,(ix+$0a)]
	clr.b	d5                               	| [$21df: ld   h,$00]
	move.b	(0x06,a2),d6                    	| [$21e1: ld   l,(ix+$06)]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$21e4: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x05,a2)                    	| [$21e5: ld   (ix+$05),h]
	move.b	d6,(0x06,a2)                    	| [$21e8: ld   (ix+$06),l]
l_21eb:
	jbsr	l_3155                            	| [$21eb: call $3155]
l_21ee:
	                               	| [$21ee: exx]
	addq.w	#4,a3                            	| [$21ef: add  iy,de]
	add.w	#0x10,a2                            	| [$21f1: add  ix,bc]
	                               	| [$21f3: exx]
	movem.w	(sp)+,d1/d2                    	| [$21f4: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_21a6                             	| [$21f5: djnz $21A6]
	rts                                    	| [$21f7: ret]

l_21f8:
	clr.b	(0x00,a2)                        	| [$21f8: ld   (ix+$00),$00]
	clr.b	(0x00,a3)                        	| [$21fc: ld   (iy+$00),$00]
	jra	l_21ee                             	| [$2200: jp   $21EE]

l_2203:
	lea	l_9904(a6),a3                      	| [$2203: ld   iy,$9904]
	move.b	level_playing_flag_9000(a6),d0                   	| [$2207: ld   a,($9000)]
	addq.b	#1,d0                           	| [$220a: inc  a]
	jne	l_22c9                             	| [$220b: jp   nz,$22C9]
	move.b	l_92F0(a6),d0                   	| [$220e: ld   a,($92F0)]
	addq.b	#1,d0                           	| [$2211: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2212: ret  nz] [...]
0:
	move.b	l_92F1(a6),d0                   	| [$2213: ld   a,($92F1)]
	                               	| [$2216: and  a]
	jeq	l_22a9                             	| [$2217: jp   z,$22A9]
	LOAD_WORD	value_16bit_92F2(a6),d5         	| [$221a: ld   hl,($92F2)]
	LOAD_D5D6_FROM_D5_16
	move.b	d6,d4                           	| [$221d: ld   e,l]
	move.b	d5,d3                           	| [$221e: ld   d,h]
	lsr.b	#1,d3                            	| [$221f: srl  d]
	roxr.b	#1,d4                           	| [$2221: rr   e]
	lsr.b	#1,d3                            	| [$2223: srl  d]
	roxr.b	#1,d4                           	| [$2225: rr   e]
	lsr.b	#1,d3                            	| [$2227: srl  d]
	roxr.b	#1,d4                           	| [$2229: rr   e]
	lsr.b	#1,d3                            	| [$222b: srl  d]
	roxr.b	#1,d4                           	| [$222d: rr   e]
	clr.b	d0                               	| [$222f: xor  a]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	sub.w	d3,d5                            	| [$2230: sbc  hl,de]
	STORE_WORD	d5,value_16bit_92F2(a6)        	| [$2232: ld   ($92F2),hl]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,d0                           	| [$2235: ld   a,h]
	add.b	#0x23,d0                         	| [$2236: add  a,$23]
	move.b	d0,d5                           	| [$2238: ld   h,a]
	move.b	(0x00,a3),d0                    	| [$2239: ld   a,(iy+$00)]
	or.b	d0,d0                             	| [$223c: or   a]
	jeq	l_2242                             	| [$223d: jr   z,$2242]
	move.b	d5,(0x00,a3)                    	| [$223f: ld   (iy+$00),h]
l_2242:
	move.b	(0x08,a3),d0                    	| [$2242: ld   a,(iy+$08)]
	or.b	d0,d0                             	| [$2245: or   a]
	jeq	l_224b                             	| [$2246: jr   z,$224B]
	move.b	d5,(0x08,a3)                    	| [$2248: ld   (iy+$08),h]
l_224b:
	or.b	(0x00,a3),d0                      	| [$224b: or   (iy+$00)]
	jeq	l_22c9                             	| [$224e: jr   z,$22C9]
	move.b	(0x00,a3),d0                    	| [$2250: ld   a,(iy+$00)]
	or.b	d0,d0                             	| [$2253: or   a]
	jeq	l_227b                             	| [$2254: jr   z,$227B]
	LOAD_WORD	value_16bit_92F4(a6),d5         	| [$2256: ld   hl,($92F4)]
	move.w	#0x0360,d3                          	| [$2259: ld   de,$0360]
	add.w	d3,d5                            	| [$225c: add  hl,de]
	STORE_WORD	d5,value_16bit_92F4(a6)        	| [$225d: ld   ($92F4),hl]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x03,a3)                    	| [$2260: ld   (iy+$03),h]
	move.b	(0x00,a3),d0                    	| [$2263: ld   a,(iy+$00)]
	cmp.b	#0x2D,d0                         	| [$2266: cp   $2D]
	jcc	l_227b                             	| [$2268: jr   nc,$227B]
	move.b	player_ship_angle_9001(a6),d0                   	| [$226a: ld   a,($9001)]
	sub.b	d5,d0                            	| [$226d: sub  h]
	addq.b	#0x04,d0                        	| [$226e: add  a,$04]
	cmp.b	#0x09,d0                         	| [$2270: cp   $09]
	jcc	l_227b                             	| [$2272: jr   nc,$227B]
	clr.b	(0x00,a3)                        	| [$2274: ld   (iy+$00),$00]
	jbsr	l_5d68                            	| [$2278: call $5D68]
l_227b:
	move.b	(0x08,a3),d0                    	| [$227b: ld   a,(iy+$08)]
	or.b	d0,d0                             	| [$227e: or   a]
	jeq	l_22d2                             	| [$227f: jr   z,$22D2]
	LOAD_WORD	l_92F6(a6),d5         	| [$2281: ld   hl,($92F6)]
	move.w	#-0x360,d3                      	| [$2284: ld   de,$FCA0]
	add.w	d3,d5                            	| [$2287: add  hl,de]
	STORE_WORD	d5,l_92F6(a6)        	| [$2288: ld   ($92F6),hl]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x0b,a3)                    	| [$228b: ld   (iy+$0b),h]
	move.b	(0x08,a3),d0                    	| [$228e: ld   a,(iy+$08)]
	cmp.b	#0x2D,d0                         	| [$2291: cp   $2D]
	jcc	l_22d2                             	| [$2293: jr   nc,$22D2]
	move.b	player_ship_angle_9001(a6),d0                   	| [$2295: ld   a,($9001)]
	sub.b	d5,d0                            	| [$2298: sub  h]
	addq.b	#0x04,d0                        	| [$2299: add  a,$04]
	cmp.b	#0x09,d0                         	| [$229b: cp   $09]
	jcc	l_22d2                             	| [$229d: jr   nc,$22D2]
	clr.b	(0x08,a3)                        	| [$229f: ld   (iy+$08),$00]
	jbsr	l_5d68                            	| [$22a3: call $5D68]
	jra	l_22d2                             	| [$22a6: jp   $22D2]

l_22a9:
	lea	l_92F1(a6),a0                      	| [$22a9: ld   hl,$92F1]
	move.b	#0x01,(a0)+                      	| [$22ac: ld   (hl),$01]
	                           	| [$22ae: inc  l]
	clr.b	(a0)+                             	| [$22af: ld   (hl),$00]
	                           	| [$22b1: inc  l]
	move.b	(0x00,a3),d0                    	| [$22b2: ld   a,(iy+$00)]
	sub.b	#0x23,d0                         	| [$22b5: sub  $23]
	move.b	d0,(a0)+                         	| [$22b7: ld   (hl),a]
	                           	| [$22b8: inc  l]
	clr.b	(a0)+                             	| [$22b9: ld   (hl),$00]
	                           	| [$22bb: inc  l]
	move.b	(0x03,a3),d0                    	| [$22bc: ld   a,(iy+$03)]
	move.b	d0,(a0)+                         	| [$22bf: ld   (hl),a]
	                           	| [$22c0: inc  l]
	clr.b	(a0)+                             	| [$22c1: ld   (hl),$00]
	                           	| [$22c3: inc  l]
	move.b	(0x0b,a3),d0                    	| [$22c4: ld   a,(iy+$0b)]
	move.b	d0,(a0)                         	| [$22c7: ld   (hl),a]
	rts                                    	| [$22c8: ret]

l_22c9:
	clr.b	d0                               	| [$22c9: xor  a]
	move.b	d0,l_92F0(a6)                   	| [$22ca: ld   ($92F0),a]
	addq.b	#1,d0                           	| [$22cd: inc  a]
	move.b	d0,double_fire_930E(a6)         	| [$22ce: ld   (double_fire_930E),a]
	rts                                    	| [$22d1: ret]

l_22d2:
	move.b	general_fast_timer_9400(a6),d0                   	| [$22d2: ld   a,($9400)]
	ror.b	#1,d0                            	| [$22d5: rrca]
	and.b	#0x03,d0                         	| [$22d6: and  $03]
	LEA_ROM	0x22EF,a0                          	| [$22d8: ld   hl,$22EF]
	jbsr	fetch_a0_plus_d0_0008                            	| [$22db: rst  $08]
	lea	l_990C(a6),a3                      	| [$22dc: ld   iy,$990C]
	move.b	d0,(0x01,a3)                    	| [$22e0: ld   (iy+$01),a]
	move.b	d0,(-0x07,a3)                   	| [$22e3: ld   (iy-$07),a]
	move.b	#0x0D,(0x02,a3)                 	| [$22e6: ld   (iy+$02),$0D]
	move.b	#0x0D,(-0x06,a3)                	| [$22ea: ld   (iy-$06),$0D]
	rts                                    	| [$22ee: ret]

l_22f3:
	jbsr	handle_enemies_2339                            	| [$22f3: call $2339]
	move.b	l_922E(a6),d0                   	| [$22f6: ld   a,($922E)]
	move.b	d0,l_913E(a6)                   	| [$22f9: ld   ($913E),a]
	jbsr	l_23b0                            	| [$22fc: call $23B0]
	move.b	l_922E(a6),d0                   	| [$22ff: ld   a,($922E)]
	move.b	d0,l_9605(a6)                   	| [$2302: ld   ($9605),a]
	move.b	general_fast_timer_9400(a6),d0                   	| [$2305: ld   a,($9400)]
	and.b	#0x7F,d0                         	| [$2308: and  $7F]
	beq.b	0f                               	| [...]
	rts                                    	| [$230a: ret  nz] [...]
0:
	move.b	l_9601(a6),d0                   	| [$230b: ld   a,($9601)]
	                               	| [$230e: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$230f: ret  nz] [...]
0:
	move.b	l_9605(a6),d0                   	| [$2310: ld   a,($9605)]
	cmp.b	#0x12,d0                         	| [$2313: cp   $12]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2315: ret  nc] [...]
0:
	cmp.b	#0x03,d0                         	| [$2316: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2318: ret  c] [...]
0:
	move.b	l_961D(a6),d0                   	| [$2319: ld   a,($961D)]
	cmp.b	#0x02,d0                         	| [$231c: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$231e: ret  nc] [...]
0:
	move.b	l_960E(a6),d0                   	| [$231f: ld   a,($960E)]
	                               	| [$2322: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2323: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$2324: ld   a,$01]
	move.b	d0,l_924E(a6)                   	| [$2326: ld   ($924E),a]
	rts                                    	| [$2329: ret]

* handle objects (swarm doesn't seem to count, only objects arriving
* attacking or close to the player count)
* also enemy bullets aren't handled there, neither are ice blocks or
* the couple of beam emitting stuff that race to the player
*
* here are only handled:
* - non-swarm saucers (attacking, bailing out, arriving in waves)
* - 3-satellite formation

handle_enemies_2339:
	clr.b	d0                               	| [$2339: xor  a]
	move.b	d0,l_922E(a6)                   	| [$233a: ld   ($922E),a]
	lea	enemy_objects_9010(a6),a2                      	| [$233d: ld   ix,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$2341: ld   iy,$9810]
	jbsr	handle_enemy_2518                            	| [$2345: call $2518]
	lea	l_9020(a6),a2                      	| [$2348: ld   ix,$9020]
	lea	l_9818(a6),a3                      	| [$234c: ld   iy,$9818]
	jbsr	handle_enemy_2518                            	| [$2350: call $2518]
	lea	l_9030(a6),a2                      	| [$2353: ld   ix,$9030]
	lea	l_9820(a6),a3                      	| [$2357: ld   iy,$9820]
	jbsr	handle_enemy_2518                            	| [$235b: call $2518]
	lea	l_9040(a6),a2                      	| [$235e: ld   ix,$9040]
	lea	l_9828(a6),a3                      	| [$2362: ld   iy,$9828]
	jbsr	handle_enemy_2518                            	| [$2366: call $2518]
	lea	l_9050(a6),a2                      	| [$2369: ld   ix,$9050]
	lea	l_9830(a6),a3                      	| [$236d: ld   iy,$9830]
	jbsr	handle_enemy_2518                            	| [$2371: call $2518]
	lea	l_9060(a6),a2                      	| [$2374: ld   ix,$9060]
	lea	l_9838(a6),a3                      	| [$2378: ld   iy,$9838]
	jbsr	handle_enemy_2518                            	| [$237c: call $2518]
	lea	l_9070(a6),a2                      	| [$237f: ld   ix,$9070]
	lea	l_9840(a6),a3                      	| [$2383: ld   iy,$9840]
	jbsr	handle_enemy_2518                            	| [$2387: call $2518]
	lea	l_9080(a6),a2                      	| [$238a: ld   ix,$9080]
	lea	l_9848(a6),a3                      	| [$238e: ld   iy,$9848]
	jbsr	handle_enemy_2518                            	| [$2392: call $2518]
	lea	l_9090(a6),a2                      	| [$2395: ld   ix,$9090]
	lea	l_9850(a6),a3                      	| [$2399: ld   iy,$9850]
	jbsr	handle_enemy_2518                            	| [$239d: call $2518]
	move.b	iceberg_on_screen_915e(a6),d0                   	| [$23a0: ld   a,($915E)]
	                               	| [$23a3: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$23a4: ret  nz] [...]
0:
	lea	l_90A0(a6),a2                      	| [$23a5: ld   ix,$90A0]
	lea	l_9858(a6),a3                      	| [$23a9: ld   iy,$9858]
	jra	handle_enemy_2518                             	| [$23ad: jp   $2518]

l_23b0:
	lea	l_90B0(a6),a2                      	| [$23b0: ld   ix,$90B0]
	lea	l_9860(a6),a3                      	| [$23b4: ld   iy,$9860]
											| [$23b8: ld   a,($09E7)]
											| [$23bb: ld   b,a]
	move.b	general_fast_timer_9400(a6),d0                   	| [$23bc: ld   a,($9400)]
	ror.b	#1,d0                            	| [$23bf: rrca]
	and.b	#0x1F,d0                         	| [$23c0: and  $1F]
	move.b	d0,d2                           	| [$23c2: ld   c,a]
	LEA_ROM	0x241B,a0                          	| [$23c3: ld   hl,$241B]
	ADD_D0_TO_A0_0018                            	| [$23c6: rst  $18]
	move.b	l_9475(a6),d0                   	| [$23c7: ld   a,($9475)]
	add.b	(a0),d0                          	| [$23ca: add  a,(hl)]
	move.b	d0,l_9475(a6)                   	| [$23cb: ld   ($9475),a]
	LEA_ROM	0x243B,a0                          	| [$23ce: ld   hl,$243B]
	move.b	l_923E(a6),d0                   	| [$23d1: ld   a,($923E)]
	addq.b	#1,d0                           	| [$23d4: inc  a]
	move.b	d0,l_923E(a6)                   	| [$23d5: ld   ($923E),a]
	ror.b	#1,d0                            	| [$23d8: rrca]
	and.b	#0x1F,d0                         	| [$23d9: and  $1F]
	ADD_D0_TO_A0_0018                            	| [$23db: rst  $18]
	move.b	l_9476(a6),d0                   	| [$23dc: ld   a,($9476)]
	add.b	(a0),d0                          	| [$23df: add  a,(hl)]
	move.b	d0,l_9476(a6)                   	| [$23e0: ld   ($9476),a]
												| [$23e3: exx]
												| [$23e4: ld   de,$0010]
												| [$23e7: ld   bc,$0004]
	move.w	#0x23,d1	| 0x24-1 times set at 23B8											| [$23ea: exx]
l_23eb:
	move.w	d1,-(sp)                    	| [$23eb: push bc]
	move.b	(0x00,a2),d0                    	| [$23ec: ld   a,(ix+$00)]
	                               	| [$23ef: and  a]
	jeq	l_2411                             	| [$23f0: jr   z,$2411]
	lea	l_922E(a6),a0                      	| [$23f2: ld   hl,$922E]
	addq.b	#1,(a0)                         	| [$23f5: inc  (hl)]
	addq.b	#1,d0                           	| [$23f6: inc  a]
	jeq	l_23fc                             	| [$23f7: jr   z,$23FC]
	jra	l_2464                             	| [$23f9: jp   $2464]

l_23fc:
	jbsr	l_30db                            	| [$23fc: call $30DB]
	move.b	l_9475(a6),d0                   	| [$23ff: ld   a,($9475)]
	add.b	(0x0c,a2),d0                     	| [$2402: add  a,(ix+$0c)]
	move.b	d0,(displayed_x_03,a3)             	| [$2405: ld   (iy+$03),a]
	move.b	l_9476(a6),d0                   	| [$2408: ld   a,($9476)]
	add.b	(0x0d,a2),d0                     	| [$240b: add  a,(ix+$0d)]
	move.b	d0,(displayed_y_00,a3)                    	| [$240e: ld   (iy+$00),a]
l_2411:
	                               	| [$2411: exx]
	* optimized this as D3=0x10 and D1=0x4 (called a lot!)
	add.w	#0x10,a2                            	| [$2412: add  ix,de]
	addq.w	#4,a3                            	| [$2414: add  iy,bc]
	                               	| [$2416: exx]
	move.w	(sp)+,d1                    	| [$2417: pop  bc]
	dbf	d1,l_23eb                             	| [$2418: djnz $23EB]
	rts                                    	| [$241a: ret]

l_2464:
	pea		l_2411(pc)                          	| [$2464: ld   hl,$2411]
	                        	| [$2467: push hl]
	move.b	(0x00,a2),d0                    	| [$2468: ld   a,(ix+$00)]
	cmp.b	#0xF0,d0                         	| [$246b: cp   $F0]
	jeq	l_249b                             	| [$246d: jp   z,$249B]
	cmp.b	#0x01,d0                         	| [$2470: cp   $01]
	jeq	l_248e                             	| [$2472: jp   z,$248E]
	subq.b	#1,(0x00,a2)                    	| [$2475: dec  (ix+$00)]
	jra	l_311b                             	| [$2478: jp   $311B]


l_247b:
	LEA_ROM	0x40A6,a0                          	| [$247b: ld   hl,$40A6]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$247e: rst  $10]
	exg	a1,a0                              	| [$247f: ex   de,hl]
	move.b	(a0)+,d4                         	| [$2480: ld   e,(hl)]
											| [$2481: inc  hl]
	move.b	(a0),d3                         	| [$2482: ld   d,(hl)]
	addq.w	#2,a0                           	| [$2483: inc  hl] * 2
	move.b	l_9661(a6),d0                   	| [$2485: ld   a,($9661)]
	and.b	#0x0F,d0                         	| [$2488: and  $0F]
	move.b	d0,d2                           	| [$248a: ld   c,a]
	jra	display_text_07ef                             	| [$248b: jp   $07EF]


l_248e:
	clr.b	(0x00,a2)                        	| [$248e: ld   (ix+$00),$00]
	clr.b	(0x00,a3)                        	| [$2492: ld   (iy+$00),$00]
	lea	l_9605(a6),a0                      	| [$2496: ld   hl,$9605]
	subq.b	#1,(a0)                         	| [$2499: dec  (hl)]
	rts                                    	| [$249a: ret]

l_249b:
	jbsr	l_5cbd                            	| [$249b: call $5CBD]
	move.b	#0x1F,(0x00,a2)                 	| [$249e: ld   (ix+$00),$1F]
	move.b	l_9610(a6),d0                   	| [$24a2: ld   a,($9610)]
	cmp.b	#0x03,d0                         	| [$24a5: cp   $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$24a7: ret  nc] [...]
0:
	
	LOAD_D1D2_FROM_A2_RAM                   | [$24a8: push ix]
											| [$24aa: pop  bc]

	move.l	a3,a1                        	| [$24ab: push iy]
	                        	            | [$24ad: pop  de]
* < D1/D2/D3/D4
l_24ae:
	lea	l_9610(a6),a0                      	| [$24ae: ld   hl,$9610]
	moveq	#0,d0
	move.b	(a0),d0                         	| [$24b1: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$24b2: inc  (hl)]
	add.b	d0,d0                            	| [$24b3: add  a,a]
	add.b	d0,d0                            	| [$24b4: add  a,a]
	lea	first_death_ray_emitter_struct_9611(a6),a0                 | [$24b5: ld   hl,$9611]
	add.w	d0,a0                            	| [$24b8: add  a,l]
	                           	| [$24b9: ld   l,a]
	move.b	d2,(a0)+                         	| [$24ba: ld   (hl),c]
	                           	| [$24bb: inc  l]
	move.b	d1,(a0)+                         	| [$24bc: ld   (hl),b]
	                           	| [$24bd: inc  l]
	move.b	d4,(a0)+                         	| [$24be: ld   (hl),e]
	                           	| [$24bf: inc  l]
	move.b	d3,(a0)                         	| [$24c0: ld   (hl),d]
	rts                                    	| [$24c1: ret]

show_title_for_a_while_24c2:
	move.b	general_fast_timer_9400(a6),d0                   	| [$24c2: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$24c5: and  $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$24c7: ret  nz] [...]
0:
	lea	distance_to_center_9465(a6),a0                      	| [$24c8: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$24cb: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$24cc: ret  nz] [...]
0:
* ROM checksum
*	moveq	#0,d1
*	move.w	#0x0002,d2                      	| [$24cd: ld   bc,$0002]
*	LEA_ROM	0x0500,a0                          	| [$24d0: ld   hl,$0500]
*	sub.b	d0,d0                            	| [$24d3: sub  a]
*l_24d4:
*	move.b	(a0),d7
*	eor.b	d7,d0                            	| [$24d4: xor  (hl)]
*	addq.w	#1,a0                           	| [$24d5: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_24d4                             	| [$24d6: djnz $24D4]
*	subq.b	#1,d2                           	| [$24d8: dec  c]
*	jne	l_24d4                             	| [$24d9: jr   nz,$24D4]
*	add.b	#0xD3,d0                         	| [$24db: add  a,$D3]
*	jne	l_07ff                             	| [$24dd: jp   nz,$07FF]
	* reads 0 from ROM...
	READ_ROM_BYTE	0x0808,d0                       	| [$24e0: ld   a,($0808)]
	move.b	d0,d1                           	| [$24e3: ld   b,a]
	* read screen memory
	move.b	(0x67B,a6),d0				 	| [$24e4: ld   a,($867B)]
	cmp.b	#0xB1,d0                         	| [$24e7: cp   $B1]
	jne	l_24ec                             	| [$24e9: jr   nz,$24EC]
	addq.b	#1,d1                           	| [$24eb: inc  b]
l_24ec:
	move.b	d1,d0                           	| [$24ec: ld   a,b]
	move.b	d0,sprite_sync_status_a7ff(a6)      | [$24ed: ld   ($A7FF),a]
	jbsr	l_4e92                            	| [$24f0: call $4E92]
	move.w	#0x0302,d3                          	| [$24f3: ld   de,$0302]
	jbsr	start_task_d3_0038                            	| [$24f6: rst  $38]
	addq.b	#1,d3                           	| [$24f7: inc  e]
	jbsr	start_task_d3_0038                            	| [$24f8: rst  $38]
	jra	next_game_state_080b                             	| [$24f9: jp   $080B]

l_24fc:
	clr.w	d5                               	| [$24fc: ld   h,$00]
	move.b	(0x09,a2),d0                    	| [$24fe: ld   a,(ix+$09)]
	move.b	d0,d5                           	| [$2501: ld   l,a]
	move.w	#0x90B0,d3                      	| [$2502: ld   de,$90B0]
	add.w	d5,d5                            	| [$2505: add  hl,hl]
	add.w	d5,d5                            	| [$2506: add  hl,hl]
	add.w	d5,d5                            	| [$2507: add  hl,hl]
	add.w	d5,d5                            	| [$2508: add  hl,hl]
	add.w	d3,d5                            	| [$2509: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,d1                           	| [$250a: ld   b,h]
	move.b	d6,d2                           	| [$250b: ld   c,l]
	clr.w	d5                               	| [$250d: ld   h,$00]
	move.b	d0,d5                           	| [$250c: ld   l,a]
	move.w	#0x9860,d3                      	| [$250f: ld   de,$9860]
	add.w	d5,d5                            	| [$2512: add  hl,hl]
	add.w	d5,d5                            	| [$2513: add  hl,hl]
	add.w	d3,d5                            	| [$2514: add  hl,de]
	exg	d3,d5                              	| [$2515: ex   de,hl]
	LOAD_D3D4_FROM_D3_16
	
	jra	l_24ae                             	| [$2516: jr   $24AE]

* < A2: object structure (0x90x0), 0x10 bytes
* < A3: object shadow sprite ram (0x98x0), 0x8 bytes
handle_enemy_2518:
	move.b	(enemy_active_00,a2),d0                    	| [$2518: ld   a,(ix+$00)]
	                               	| [$251b: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$251c: ret  z] [...]
0:
	lea	l_922E(a6),a0                      	| [$251d: ld   hl,$922E]
	addq.b	#1,(a0)                         	| [$2520: inc  (hl)]
	* active = 0xFF, adding 1 makes it 0 => we handle the full object state
	addq.b	#1,d0                           	| [$2521: inc  a]
	jeq	handle_object_state_253d                             	| [$2522: jr   z,$253D]
	addq.b	#1,d0                           	| [$2524: inc  a]
	jeq	l_252a                             	| [$2525: jr   z,$252A]
	jra	l_2a2b                             	| [$2527: jp   nz,$2A2B]
	* smaller switch case with only 3 cases
l_252a:
	move.b	(enemy_state_0a,a2),d0                    	| [$252a: ld   a,(ix+$0a)]
	cmp.b	#0x07,d0                         	| [$252d: cp   $07]
	jeq	bonus_central_ship_appearing_463a                             	| [$252f: jp   z,$463A]
	cmp.b	#0x08,d0                         	| [$2532: cp   $08]
	jeq	bonus_satellite_appearing_4713                             	| [$2534: jp   z,$4713]
	tst.b	d0                               | [$2537: cp   $00] [uncovered]
	jeq	saucer_init_26be                      | [$2539: jp   z,$26BE] [uncovered]
	rts                                    	| [$253c: ret] [uncovered]
	* the big switch case
handle_object_state_253d:
	move.b	(enemy_state_0a,a2),d0                    	| [$253d: ld   a,(ix+$0a)]
	jbsr	jump_table_jump_0030                | [$2540: rst  $30]
* [jump_table]
	.long	saucer_init_26be                  | 0 wave init
	.long	arrival_in_wave_26cf              | 1 saucers arrive in waves
	.long	l_2735		                      | 2 happens when player hit
	.long	saucer_attacks_280a		          | 3 individual/small-group attack?
	.long	saucer_bails_out_2978		      | 4 "fuck it, I'm going home" for last ship
	.long	exit_screen_to_return_swarm_29ab  | 5 move to the outside to wrap to the center
	.long	direct_return_to_swarm_275b       | 6 move to the center
	.long	bonus_central_ship_appearing_463a | 7 central double shot bonus or just another satellite appearing
	.long	bonus_satellite_appearing_4713    | 8 2/3 satellites
	.long	handle_satellite_477e             | 9 move the now appeared satellite
	.long	change_attack_direction_2661      | A while attacking, change rotation direction
	.long	dash_on_player_25f3               | B TBC ship is going straight to the player
	.long	dash_on_player_261f               | C TBC next dash sequence

l_255b:
	jbsr	l_590e                            	| [$255b: call $590E]
	jbsr	update_starfield_in_game_3804                            	| [$255e: call $3804]
	jbsr	ship_materializing_122c                            	| [$2561: call $122C]
	tst.b	d0                               	| [$2564: and  a]
	jne	l_256d                             	| [$2565: jr   nz,$256D]
	jbsr	move_player_ship_1857                            	| [$2567: call $1857]
	jbsr	update_player_shots_1f30                            	| [$256a: call $1F30]
l_256d:
	jbsr	l_22f3                            	| [$256d: call $22F3]
	jbsr	l_25ac                            	| [$2570: call $25AC]
	move.b	general_fast_timer_9400(a6),d0                   	| [$2573: ld   a,($9400)]
	and.b	#0x03,d0                         	| [$2576: and  $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$2578: ret  z] [...]
0:
	lea	distance_to_center_9465(a6),a0                      	| [$2579: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$257c: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$257d: ret  nz] [...]
0:
	move.w	#0x0309,d3                          	| [$257e: ld   de,$0309]
	jbsr	start_task_d3_0038                            	| [$2581: rst  $38]
	move.w	#0x032C,d3                          	| [$2582: ld   de,$032C]
	jbsr	start_task_d3_0038                            	| [$2585: rst  $38]
	move.w	#0x0326,d3                          	| [$2586: ld   de,$0326]
	jbsr	start_task_d3_0038                            	| [$2589: rst  $38]
	move.w	#0x031C,d3                          	| [$258a: ld   de,$031C]
	jbsr	start_task_d3_0038                            	| [$258d: rst  $38]
*  ROM checksum
*	clr.b	d1                               	| [$258e: ld   b,$00]
*	move.w	#0x0BC0,a0                          	| [$2590: ld   hl,$0BC0]
*	move.b	d1,d0                           	| [$2593: ld   a,b]
*l_2594:
*	add.b	(a0),d0                          	| [$2594: add  a,(hl)]
*	addq.w	#1,a0                           	| [$2595: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_2594                             	| [$2596: djnz $2594]
*	sub.b	#0x31,d0                         	| [$2598: sub  $31]
*	beq.b	0f                               	| [...]
*	jbsr	l_bb0000                            	| [$259a: call nz,$0000]
*0:
	CLEAR_XC_FLAGS                         	| [$259d: xor  a]
	clr.b	d0                               	| [$259d: xor  a]
	move.b	d0,l_960C(a6)                   	| [$259e: ld   ($960C),a]
	move.b	#0x2A,d0                        	| [$25a1: ld   a,$2A]
	move.b	d0,distance_to_center_9465(a6)                   	| [$25a3: ld   ($9465),a]
	jbsr	l_5c82                            	| [$25a6: call $5C82]
	jra	next_game_state_080b                             	| [$25a9: jp   $080B]

l_25ac:
	move.b	current_stage_number_9609(a6),d0      	| [$25ac: ld   a,(current_stage_number_9609)]
	addq.b	#0x01,d0                        	| [$25af: add  a,$01]
	and.b	#0x03,d0                         	| [$25b1: and  $03]
	add.b	d0,d0                            	| [$25b3: add  a,a]
	add.b	d0,d0                            	| [$25b4: add  a,a]
	LEA_ROM	0x25CF,a0                          	| [$25b5: ld   hl,$25CF]
	ADD_D0_TO_A0_0018                            	| [$25b8: rst  $18]
	move.b	general_fast_timer_9400(a6),d0                   	| [$25b9: ld   a,($9400)]
	ror.b	#3,d0                            	| [$25bc: rrca] * 3
	and.b	#0x03,d0                         	| [$25bf: and  $03]
	jbsr	fetch_a0_plus_d0_0008                            	| [$25c1: rst  $08]
	lea	0x8334,a0                          	| [$25c2: ld   hl,$8334]
	move.w	#-0x20,d3                       	| [$25c5: ld   de,$FFE0]
	move.b	#0x16,d1                        	| [$25c8: ld   b,$16]
l_25ca:
	jbsr	osd_w_videoram                         	| [$25ca: ld   (hl),a]
	add.w	d3,a0                            	| [$25cb: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_25ca                             	| [$25cc: djnz $25CA]
	rts                                    	| [$25ce: ret]

dash_on_player_25f3:
	jbsr	l_4ecb                            	| [$25f3: call $4ECB]
	jbsr	l_2d81                            	| [$25f6: call $2D81]
	move.b	(0x00,a3),d0                    	| [$25f9: ld   a,(iy+$00)]
	cmp.b	#0x34,d0                         	| [$25fc: cp   $34]
	jcs	l_2603                             	| [$25fe: jr   c,$2603]
	jra	l_2742                             	| [$2600: jp   $2742]

l_2603:
	move.b	#0x10,(0x05,a2)                 	| [$2603: ld   (ix+$05),$10]
	move.b	#0x0C,(enemy_state_0a,a2)                 	| [$2607: ld   (ix+$0a),$0C]
	move.b	level_playing_flag_9000(a6),d0                   	| [$260b: ld   a,($9000)]
	sub.b	(0x03,a3),d0                     	| [$260e: sub  (iy+$03)]
	cmp.b	#0x80,d0                         	| [$2611: cp   $80]
	jeq	l_261a                             	| [$2613: jr   z,$261A]
	clr.b	(0x07,a2)                        	| [$2615: ld   (ix+$07),$00]
	rts                                    	| [$2619: ret]

l_261a:
	move.b	#0x01,(0x07,a2)                 	| [$261a: ld   (ix+$07),$01] [uncovered]
	rts                                    	| [$261e: ret]

dash_on_player_261f:
	jbsr	l_4ecb                            	| [$261f: call $4ECB]
	jbsr	l_2bb3                            	| [$2622: call $2BB3]
	jbsr	l_2d81                            	| [$2625: call $2D81]
	move.b	(0x05,a2),d0                    	| [$2628: ld   a,(ix+$05)]
	                               	| [$262b: and  a]
	jeq	l_2644                             	| [$262c: jp   z,$2644]
	subq.b	#1,(0x05,a2)                    	| [$262f: dec  (ix+$05)]
	move.b	#0x08,d1                        	| [$2632: ld   b,$08]
	btst.b	#0,(0x07,a2)                    	| [$2634: bit  0,(ix+$07)]
	jne	l_263c                             	| [$2638: jr   nz,$263C]
	move.b	#0xF8,d1                        	| [$263a: ld   b,$F8]
l_263c:
	move.b	(0x01,a2),d0                    	| [$263c: ld   a,(ix+$01)]
	add.b	d1,d0                            	| [$263f: add  a,b]
	move.b	d0,(0x01,a2)                    	| [$2640: ld   (ix+$01),a]
	rts                                    	| [$2643: ret]

l_2644:
	move.b	(0x00,a3),d0                    	| [$2644: ld   a,(iy+$00)]
	cmp.b	#0xA0,d0                         	| [$2647: cp   $A0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2649: ret  c] [...]
0:
	jra	check_if_enemy_may_flee_26a5                             	| [$264a: jp   $26A5]

l_264d:
	move.b	#0x80,(0x05,a2)                 	| [$264d: ld   (ix+$05),$80]
	move.b	(0x01,a2),d0                    	| [$2651: ld   a,(ix+$01)]
	add.b	#0x40,d0                         	| [$2654: add  a,$40]
	rol.b	#1,d0                            	| [$2656: rlca]
	and.b	#0x01,d0                         	| [$2657: and  $01]
	move.b	d0,(0x07,a2)                    	| [$2659: ld   (ix+$07),a]
	move.b	#0x0A,(enemy_state_0a,a2)                 	| [$265c: ld   (ix+$0a),$0A]
	rts                                    	| [$2660: ret]

change_attack_direction_2661:
	subq.b	#1,(0x05,a2)                    	| [$2661: dec  (ix+$05)]
	jeq	l_2683                             	| [$2664: jp   z,$2683]
	READ_ROM_BYTE	0x0120,d0                       	| [$266b: ld   a,($0120)]
	move.b	d0,d1                           	| [$266e: ld   b,a]
	btst.b	#0,(0x07,a2)                    	| [$2667: bit  0,(ix+$07)]
	jeq	l_2673                             	| [$266f: jr   z,$2673]
	move.b	#0xFE,d1                        	| [$2671: ld   b,$FE]
l_2673:
	move.b	(0x01,a2),d0                    	| [$2673: ld   a,(ix+$01)]
	add.b	d1,d0                            	| [$2676: add  a,b]
	move.b	d0,(0x01,a2)                    	| [$2677: ld   (ix+$01),a]
	jbsr	l_4ecb                            	| [$267a: call $4ECB]
	jbsr	l_2bb3                            	| [$267d: call $2BB3]
	jra	l_2d81                             	| [$2680: jp   $2D81]

l_2683:
	move.b	(0x09,a2),d0                    	| [$2683: ld   a,(ix+$09)]
	ror.b	#2,d0                            	| [$2686: rrca] * 2
	and.b	#0x0F,d0                         	| [$2688: and  $0F]
	jbsr	jump_table_jump_0030                            	| [$268a: rst  $30]
* [jump_table]
	.long	check_if_enemy_may_flee_26a5
	.long	check_if_enemy_may_flee_26a5
	.long	check_if_enemy_may_flee_26a5
	.long	check_if_enemy_may_flee_26a5
	.long	check_if_enemy_may_flee_26a5
	.long	check_if_enemy_may_flee_26a5
	.long	l_26b9
	.long	check_if_enemy_may_flee_26a5
	.long	check_if_enemy_may_flee_26a5
	.long	-1                           	|   bogus
	.long	l_171d

check_if_enemy_may_flee_26a5:
	move.b	l_931E(a6),d0                   	| [$26a5: ld   a,($931E)]
	cmp.b	#0x02,d0                         	| [$26a8: cp   $02]
	jcc	enemy_flees_296f                             	| [$26aa: jp   nc,$296F]
	move.b	enemy_flees_flag_91ee(a6),d0                   	| [$26ad: ld   a,($91EE)]
	                               	| [$26b0: and  a]
	jne	enemy_flees_296f                             	| [$26b1: jp   nz,$296F]
	move.b	#0x02,(enemy_state_0a,a2)       | [$26b4: ld   (ix+$0a),$02]
	rts                                    	| [$26b8: ret]

l_26b9:
	move.b	#0x03,(enemy_state_0a,a2)                 	| [$26b9: ld   (ix+$0a),$03]
	rts                                    	| [$26bd: ret]

saucer_init_26be:
	move.b	level_playing_flag_9000(a6),d0                   	| [$26be: ld   a,($9000)]
	addq.b	#1,d0                           	| [$26c1: inc  a]
	jne	l_26c8                             	| [$26c2: jr   nz,$26C8]
	subq.b	#1,(enemy_appear_timer_08,a2)                    	| [$26c4: dec  (ix+$08)]
	beq.b	0f                               	| [...]
	rts                                    	| [$26c7: ret  nz] [...]
0:
l_26c8:
	move.b	#0x01,(enemy_state_0a,a2)     	| [$26c8: ld   (ix+$0a),$01]
	jra	l_26ef                             	| [$26cc: jp   $26EF]

arrival_in_wave_26cf:
	move.b	level_playing_flag_9000(a6),d0                   	| [$26cf: ld   a,($9000)]
	addq.b	#1,d0                           	| [$26d2: inc  a]
	jne	l_271c                             	| [$26d3: jr   nz,$271C]
	move.b	(0x07,a2),d0                    	| [$26d5: ld   a,(ix+$07)]
	                               	| [$26d8: and  a]
	bne.b	0f                               	| [...]
	jbsr	l_26ef                            	| [$26d9: call z,$26EF]
0:
	subq.b	#1,(0x07,a2)                    	| [$26dc: dec  (ix+$07)]
	jbsr	object_movement_4f16                            	| [$26df: call $4F16]
	jbsr	l_2bb3                            	| [$26e2: call $2BB3]
	move.b	l_91AE(a6),d0                   	| [$26e5: ld   a,($91AE)]
	                               	| [$26e8: and  a]
	jeq	l_2d81                             	| [$26e9: jp   z,$2D81]
	jra	l_3171                             	| [$26ec: jp   $3171]

l_26ef:
	move.b	(0x05,a2),d0                    	| [$26ef: ld   a,(ix+$05)]
	move.b	d0,d2                           	| [$26f2: ld   c,a]
	LEA_ROM	0x577E,a0                          	| [$26f3: ld   hl,$577E]
	and.b	#0x7F,d0                         	| [$26f6: and  $7F]
	jbsr	load_rom_pointer_in_a1_d3_0010      | [$26f8: rst  $10]
	exg	a1,a0                              	    | [$26f9: ex   de,hl]
	move.b	(0x06,a2),d0                    	| [$26fa: ld   a,(ix+$06)]
	add.b	d0,d0                            	| [$26fd: add  a,a]
	jbsr	fetch_a0_plus_d0_0008               | [$26fe: rst  $08]
	cmp.b	#0xFF,d0                         	| [$26ff: cp   $FF]
	jeq	l_271c                             	| [$2701: jr   z,$271C]
	cmp.b	#0xFE,d0                         	| [$2703: cp   $FE]
	jeq	l_set_to_return_to_swarm_by_outside_272c                             	| [$2705: jr   z,$272C]
	btst.b	#7,d2                           	| [$2707: bit  7,c]
	jeq	l_2710                             	| [$2709: jr   z,$2710]
	move.b	d0,d1                           	| [$270b: ld   b,a]
	READ_ROM_BYTE	0x006D,d0                       	| [$270c: ld   a,($006D)]
	sub.b	d1,d0                            	| [$270f: sub  b]
l_2710:
	move.b	d0,(0x01,a2)                    	| [$2710: ld   (ix+$01),a]
	addq.w	#1,a0                           	| [$2713: inc  hl]
	move.b	(a0),d0                         	| [$2714: ld   a,(hl)]
	move.b	d0,(0x07,a2)                    	| [$2715: ld   (ix+$07),a]
	addq.b	#1,(0x06,a2)                    	| [$2718: inc  (ix+$06)]
	rts                                    	    | [$271b: ret]

l_271c:
	move.b	l_91AE(a6),d0                   	| [$271c: ld   a,($91AE)]
	                               	| [$271f: and  a]
	jne	l_2727                             	| [$2720: jr   nz,$2727]
	move.b	#0x02,(enemy_state_0a,a2)                 	| [$2722: ld   (ix+$0a),$02]
	rts                                    	| [$2726: ret]

l_2727:
	move.b	#0x04,(enemy_state_0a,a2)                 	| [$2727: ld   (ix+$0a),$04]
	rts                                    	| [$272b: ret]

* exit the screen by the edges then return to swarm
l_set_to_return_to_swarm_by_outside_272c:
	move.b	#0x05,(enemy_state_0a,a2)                 	| [$272c: ld   (ix+$0a),$05]
	move.b	#0xC0,(0x0b,a2)                 	| [$2730: ld   (ix+$0b),$C0]
	rts                                    	| [$2734: ret]

l_2735:
	jbsr	l_4ecb                            	| [$2735: call $4ECB]
	jbsr	l_2d81                            	| [$2738: call $2D81]
	move.b	(0x00,a3),d0                    	| [$273b: ld   a,(iy+$00)]
	cmp.b	#0x88,d0                         	| [$273e: cp   $88]
	jcc	l_set_to_return_to_swarm_2756                             	| [$2740: jr   nc,$2756]
l_2742:
	move.b	(0x01,a2),d0                    	| [$2742: ld   a,(ix+$01)]
	sub.b	#0xBE,d0                         	| [$2745: sub  $BE]
	cmp.b	#0x02,d0                         	| [$2747: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2749: ret  c] [...]
0:
	cmp.b	#0x80,d0                         	| [$274a: cp   $80]
	jcc	l_2752                             	| [$274c: jr   nc,$2752]
	subq.b	#1,(0x01,a2)                    	| [$274e: dec  (ix+$01)]
	rts                                    	| [$2751: ret]

l_2752:
	addq.b	#1,(0x01,a2)                    	| [$2752: inc  (ix+$01)]
	rts                                    	| [$2755: ret]

l_set_to_return_to_swarm_2756:
	move.b	#0x06,(enemy_state_0a,a2)                 	| [$2756: ld   (ix+$0a),$06]
	rts                                    	| [$275a: ret]

direct_return_to_swarm_275b:
	jbsr	l_2d81                            	| [$275b: call $2D81]
	jbsr	l_2bb3                            	| [$275e: call $2BB3]
	jbsr	object_movement_4f16                            	| [$2761: call $4F16]
	move.b	general_fast_timer_9400(a6),d0                   	| [$2764: ld   a,($9400)]
	and.b	#0x03,d0                         	| [$2767: and  $03]
	move.b	d0,d1                           	| [$2769: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$276a: ld   a,(ix+$0f)]
	and.b	#0x03,d0                         	| [$276d: and  $03]
	cmp.b	d1,d0                            	| [$276f: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$2770: ret  nz] [...]
0:
	move.b	(0x0c,a2),d0                    	| [$2771: ld   a,(ix+$0c)]
	move.b	d0,d1                           	| [$2774: ld   b,a]
	move.b	l_9475(a6),d0                   	| [$2775: ld   a,($9475)]
	add.b	d1,d0                            	| [$2778: add  a,b]
	move.b	d0,d5                           	| [$2779: ld   h,a]
	move.b	(0x0d,a2),d0                    	| [$277a: ld   a,(ix+$0d)]
	move.b	d0,d1                           	| [$277d: ld   b,a]
	move.b	l_9476(a6),d0                   	| [$277e: ld   a,($9476)]
	add.b	d1,d0                            	| [$2781: add  a,b]
	move.b	d0,d6                           	| [$2782: ld   l,a]
	jbsr	l_4001                            	| [$2783: call $4001]
	move.b	d0,(0x01,a2)                    	| [$2786: ld   (ix+$01),a]
	move.b	(0x0d,a2),d0                    	| [$2789: ld   a,(ix+$0d)]
	move.b	d0,d1                           	| [$278c: ld   b,a]
	move.b	l_9476(a6),d0                   	| [$278d: ld   a,($9476)]
	add.b	d1,d0                            	| [$2790: add  a,b]
	move.b	d0,d1                           	| [$2791: ld   b,a]
	move.b	(0x00,a3),d0                    	| [$2792: ld   a,(iy+$00)]
	sub.b	d1,d0                            	| [$2795: sub  b]
	addq.b	#0x06,d0                        	| [$2796: add  a,$06]
	cmp.b	#0x0D,d0                         	| [$2798: cp   $0D]
	bcs.b	0f                               	| [...]
	rts                                    	| [$279a: ret  nc] [...]
0:
	move.b	(0x0c,a2),d0                    	| [$279b: ld   a,(ix+$0c)]
	move.b	d0,d1                           	| [$279e: ld   b,a]
	move.b	l_9475(a6),d0                   	| [$279f: ld   a,($9475)]
	add.b	d1,d0                            	| [$27a2: add  a,b]
	move.b	d0,d1                           	| [$27a3: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$27a4: ld   a,(iy+$03)]
	sub.b	d1,d0                            	| [$27a7: sub  b]
	addq.b	#0x06,d0                        	| [$27a8: add  a,$06]
	cmp.b	#0x0D,d0                         	| [$27aa: cp   $0D]
	bcs.b	0f                               	| [...]
	rts                                    	| [$27ac: ret  nc] [...]
0:
	move.b	l_9476(a6),d0                   	| [$27ad: ld   a,($9476)]
	add.b	(0x0d,a2),d0                     	| [$27b0: add  a,(ix+$0d)]
	move.b	d0,(0x00,a3)                    	| [$27b3: ld   (iy+$00),a]
	move.b	l_9475(a6),d0                   	| [$27b6: ld   a,($9475)]
	add.b	(0x0c,a2),d0                     	| [$27b9: add  a,(ix+$0c)]
	move.b	d0,(0x03,a3)                    	| [$27bc: ld   (iy+$03),a]
	move.b	#0x40,(0x01,a2)                 	| [$27bf: ld   (ix+$01),$40]
	clr.w	d5                               	| [$27c3: ld   h,$00]
	move.b	(0x09,a2),d5                    	| [$27c5: ld   l,(ix+$09)]
	move.w	#0x90B0,d3                      	| [$27c8: ld   de,$90B0]
	add.w	d5,d5                            	| [$27cb: add  hl,hl]
	add.w	d5,d5                            	| [$27cc: add  hl,hl]
	add.w	d5,d5                            	| [$27cd: add  hl,hl]
	add.w	d5,d5                            	| [$27ce: add  hl,hl]
	add.w	d3,d5                            	| [$27cf: add  hl,de]
	LOAD_A0_FROM_D5_16_RAM
	st.b	(a0)+                      	| [$27d0: ld   (hl),$FF]
	                           	| [$27d2: inc  hl]
	move.b	#0x40,(a0)                      	| [$27d3: ld   (hl),$40]
	move.w	#0x0008,d3                      	| [$27d5: ld   de,$0008]
	add.w	d3,a0                            	| [$27d8: add  hl,de]
	move.b	(0x09,a2),d0                    	| [$27d9: ld   a,(ix+$09)]
	move.b	d0,(a0)                         	| [$27dc: ld   (hl),a]
	move.w	#0x0003,d3                      	| [$27dd: ld   de,$0003]
	add.w	d3,a0                            	| [$27e0: add  hl,de]
	move.b	(0x0c,a2),d0                    	| [$27e1: ld   a,(ix+$0c)]
	move.b	d0,(a0)+                         	| [$27e4: ld   (hl),a]
												| [$27e5: inc  l]
	move.b	(0x0d,a2),d0                    	| [$27e6: ld   a,(ix+$0d)]
	move.b	d0,(a0)                         	| [$27e9: ld   (hl),a]
	move.w	#0x9860,d3                      	| [$27ea: ld   de,$9860]
	clr.w	d5                               	| [$27f0: ld   h,$00]
	move.b	(0x09,a2),d5                    	| [$27ed: ld   l,(ix+$09)]
	add.w	d5,d5                            	| [$27f2: add  hl,hl]
	add.w	d5,d5                            	| [$27f3: add  hl,hl]
	add.w	d3,d5                            	| [$27f4: add  hl,de]
	LOAD_A0_FROM_D5_16_RAM
	exg	a0,a1                             	| [$27f5: ex   de,hl]

	move.l	a3,a0                        	| [$27f6: push iy]
	                        	| [$27f8: pop  hl]
	jbsr	ldi                               	| [$27f9: ldi]
	jbsr	ldi                               	| [$27fb: ldi]
	jbsr	ldi                               	| [$27fd: ldi]
	jbsr	ldi                               	| [$27ff: ldi]
	clr.b	(0x00,a2)                        	| [$2801: ld   (ix+$00),$00]
	clr.b	(0x00,a3)                        	| [$2805: ld   (iy+$00),$00]
	rts                                    	| [$2809: ret]

saucer_attacks_280a:
	move.b	level_playing_flag_9000(a6),d0                   	| [$280a: ld   a,($9000)]
	addq.b	#1,d0                           	| [$280d: inc  a]
	jne	l_295d                             	| [$280e: jp   nz,$295D]
	* level running normally
	move.b	l_924E(a6),d0                   	| [$2811: ld   a,($924E)]
	                               	| [$2814: and  a]
	jeq	l_2823                             	| [$2815: jr   z,$2823]
	move.b	(0x0f,a2),d0                    	| [$2817: ld   a,(ix+$0f)] [uncovered]
	cmp.b	#0x07,d0                         	| [$281a: cp   $07] [uncovered]
	jcs	l_2823                             	| [$281c: jr   c,$2823] [uncovered]
	cmp.b	#0x0A,d0                         	| [$281e: cp   $0A] [uncovered]
	jcs	l_295d                             	| [$2820: jp   c,$295D] [uncovered]
l_2823:
	* double return address
	pea		l_4ecb(pc)        | [$2823: ld   hl,$4ECB]

	                        	| [$2826: push hl]
	pea		l_2bb3(pc)         | [$2827: ld   hl,$2BB3]

	                        	| [$282a: push hl]
	move.b	(enemy_attack_phase_09,a2),d0                    	| [$282b: ld   a,(ix+$09)]
	ror.b	#2,d0                            	| [$282e: rrca] * 2
	and.b	#0x0F,d0                         	| [$2830: and  $0F]
	jbsr	jump_table_jump_0030                            	| [$2832: rst  $30]
* [jump_table]
	.long	enemy_attack_phase_1_287c
	.long	enemy_attack_phase_1_287c
	.long	enemy_attack_phase_1_287c
	.long	enemy_attack_phase_2_2845
	.long	enemy_attack_phase_2_2845
	.long	enemy_attack_phase_2_2845
	.long	enemy_attack_phase_3_28ae
	.long	enemy_attack_phase_4_28e9
	.long	enemy_attack_phase_4_28e9

enemy_attack_phase_2_2845:
	move.b	(0x00,a3),d0                    	| [$2845: ld   a,(iy+$00)]
	cmp.b	#0x38,d0                         	| [$2848: cp   $38]
	jcs	l_286c                             	| [$284a: jp   c,$286C]
	btst.b	#0,(0x06,a2)                    	| [$284d: bit  0,(ix+$06)]
	bne.b	0f                               	| [...]
	jbsr	l_2858                            	| [$2851: call z,$2858]
0:
	jbsr	l_2d81                            	| [$2854: call $2D81]
	rts                                    	| [$2857: ret]

l_2858:
	READ_ROM_BYTE	0x57F3,d0                       	| [$2858: ld   a,($57F3)]
	btst.b	#0,(0x0f,a2)                    	| [$285b: bit  0,(ix+$0f)]
	jeq	l_2864                             	| [$285f: jr   z,$2864]
	READ_ROM_BYTE	0x09BD,d0                       	| [$2861: ld   a,($09BD)]
l_2864:
	move.b	d0,(0x01,a2)                    	| [$2864: ld   (ix+$01),a]
	bset.b	#0,(0x06,a2)                    	| [$2867: set  0,(ix+$06)]
	rts                                    	| [$286b: ret]

l_286c:
	move.b	player_ship_angle_9001(a6),d0                   	| [$286c: ld   a,($9001)]
	sub.b	(displayed_x_03,a3),d0                     	| [$286f: sub  (iy+$03)]
	add.b	#0x30,d0                         	| [$2872: add  a,$30]
	cmp.b	#0x61,d0                         	| [$2874: cp   $61]
	jcs	l_264d                             	| [$2876: jp   c,$264D]
	jra	check_if_enemy_may_flee_26a5                             	| [$2879: jp   $26A5]

enemy_attack_phase_1_287c:
	btst.b	#0,(0x06,a2)                    	| [$287c: bit  0,(ix+$06)]
	bne.b	0f                               	| [...]
	jbsr	l_2895                            	| [$2880: call z,$2895]
0:
	move.b	(displayed_y_00,a3),d0                    	| [$2883: ld   a,(iy+$00)]

	cmp.b	#0x40,d0                         	| [$2886: cp   $40]
	jcs	check_if_enemy_may_flee_26a5                             	| [$2888: jp   c,$26A5]
	cmp.b	(0x07,a2),d0                     	| [$288b: cp   (ix+$07)]
	bcc.b	0f                               	| [...]
	jbsr	l_2920                            	| [$288e: call c,$2920]
0:
	jbsr	l_2d81                            	| [$2891: call $2D81]
	rts                                    	| [$2894: ret]

l_2895:
	move.b	l_900A(a6),d0                   	| [$2895: ld   a,($900A)]
	move.b	d0,d5                           	| [$2898: ld   h,a]
	move.b	#0xB0,d6                        	| [$2899: ld   l,$B0]
	jbsr	l_4001                            	| [$289b: call $4001]
	move.b	d0,(0x01,a2)                    	| [$289e: ld   (ix+$01),a]
	bset.b	#0,(0x06,a2)                    	| [$28a1: set  0,(ix+$06)]
	move.b	#0xB0,(0x07,a2)                 	| [$28a5: ld   (ix+$07),$B0]
	clr.b	(0x0b,a2)                        	| [$28a9: ld   (ix+$0b),$00]
	rts                                    	| [$28ad: ret]

enemy_attack_phase_3_28ae:
	btst.b	#0,(0x06,a2)                    	| [$28ae: bit  0,(ix+$06)]
	bne.b	0f                               	| [...]
	jbsr	l_28c6                            	| [$28b2: call z,$28C6]
0:
	move.b	(0x00,a3),d0                    	| [$28b5: ld   a,(iy+$00)]
	cmp.b	#0x48,d0                         	| [$28b8: cp   $48]
	jcs	check_if_enemy_may_flee_26a5                             	| [$28ba: jp   c,$26A5]
	cmp.b	(0x04,a2),d0                     	| [$28bd: cp   (ix+$04)]
	jcs	l_28de                             	| [$28c0: jr   c,$28DE]
	jbsr	l_2d81                            	| [$28c2: call $2D81]
	rts                                    	| [$28c5: ret]

l_28c6:
	move.b	#0x90,(0x04,a2)                 	| [$28c6: ld   (ix+$04),$90]
	bset.b	#0,(0x06,a2)                    	| [$28ca: set  0,(ix+$06)]
	move.b	player_ship_angle_9001(a6),d0                   	| [$28ce: ld   a,($9001)]
	sub.b	(0x03,a3),d0                     	| [$28d1: sub  (iy+$03)]
	asr.b	#2,d0                            	| [$28d4: sra  a] * 2
	add.b	#0xC0,d0                         	| [$28d8: add  a,$C0]
	move.b	d0,(0x01,a2)                    	| [$28da: ld   (ix+$01),a]
	rts                                    	| [$28dd: ret]

l_28de:
	move.b	(0x04,a2),d0                    	| [$28de: ld   a,(ix+$04)]
	sub.b	#0x28,d0                         	| [$28e1: sub  $28]
	move.b	d0,(0x04,a2)                    	| [$28e3: ld   (ix+$04),a]
	jra	l_264d                             	| [$28e6: jp   $264D]

enemy_attack_phase_4_28e9:
	btst.b	#0,(0x06,a2)                    	| [$28e9: bit  0,(ix+$06)]
	bne.b	0f                               	| [...]
	jbsr	l_2907                            	| [$28ed: call z,$2907]
0:
	move.b	(0x00,a3),d0                    	| [$28f0: ld   a,(iy+$00)]
	cmp.b	#0x4C,d0                         	| [$28f3: cp   $4C]
	jcs	l_2902                             	| [$28f5: jp   c,$2902]
	cmp.b	(0x07,a2),d0                     	| [$28f8: cp   (ix+$07)]
	bcc.b	0f                               	| [...]
	jbsr	l_2920                            	| [$28fb: call c,$2920]
0:
	jbsr	l_2d81                            	| [$28fe: call $2D81]
	rts                                    	| [$2901: ret]

l_2902:
	move.b	#0x0B,(enemy_state_0a,a2)                 	| [$2902: ld   (ix+$0a),$0B]
	rts                                    	| [$2906: ret]

l_2907:
	move.b	l_9006(a6),d0                   	| [$2907: ld   a,($9006)]
	move.b	d0,d5                           	| [$290a: ld   h,a]
	move.b	#0x98,d6                        	| [$290b: ld   l,$98]
	jbsr	l_4001                            	| [$290d: call $4001]
	move.b	d0,(0x01,a2)                    	| [$2910: ld   (ix+$01),a]
	bset.b	#0,(0x06,a2)                    	| [$2913: set  0,(ix+$06)]
	move.b	#0x98,(0x07,a2)                 	| [$2917: ld   (ix+$07),$98]
	clr.b	(0x0b,a2)                        	| [$291b: ld   (ix+$0b),$00]
	rts                                    	| [$291f: ret]

l_2920:
	move.b	(0x07,a2),d0                    	| [$2920: ld   a,(ix+$07)]
	sub.b	#0x14,d0                         	| [$2923: sub  $14]
	move.b	d0,(0x07,a2)                    	| [$2925: ld   (ix+$07),a]
	move.b	d0,d6                           	| [$2928: ld   l,a]
	addq.b	#1,(0x0b,a2)                    	| [$2929: inc  (ix+$0b)]
	lea	l_9006(a6),a1                      	| [$292c: ld   de,$9006]
	btst.b	#0,(0x0b,a2)                    	| [$292f: bit  0,(ix+$0b)]
	jeq	l_2936                             	| [$2933: jr   z,$2936]
	addq.w	#1,a1                           	| [$2935: inc  e]
l_2936:
	addq.w	#1,a1                           	| [$2936: inc  e]
	btst.b	#0,(0x0f,a2)                    	| [$2937: bit  0,(ix+$0f)]
	jeq	l_293e                             	| [$293b: jr   z,$293E]
	addq.w	#1,a1                           	| [$293d: inc  e]
l_293e:
	move.b	(a1),d0                         	| [$293e: ld   a,(de)]
	move.b	d0,d5                           	| [$293f: ld   h,a]
	jbsr	l_4001                            	| [$2940: call $4001]
	move.b	d0,d1                           	| [$2943: ld   b,a]
	move.b	(displayed_y_00,a3),d0                    	| [$2944: ld   a,(iy+$00)]
	cmp.b	#0x50,d0                         	| [$2947: cp   $50]
	jcc	l_2959                             	| [$2949: jr   nc,$2959]
	sub.b	#0xA0,d0                         	| [$294b: sub  $A0]
	cmp.b	#0x40,d0                         	| [$294d: cp   $40]
	jcs	l_2959                             	| [$294f: jr   c,$2959]
	move.b	#0xE0,d1                        	| [$2951: ld   b,$E0]
	cmp.b	#0x70,d0                         	| [$2953: cp   $70]
	jcs	l_2959                             	| [$2955: jr   c,$2959]
	move.b	#0xA0,d1                        	| [$2957: ld   b,$A0]
l_2959:
	move.b	d1,(0x01,a2)                    	| [$2959: ld   (ix+$01),b]
	rts                                    	| [$295c: ret]

l_295d:
	move.b	l_931E(a6),d0                   	| [$295d: ld   a,($931E)]
	cmp.b	#0x02,d0                         	| [$2960: cp   $02]
	jcc	enemy_flees_296f                             	| [$2962: jr   nc,$296F]
l_2964:
	move.b	enemy_flees_flag_91ee(a6),d0                   	| [$2964: ld   a,($91EE)]
	                               	| [$2967: and  a]
	jne	enemy_flees_296f                             	| [$2968: jr   nz,$296F]
	move.b	#0x02,(enemy_state_0a,a2)                 	| [$296a: ld   (ix+$0a),$02]
	rts                                    	| [$296e: ret]

enemy_flees_296f:
	move.b	#0xC0,(0x01,a2)                 	| [$296f: ld   (ix+$01),$C0]
	move.b	#0x04,(enemy_state_0a,a2)                 	| [$2973: ld   (ix+$0a),$04]
	rts                                    	| [$2977: ret]


saucer_bails_out_2978:
	jbsr	object_movement_4f16                            	| [$2978: call $4F16]
	jbsr	l_2bb3                            	| [$297b: call $2BB3]
	jbsr	l_2996                            	| [$297e: call $2996]
	move.b	(0x00,a3),d0                    	| [$2981: ld   a,(iy+$00)]
	add.b	#0x08,d0                         	| [$2984: add  a,$08]
	cmp.b	#0x10,d0                         	| [$2986: cp   $10]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2988: ret  nc] [...]
0:
	clr.b	(0x00,a3)                        	| [$2989: ld   (iy+$00),$00]
	clr.b	(0x00,a2)                        	| [$298d: ld   (ix+$00),$00]
	lea	l_9605(a6),a0                      	| [$2991: ld   hl,$9605]
	subq.b	#1,(a0)                         	| [$2994: dec  (hl)]
	rts                                    	| [$2995: ret]

l_2996:
	move.b	(0x09,a2),d0                    	| [$2996: ld   a,(ix+$09)]
	cmp.b	#0x28,d0                         	| [$2999: cp   $28]
	jeq	l_30c4                             	| [$299b: jp   z,$30C4]
	jcc	l_304b                             	| [$299e: jp   nc,$304B]
	move.b	l_91AE(a6),d0                   	| [$29a1: ld   a,($91AE)]
	                               	| [$29a4: and  a]
	jeq	l_2d81                             	| [$29a5: jp   z,$2D81]
	jra	l_3171                             	| [$29a8: jp   $3171]

exit_screen_to_return_swarm_29ab:
	move.b	l_924E(a6),d0                   	| [$29ab: ld   a,($924E)]
	                               	| [$29ae: and  a]
	jeq	l_29bd                             	| [$29af: jr   z,$29BD]
	move.b	(0x0f,a2),d0                    	| [$29b1: ld   a,(ix+$0f)] [uncovered]
	cmp.b	#0x07,d0                         	| [$29b4: cp   $07] [uncovered]
	jcs	l_29bd                             	| [$29b6: jr   c,$29BD] [uncovered]
	cmp.b	#0x0A,d0                         	| [$29b8: cp   $0A] [uncovered]
	jcs	l_295d                             	| [$29ba: jp   c,$295D] [uncovered]
l_29bd:
	jbsr	l_4ecb                            	| [$29bd: call $4ECB]
	jbsr	l_2d5c                            	| [$29c0: call $2D5C]
	jbsr	l_2bb3                            	| [$29c3: call $2BB3]
	move.b	l_920E(a6),d0                   	| [$29c6: ld   a,($920E)]
	move.b	d0,d1                           	| [$29c9: ld   b,a]
	move.b	(0x00,a3),d0                    	| [$29ca: ld   a,(iy+$00)]
	cmp.b	d1,d0                            	| [$29cd: cp   b]
	jcs	l_295d                             	| [$29ce: jp   c,$295D]
	move.b	(0x00,a3),d0                    	| [$29d1: ld   a,(iy+$00)]
	cmp.b	#0x90,d0                         	| [$29d4: cp   $90]
	jcc	l_2a07                             	| [$29d6: jr   nc,$2A07]
	jbsr	l_2a0e                            	| [$29d8: call $2A0E]
l_29db:
	move.b	(0x0b,a2),d1                    	| [$29db: ld   b,(ix+$0b)]
	move.b	(0x01,a2),d0                    	| [$29de: ld   a,(ix+$01)]
	sub.b	d1,d0                            	| [$29e1: sub  b]
	bne.b	0f                               	| [...]
	rts                                    	| [$29e2: ret  z] [...]
0:
	addq.b	#0x02,d0                        	| [$29e3: add  a,$02]
	cmp.b	#0x05,d0                         	| [$29e5: cp   $05]
	jcs	l_2a00                             	| [$29e7: jp   c,$2A00]
	cmp.b	#0x80,d0                         	| [$29ea: cp   $80]
	jcc	l_29f7                             	| [$29ec: jr   nc,$29F7]
	move.b	(0x01,a2),d0                    	| [$29ee: ld   a,(ix+$01)]
	subq.b	#0x04,d0                        	| [$29f1: sub  $04]
	move.b	d0,(0x01,a2)                    	| [$29f3: ld   (ix+$01),a]
	rts                                    	| [$29f6: ret]

l_29f7:
	move.b	(0x01,a2),d0                    	| [$29f7: ld   a,(ix+$01)]
	addq.b	#0x04,d0                        	| [$29fa: add  a,$04]
	move.b	d0,(0x01,a2)                    	| [$29fc: ld   (ix+$01),a]
	rts                                    	| [$29ff: ret]

l_2a00:
	move.b	(0x0b,a2),d0                    	| [$2a00: ld   a,(ix+$0b)]
	move.b	d0,(0x01,a2)                    	| [$2a03: ld   (ix+$01),a]
	rts                                    	| [$2a06: ret]

l_2a07:
	move.b	#0xC0,(0x0b,a2)                 	| [$2a07: ld   (ix+$0b),$C0]
	jra	l_29db                             	| [$2a0b: jp   $29DB]

l_2a0e:
	move.b	general_fast_timer_9400(a6),d0                   	| [$2a0e: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$2a11: and  $07]
	move.b	d0,d1                           	| [$2a13: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$2a14: ld   a,(ix+$0f)]
	and.b	#0x07,d0                         	| [$2a17: and  $07]
	cmp.b	d1,d0                            	| [$2a19: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$2a1a: ret  nz] [...]
0:
	move.b	player_ship_angle_9001(a6),d0                   	| [$2a1b: ld   a,($9001)]
	move.b	d0,d5                           	| [$2a1e: ld   h,a]
	move.b	#0x28,d6                        	| [$2a1f: ld   l,$28]
	jbsr	l_4001                            	| [$2a21: call $4001]
	move.b	(0x04,a2),d0                    	| [$2a24: ld   a,(ix+$04)]
	move.b	d0,(0x0b,a2)                    	| [$2a27: ld   (ix+$0b),a]
	rts                                    	| [$2a2a: ret]

l_2a2b:
	move.b	(0x00,a2),d0                    	| [$2a2b: ld   a,(ix+$00)]
	cmp.b	#0xF0,d0                         	| [$2a2e: cp   $F0]
	jeq	l_2b4a                             	| [$2a30: jp   z,$2B4A]
	cmp.b	#0x01,d0                         	| [$2a33: cp   $01]
	jeq	l_2a4b                             	| [$2a35: jp   z,$2A4B]
	subq.b	#1,d0                           	| [$2a38: dec  a]
	move.b	d0,(0x00,a2)                    	| [$2a39: ld   (ix+$00),a]
	move.b	(0x02,a3),d0                    	| [$2a3c: ld   a,(iy+$02)]
	cmp.b	#0x48,d0                         	| [$2a3f: cp   $48]
	bne.b	0f                               	| [...]
	rts                                    	| [$2a41: ret  z] [...]
0:
	cmp.b	#0x88,d0                         	| [$2a42: cp   $88]
	bne.b	0f                               	| [...]
	rts                                    	| [$2a44: ret  z] [...]
0:
	jbsr	l_311b                            	| [$2a45: call $311B]
	jra	l_2b41                             	| [$2a48: jp   $2B41]

l_2a4b:
	move.b	(0x02,a3),d0                    	| [$2a4b: ld   a,(iy+$02)]
	cmp.b	#0x48,d0                         	| [$2a4e: cp   $48]
	jeq	l_2a6f                             	| [$2a50: jr   z,$2A6F]
	cmp.b	#0x88,d0                         	| [$2a52: cp   $88]
	jeq	l_2a6f                             	| [$2a54: jr   z,$2A6F]
	move.b	l_9601(a6),d0                   	| [$2a56: ld   a,($9601)]
	                               	| [$2a59: and  a]
	jne	l_2a7e                             	| [$2a5a: jr   nz,$2A7E]
	move.b	(0x09,a2),d0                    	| [$2a5c: ld   a,(ix+$09)]
	cmp.b	#0x28,d0                         	| [$2a5f: cp   $28]
	jeq	l_2af9                             	| [$2a61: jp   z,$2AF9]
	cmp.b	#0x2C,d0                         	| [$2a64: cp   $2C]
	jeq	l_2b03                             	| [$2a66: jp   z,$2B03]
	move.b	l_9605(a6),d0                   	| [$2a69: ld   a,($9605)]
	subq.b	#1,d0                           	| [$2a6c: dec  a]
	jeq	l_2aeb                             	| [$2a6d: jr   z,$2AEB]
l_2a6f:
	clr.b	d0                               	| [$2a6f: xor  a]
	move.b	d0,(0x00,a2)                    	| [$2a70: ld   (ix+$00),a]
	move.b	d0,(0x00,a3)                    	| [$2a73: ld   (iy+$00),a]
	move.b	d0,(0x04,a3)                    	| [$2a76: ld   (iy+$04),a]
	lea	l_9605(a6),a0                      	| [$2a79: ld   hl,$9605]
	subq.b	#1,(a0)                         	| [$2a7c: dec  (hl)]
	rts                                    	| [$2a7d: ret]

l_2a7e:
	lea	l_91FE(a6),a0                      	| [$2a7e: ld   hl,$91FE]
	subq.b	#1,(a0)                         	| [$2a81: dec  (hl)]
	jne	l_2a6f                             	| [$2a82: jr   nz,$2A6F]
	jbsr	l_5d86                            	| [$2a84: call $5D86]
	move.b	l_91AE(a6),d0                   	| [$2a87: ld   a,($91AE)]
	                               	| [$2a8a: and  a]
	jne	l_2abd                             	| [$2a8b: jr   nz,$2ABD]
	move.b	#0x04,d3                        	| [$2a8d: ld   d,$04] [uncovered]
	lea	l_935D(a6),a0                      	| [$2a8f: ld   hl,$935D] [uncovered]
	move.b	(a0),d0                         	| [$2a92: ld   a,(hl)] [uncovered]
	addq.b	#1,(a0)                         	| [$2a93: inc  (hl)] [uncovered]
	LEA_ROM	0x2AA5,a0                          	| [$2a94: ld   hl,$2AA5] [uncovered]
	add.b	d0,d0                            	| [$2a97: add  a,a] [uncovered]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2a98: rst  $08] [uncovered]
	move.b	#0x20,(0x00,a2)                 	| [$2a99: ld   (ix+$00),$20] [uncovered]
	move.b	d0,(0x01,a3)                    	| [$2a9d: ld   (iy+$01),a] [uncovered]
	addq.w	#1,a0                           	| [$2aa0: inc  hl] [uncovered]
	move.b	(a0),d4                         	| [$2aa1: ld   e,(hl)] [uncovered]
	LOAD_D3_16_FROM_D3D4
	jra	l_2b2c                             	| [$2aa2: jp   $2B2C] [uncovered]

l_2abd:
	move.b	current_stage_960B(a6),d0                   	| [$2abd: ld   a,($960B)]
	ror.b	#2,d0                            	| [$2ac0: rrca] * 2
	and.b	#0x3F,d0                         	| [$2ac2: and  $3F]
	add.b	d0,d0                            	| [$2ac4: add  a,a]
	LEA_ROM	0x2AD3,a0                          	| [$2ac5: ld   hl,$2AD3]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2ac8: rst  $08]
	move.b	d0,(0x01,a3)                    	| [$2ac9: ld   (iy+$01),a]
	addq.w	#1,a0                           	| [$2acc: inc  hl]
	move.b	(a0),d4                         	| [$2acd: ld   e,(hl)]
	move.b	#0x04,d3                        	| [$2ace: ld   d,$04]
	LOAD_D3_16_FROM_D3D4
	jra	l_2b2c                             	| [$2ad0: jp   $2B2C]

l_2aeb:
	move.b	#0x2B,(0x01,a3)                 	| [$2aeb: ld   (iy+$01),$2B]
	move.b	#0x3C,(0x00,a2)                 	| [$2aef: ld   (ix+$00),$3C]
	move.w #0x040B,d3                          	| [$2af3: ld   de,$040B]
	jra	l_2b2c                             	| [$2af6: jp   $2B2C]

l_2af9:
	move.b	#0x2A,(0x01,a3)                 	| [$2af9: ld   (iy+$01),$2A]
	move.w #0x0406,d3                          	| [$2afd: ld   de,$0406]
	jra	l_2b2c                             	| [$2b00: jp   $2B2C]

l_2b03:
	lea	l_928E(a6),a0                      	| [$2b03: ld   hl,$928E]
	move.b	(a0),d0                         	| [$2b06: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$2b07: inc  (hl)]
	move.b	d0,d1                           	| [$2b08: ld   b,a]
	move.b	double_fire_930E(a6),d0         	| [$2b09: ld   a,(double_fire_930E)]
	                               	| [$2b0c: and  a]
	jeq	l_2b12                             	| [$2b0d: jr   z,$2B12]
	READ_ROM_BYTE	0x0124,d0                       	| [$2b0f: ld   a,($0124)]
l_2b12:
	add.b	d1,d0                            	| [$2b12: add  a,b]
	add.b	d0,d0                            	| [$2b13: add  a,a]
	LEA_ROM	0x2B22,a0                          	| [$2b14: ld   hl,$2B22]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2b17: rst  $08]
	move.b	d0,(0x01,a3)                    	| [$2b18: ld   (iy+$01),a]
	addq.w	#1,a0                           	| [$2b1b: inc  hl]
	move.b	(a0),d4                         	| [$2b1c: ld   e,(hl)]
	move.b	#0x04,d3                        	| [$2b1d: ld   d,$04]
	                             	| [$2b1f: jp   $2B2C]
	LOAD_D3_16_FROM_D3D4
l_2b2c:
	move.b	#0x20,(0x00,a2)                 	| [$2b2c: ld   (ix+$00),$20]
	jbsr	start_task_d3_0038                            	| [$2b30: rst  $38]
	move.b	is_screen_flipped_9407(a6),d0                   	| [$2b31: ld   a,($9407)]
	                               	| [$2b34: and  a]
	jne	l_2b3c                             	| [$2b35: jr   nz,$2B3C]
	move.b	#0x48,(0x02,a3)                 	| [$2b37: ld   (iy+$02),$48]
	rts                                    	| [$2b3b: ret]

l_2b3c:
	move.b	#0x88,(0x02,a3)                 	| [$2b3c: ld   (iy+$02),$88]
	rts                                    	| [$2b40: ret]

l_2b41:
	move.b	general_fast_timer_9400(a6),d0                   	| [$2b41: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$2b44: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$2b46: ret  z] [...]
0:
	jra	l_4ecb                             	| [$2b47: jp   $4ECB]

l_2b4a:
	jbsr	l_2b96                            	| [$2b4a: call $2B96]
	move.b	#0x1F,(0x00,a2)                 	| [$2b4d: ld   (ix+$00),$1F]
	move.b	l_9610(a6),d0                   	| [$2b51: ld   a,($9610)]
	cmp.b	#0x03,d0                         	| [$2b54: cp   $03]
	bcc.b	0f                               	| [...]
	jbsr	l_24fc                            	| [$2b56: call c,$24FC]
0:
	move.b	l_91AE(a6),d0                   	| [$2b59: ld   a,($91AE)]
	                               	| [$2b5c: and  a]
	jeq	l_2b69                             	| [$2b5d: jr   z,$2B69]
	lea	bcd_nb_chance_ships_shot_917e(a6),a0                      	| [$2b5f: ld   hl,$917E]
	READ_ROM_BYTE	0x0996,d0                       	| [$2b62: ld   a,($0996)]
	move.b	(a0),d7                          	| [$2b65: add  a,(hl)]
	abcd	d7,d0								| daa
	move.b	d0,(a0)                         	| [$2b67: ld   (hl),a]
	rts                                    	| [$2b68: ret]

l_2b69:
	move.b	(0x09,a2),d0                    	| [$2b69: ld   a,(ix+$09)]
	cmp.b	#0x28,d0                         	| [$2b6c: cp   $28]
	beq.b	0f                               	| [...]
	rts                                    	| [$2b6e: ret  nz] [...]
0:
	move.b	l_92F0(a6),d0                   	| [$2b6f: ld   a,($92F0)]
	                               	| [$2b72: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2b73: ret  nz] [...]
0:
	move.b	(0x00,a3),d0                    	| [$2b74: ld   a,(iy+$00)]
	move.b	d0,l_9904(a6)                   	| [$2b77: ld   ($9904),a]
	move.b	d0,l_990C(a6)                   	| [$2b7a: ld   ($990C),a]
	move.b	(0x03,a3),d0                    	| [$2b7d: ld   a,(iy+$03)]
	addq.b	#0x03,d0                        	| [$2b80: add  a,$03]
	move.b	d0,l_9907(a6)                   	| [$2b82: ld   ($9907),a]
	subq.b	#0x06,d0                        	| [$2b85: sub  $06]
	move.b	d0,l_990F(a6)                   	| [$2b87: ld   ($990F),a]
	CLEAR_XC_FLAGS                         	| [$2b8a: xor  a]
	clr.b	d0                               	| [$2b8a: xor  a]
	move.b	d0,l_92F1(a6)                   	| [$2b8b: ld   ($92F1),a]
	subq.b	#1,d0                           	| [$2b8e: dec  a]
	move.b	d0,l_92F0(a6)                   	| [$2b8f: ld   ($92F0),a]
	jra	l_5d62                             	| [$2b92: jp   $5D62]

l_2b96:
	move.b	l_91AE(a6),d0                   	| [$2b96: ld   a,($91AE)]
	                               	| [$2b99: and  a]
	jne	l_2ba8                             	| [$2b9a: jp   nz,$2BA8]
	move.b	(0x09,a2),d0                    	| [$2b9d: ld   a,(ix+$09)]
	cmp.b	#0x28,d0                         	| [$2ba0: cp   $28]
	jcs	l_5cb2                             	| [$2ba2: jp   c,$5CB2]
	jra	l_5d45                             	| [$2ba5: jp   $5D45]

l_2ba8:
	move.b	l_960D(a6),d0                   	| [$2ba8: ld   a,($960D)]
	btst.b	#0,d0                           	| [$2bab: bit  0,a]
	jne	l_5d45                             	| [$2bad: jp   nz,$5D45]
	jra	l_5cb2                             	| [$2bb0: jp   $5CB2]

l_2bb3:
	move.b	general_fast_timer_9400(a6),d0                   	| [$2bb3: ld   a,($9400)]
	and.b	#0x0F,d0                         	| [$2bb6: and  $0F]
	move.b	d0,d1                           	| [$2bb8: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$2bb9: ld   a,(ix+$0f)]
	and.b	#0x0F,d0                         	| [$2bbc: and  $0F]
	cmp.b	d1,d0                            	| [$2bbe: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$2bbf: ret  nz] [...]
0:
	move.b	l_939E(a6),d0                   	| [$2bc0: ld   a,($939E)]
	                               	| [$2bc3: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$2bc4: ret  z] [...]
0:
	move.b	level_playing_flag_9000(a6),d0                   	| [$2bc5: ld   a,($9000)]
	addq.b	#1,d0                           	| [$2bc8: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2bc9: ret  nz] [...]
0:
	move.b	l_91AE(a6),d0                   	| [$2bca: ld   a,($91AE)]
	                               	| [$2bcd: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2bce: ret  nz] [...]
0:
	move.b	l_90BE(a6),d0                   	| [$2bcf: ld   a,($90BE)]
	                               	| [$2bd2: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2bd3: ret  nz] [...]
0:
	move.b	l_92AE(a6),d0                   	| [$2bd4: ld   a,($92AE)]
	move.b	d0,d1                           	| [$2bd7: ld   b,a]
	add.b	d0,d0                            	| [$2bd8: add  a,a]
	addq.b	#1,d0                           	| [$2bd9: inc  a]
	move.b	d0,d2                           	| [$2bda: ld   c,a]
	move.b	l_943C(a6),d0                   	| [$2bdb: ld   a,($943C)]
	and.b	#0x0F,d0                         	| [$2bde: and  $0F]
	cmp.b	#0x0F,d0                         	| [$2be0: cp   $0F]
	jne	l_2be9                             	| [$2be2: jr   nz,$2BE9]
	move.b	l_900D(a6),d0                   	| [$2be4: ld   a,($900D)]
	jra	l_2bec                             	| [$2be7: jr   $2BEC]

l_2be9:
	move.b	player_ship_angle_9001(a6),d0                   	| [$2be9: ld   a,($9001)]
l_2bec:
	sub.b	(0x03,a3),d0                     	| [$2bec: sub  (iy+$03)]
	add.b	d1,d0                            	| [$2bef: add  a,b]
	cmp.b	d2,d0                            	| [$2bf0: cp   c]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2bf1: ret  nc] [...]
0:
	move.b	l_911E(a6),d0                   	| [$2bf2: ld   a,($911E)]
	move.b	d0,d1                           	| [$2bf5: ld   b,a]
	move.b	difficulty_9444(a6),d0                   	| [$2bf6: ld   a,($9444)]
	add.b	d0,d0                            	| [$2bf9: add  a,a]
	subq.b	#0x06,d0                        	| [$2bfa: sub  $06]
	neg.b	d0                               	| [$2bfc: neg]
	add.b	d1,d0                            	| [$2bfe: add  a,b]
	move.b	(0x00,a3),d0                    	| [$2bff: ld   a,(iy+$00)]
	cmp.b	d1,d0                            	| [$2c02: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2c03: ret  c] [...]
0:
	move.b	l_908E(a6),d0                   	| [$2c04: ld   a,($908E)]
	                               	| [$2c07: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$2c08: ret  z] [...]
0:
	move.b	d0,d1                           	| [$2c09: ld   b,a]
	move.b	l_9605(a6),d0                   	| [$2c0a: ld   a,($9605)]
	cmp.b	#0x21,d0                         	| [$2c0d: cp   $21]
	jcs	l_2c1d                             	| [$2c0f: jr   c,$2C1D]
	sub.b	#0x24,d0                         	| [$2c11: sub  $24] [uncovered]
	neg.b	d0                               	| [$2c13: neg] [uncovered]
	add.b	d0,d0                            	| [$2c15: add  a,a] [uncovered]
	addq.b	#0x02,d0                        	| [$2c16: add  a,$02] [uncovered]
	move.b	d0,d2                           	| [$2c18: ld   c,a] [uncovered]
	sub.b	d1,d0                            	| [$2c19: sub  b] [uncovered]
	jcc	l_2c1d                             	| [$2c1a: jr   nc,$2C1D] [uncovered]
	move.b	d2,d1                           	| [$2c1c: ld   b,c] [uncovered]
l_2c1d:
	move.b	d1,d0                           	| [$2c1d: ld   a,b]
	lea	bullet_sprite_structures_9330(a6),a0                      	| [$2c1e: ld   hl,$9330]
	move.w	#0x0010,d3                      	| [$2c21: ld   de,$0010]
	jbsr	exx                               	| [$2c24: exx]
	lea	bullet_sprite_shadow_ram_9918(a6),a0                      	| [$2c25: ld   hl,$9918]
	move.w	#0x0004,d3                      	| [$2c28: ld   de,$0004]
	move.b	d0,d1                           	| [$2c2b: ld   b,a]
l_2c2c:
	jbsr	exx                               	| [$2c2c: exx]
	move.b	(a0),d0                         	| [$2c2d: ld   a,(hl)]
	                               	| [$2c2e: and  a]
	jeq	l_2c55                             	| [$2c2f: jr   z,$2C55]
	add.w	d3,a0                            	| [$2c31: add  hl,de]
	jbsr	exx                               	| [$2c32: exx]
	add.w	d3,a0                            	| [$2c33: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2c2c                             	| [$2c34: djnz $2C2C]
	rts                                    	| [$2c36: ret] [uncovered]

l_2c55:
	move.b	(0x03,a3),d1                    	| [$2c55: ld   b,(iy+$03)]
	move.b	(0x02,a2),d2                    	| [$2c58: ld   c,(ix+$02)]
	move.b	(0x00,a3),d3                    	| [$2c5b: ld   d,(iy+$00)]
	move.b	(0x03,a2),d4                    	| [$2c5e: ld   e,(ix+$03)]

	move.l	a2,-(sp)                        	| [$2c61: push ix]

	move.l	a3,-(sp)                        	| [$2c63: push iy]

	move.l	a0,a2                        	| [$2c65: push hl]
	                        	| [$2c66: pop  ix]
	jbsr	exx                               	| [$2c68: exx]

	move.l	a0,a3                        	| [$2c69: push hl]
	                        	| [$2c6a: pop  iy]
	jbsr	exx                               	| [$2c6c: exx]
	move.b	d1,(0x03,a3)                    	| [$2c6d: ld   (iy+$03),b]
	move.b	d2,(0x02,a2)                    	| [$2c70: ld   (ix+$02),c]
	move.b	d3,(0x00,a3)                    	| [$2c73: ld   (iy+$00),d]
	move.b	d4,(0x03,a2)                    	| [$2c76: ld   (ix+$03),e]
	move.b	l_960A(a6),d0                   	| [$2c79: ld   a,($960A)]
	add.b	d0,d0                            	| [$2c7c: add  a,a]
	LEA_ROM	0x4474,a0                          	| [$2c7d: ld   hl,$4474]
	jbsr	fetch_a0_plus_d0_0008               | [$2c80: rst  $08]
	move.b	d0,(0x08,a2)                    	| [$2c81: ld   (ix+$08),a]
	addq.w	#1,a0                           	| [$2c84: inc  hl]
	move.b	(a0),d0                         	| [$2c85: ld   a,(hl)]
	move.b	d0,(0x07,a2)                    	| [$2c86: ld   (ix+$07),a]
	move.b	(0x00,a3),d0                    	| [$2c89: ld   a,(iy+$00)]
	move.b	#0x28,d5                        	| [$2c8c: ld   h,$28]
	sub.b	d5,d0                            	| [$2c8e: sub  h]
	move.b	d0,d5                           	| [$2c8f: ld   h,a]
	move.b	(0x03,a2),d6                    	| [$2c90: ld   l,(ix+$03)]
	LOAD_D5_16_FROM_D5D6
	move.w	d5,d3                           	| [$2c93: ld   d,h]
	* optimized 16 bit shift					| [$2c94: ld   e,l]
	lsr.w	#2,d3                            	| [$2c95: srl  d]
												| [$2c97: rr   e]
												| [$2c99: srl  d]
												| [$2c9b: rr   e]
												| [$2c9d: and  a]
	sub.w	d3,d5                            	| [$2c9e: sbc  hl,de]
	move.b	l_943C(a6),d0                   	| [$2ca0: ld   a,($943C)]
	and.b	#0x0F,d0                         	| [$2ca3: and  $0F]
	cmp.b	#0x0F,d0                         	| [$2ca5: cp   $0F]
	jne	l_2cae                             	| [$2ca7: jr   nz,$2CAE]
	move.b	l_900D(a6),d0                   	| [$2ca9: ld   a,($900D)]
	jra	l_2cb1                             	| [$2cac: jr   $2CB1]

l_2cae:
	move.b	player_ship_angle_9001(a6),d0                   	| [$2cae: ld   a,($9001)]
l_2cb1:
	move.b	d0,d1                           	| [$2cb1: ld   b,a]
	sub.b	(0x03,a3),d0                     	| [$2cb2: sub  (iy+$03)]
	addq.b	#0x03,d0                        	| [$2cb5: add  a,$03]
	cmp.b	#0x07,d0                         	| [$2cb7: cp   $07]
	jcs	l_2d14                             	| [$2cb9: jr   c,$2D14]
	move.b	d1,d0                           	| [$2cbb: ld   a,b]
	move.b	#0x01,d1                        	| [$2cbc: ld   b,$01]
	move.b	(displayed_x_03,a3),d3              | [$2cbe: ld   d,(iy+$03)]
	clr.b	d4                               	| [$2cc1: ld   e,$00]
	sub.b	d3,d0                            	| [$2cc3: sub  d]
	cmp.b	#0x80,d0                         	| [$2cc4: cp   $80]
	jcs	l_2ccc                             	| [$2cc6: jr   c,$2CCC]
	neg.b	d0                               	| [$2cc8: neg]
	st.b	d1                                	| [$2cca: ld   b,$FF]
l_2ccc:
	move.b	d1,(0x04,a2)                    	| [$2ccc: ld   (ix+$04),b]
	move.b	d0,d3                           	| [$2ccf: ld   d,a]
	clr.b	d0                               	| [$2cd0: xor  a]
	LOAD_D3_16_FROM_D3D4                        | [$2c9d: and  a]
l_2cd1:
	addq.b	#1,d0                           	| [$2cd3: inc  a]
	sub.w	d3,d5                            	| [$2cd1: sbc  hl,de]
	jcc	l_2cd1                             	| [$2cd4: jr   nc,$2CD1]
	move.b	d0,(0x05,a2)                    	| [$2cd6: ld   (ix+$05),a]
	move.b	d0,(0x09,a2)                    	| [$2cd9: ld   (ix+$09),a]
	add.w	d5,d5                            	| [$2cdc: add  hl,hl]
	add.w	d5,d5                            	| [$2cdd: add  hl,hl]
	add.w	d5,d5                            	| [$2cde: add  hl,hl]
	add.w	d5,d5                            	| [$2cdf: add  hl,hl]
	clr.b	d0                               	| [$2ce0: xor  a]
l_2ce1:
	addq.b	#1,d0                           	| [$2ce3: inc  a]
	sub.w	d3,d5                            	| [$2ce1: sbc  hl,de]
	jcc	l_2ce1                             	    | [$2ce4: jr   nc,$2CE1]
	move.b	d0,(0x06,a2)                    	| [$2ce6: ld   (ix+$06),a]
	move.b	d0,(0x0a,a2)                    	| [$2ce9: ld   (ix+$0a),a]
	move.b	l_905E(a6),d0                   	| [$2cec: ld   a,($905E)]
	move.b	d0,d1                           	| [$2cef: ld   b,a]
	move.b	difficulty_9444(a6),d0              | [$2cf0: ld   a,($9444)]
	add.b	d0,d0                            	| [$2cf3: add  a,a]
	subq.b	#0x06,d0                        	| [$2cf4: sub  $06]
	neg.b	d0                               	| [$2cf6: neg]
	add.b	d1,d0                            	| [$2cf8: add  a,b]
	move.b	d0,l_90BE(a6)                   	| [$2cf9: ld   ($90BE),a]
l_2cfc:
	move.b	#0xFF,(0x00,a2)                 	| [$2cfc: ld   (ix+$00),$FF]
	move.b	#0xC0,(0x01,a2)                 	| [$2d00: ld   (ix+$01),$C0]
	jbsr	l_3155                            	| [$2d04: call $3155]
	move.l	(sp)+,a3                        	| [$2d07: pop  iy]
	move.l	(sp)+,a2                        	| [$2d09: pop  ix]
	move.b	(displayed_y_00,a3),d0                    	| [$2d0b: ld   a,(iy+$00)]
	cmp.b	#0x90,d0                         	| [$2d0e: cp   $90]
	jcs	l_5cac                             	| [$2d10: jp   c,$5CAC]
	rts                                    	| [$2d13: ret]

l_2d14:
	clr.b	(0x05,a2)                        	| [$2d14: ld   (ix+$05),$00]
	jra	l_2cfc                             	| [$2d18: jr   $2CFC]

l_2d1a:
	move.b	general_fast_timer_9400(a6),d0                   	| [$2d1a: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$2d1d: and  $07]
	move.b	d0,d1                           	| [$2d1f: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$2d20: ld   a,(ix+$0f)]
	and.b	#0x07,d0                         	| [$2d23: and  $07]
	cmp.b	d1,d0                            	| [$2d25: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$2d26: ret  nz] [...]
0:
	move.b	(displayed_x_03,a3),d0                    	| [$2d27: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$2d2a: add  a,$08]
	rol.b	#2,d0                            	| [$2d2c: rlca] * 2
	move.b	d0,d2                           	| [$2d2e: ld   c,a]
	and.b	#0x03,d0                         	| [$2d2f: and  $03]
	LEA_ROM	0x321F,a0                          	| [$2d31: ld   hl,$321F]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2d34: rst  $08]
	move.b	d0,(sprite_code_02,a3)                    	| [$2d35: ld   (iy+$02),a]
	move.b	(displayed_y_00,a3),d0                    	| [$2d38: ld   a,(iy+$00)]
	rol.b	#3,d0                            	| [$2d3b: rlca] * 3
	and.b	#0x07,d0                         	| [$2d3e: and  $07]
	LEA_ROM	0x320D,a0                          	| [$2d40: ld   hl,$320D]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$2d43: rst  $10]
	move.b	d2,d0                           	| [$2d44: ld   a,c]
	rol.b	#2,d0                            	| [$2d45: rlca] * 2
	and.b	#0x07,d0                         	| [$2d47: and  $07]
	exg	a1,a0                              	| [$2d49: ex   de,hl]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2d4a: rst  $08]
	move.b	d0,(sprite_code_01,a3)                    	| [$2d4b: ld   (iy+$01),a]
	rts                                    	| [$2d4e: ret]

l_2d5c:
	move.b	general_fast_timer_9400(a6),d0                   	| [$2d5c: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$2d5f: and  $07]
	move.b	d0,d1                           	| [$2d61: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$2d62: ld   a,(ix+$0f)]
	and.b	#0x07,d0                         	| [$2d65: and  $07]
	cmp.b	d1,d0                            	| [$2d67: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$2d68: ret  nz] [...]
0:
	move.b	(0x01,a2),d0                    	| [$2d69: ld   a,(ix+$01)]
	cmp.b	#0x80,d0                         	| [$2d6c: cp   $80]
	jcs	l_2d8e                             	| [$2d6e: jr   c,$2D8E]
	move.b	(displayed_y_00,a3),d0                    	| [$2d70: ld   a,(iy+$00)]
	ror.b	#4,d0                            	| [$2d73: rrca] * 4
	and.b	#0x0F,d0                         	| [$2d77: and  $0F]
	LEA_ROM	0x31E1,a0                          	| [$2d79: ld   hl,$31E1]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$2d7c: rst  $10]
	exg	a1,a0                              	| [$2d7d: ex   de,hl]
	jra	l_2db4                             	| [$2d7e: jp   $2DB4]

l_2d81:
	move.b	general_fast_timer_9400(a6),d0                   	| [$2d81: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$2d84: and  $07]
	move.b	d0,d1                           	| [$2d86: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$2d87: ld   a,(ix+$0f)]
	and.b	#0x07,d0                         	| [$2d8a: and  $07]
	cmp.b	d1,d0                            	| [$2d8c: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$2d8d: ret  nz] [...]
0:
l_2d8e:
	move.b	(displayed_y_00,a3),d0                    	| [$2d8e: ld   a,(iy+$00)]
	ror.b	#4,d0                            	| [$2d91: rrca] * 4
	and.b	#0x0F,d0                         	| [$2d95: and  $0F]
	LEA_ROM	0x3B51,a0                          	| [$2d97: ld   hl,$3B51]
	jbsr	load_rom_pointer_in_a1_d3_0010      | [$2d9a: rst  $10]
	move.l	a1,-(sp)                        	| [$2d9b: push de]
	moveq	#0,d0
	move.b	(0x01,a2),d0                    	| [$2d9c: ld   a,(ix+$01)]
	add.b	#0x08,d0                         	| [$2d9f: add  a,$08]
	ror.b	#4,d0                            	| [$2da1: rrca] * 4
	and.b	#0x0E,d0                         	| [$2da5: and  $0E]
	LEA_ROM	0x3B71,a0                          	| [$2da7: ld   hl,$3B71]
	add.w	d0,a0                           	| [$2daa: add  a,l]
	                           	| [$2dab: ld   l,a]
	                          	| [$2dac: jr   nc,$2DAF]
	                           	| [$2dae: inc  h] [uncovered]
l_2daf:
	move.b	(a0)+,d4                         	| [$2daf: ld   e,(hl)]
	                           	| [$2db0: inc  hl]
	move.b	(a0),d3                         	| [$2db1: ld   d,(hl)]
	move.l	(sp)+,a0                        	| [$2db2: pop  hl]
	LOAD_D3_16_FROM_D3D4
	add.w	d3,a0                            	| [$2db3: add  hl,de]
l_2db4:
	move.b	(displayed_x_03,a3),d0                    	| [$2db4: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$2db7: add  a,$08]
	move.b	d0,d2                           	| [$2db9: ld   c,a]
	rol.b	#4,d0                            	| [$2dba: rlca] * 4
	and.b	#0x07,d0                         	| [$2dbe: and  $07]
	move.b	d0,d1                           	| [$2dc0: ld   b,a]
	add.b	d0,d0                            	| [$2dc1: add  a,a]
	add.b	d1,d0                            	| [$2dc2: add  a,b]
	ADD_D0_TO_A0_0018                            	| [$2dc3: rst  $18]
	move.b	d2,d0                           	| [$2dc4: ld   a,c]
	cmp.b	#0x80,d0                         	| [$2dc5: cp   $80]
	jcc	l_2dea                             	| [$2dc7: jp   nc,$2DEA]
	* double height sprite
	move.b	(a0)+,d0                         	| [$2dca: ld   a,(hl)]
	move.b	d0,(sprite_code_01,a3)                    	| [$2dcb: ld   (iy+$01),a]
												| [$2dce: inc  hl]
	move.b	(a0)+,d0                         	| [$2dcf: ld   a,(hl)]
	move.b	d0,(sprite_code_01+4,a3)                    	| [$2dd0: ld   (iy+$05),a]
												| [$2dd3: inc  hl]
	move.b	(a0),d0                         	| [$2dd4: ld   a,(hl)]
	move.b	d0,d1                           	| [$2dd5: ld   b,a]
	move.b	(0x09,a2),d0                    	| [$2dd6: ld   a,(ix+$09)]
	ror.b	#2,d0                            	| [$2dd9: rrca] * 2
	and.b	#0x0F,d0                         	| [$2ddb: and  $0F]
	LEA_ROM	0x3201,a0                          	| [$2ddd: ld   hl,$3201]
	ADD_D0_TO_A0_0018                            	| [$2de0: rst  $18]
	move.b	d1,d0                           	| [$2de1: ld   a,b]
	add.b	(a0),d0                          	| [$2de2: add  a,(hl)]
	move.b	d0,(sprite_code_02,a3)                    	| [$2de3: ld   (iy+$02),a]
	move.b	d0,(sprite_code_02+4,a3)                    	| [$2de6: ld   (iy+$06),a]
	rts                                    	| [$2de9: ret]

l_2dea:
	move.b	(a0)+,d0                         	| [$2dea: ld   a,(hl)]
	move.b	d0,(sprite_code_01+4,a3)                    	| [$2deb: ld   (iy+$05),a]
	                           	| [$2dee: inc  hl]
	move.b	(a0)+,d0                         	| [$2def: ld   a,(hl)]
	move.b	d0,(sprite_code_01,a3)                    	| [$2df0: ld   (iy+$01),a]
	                           	| [$2df3: inc  hl]
	move.b	(a0),d0                         	| [$2df4: ld   a,(hl)]
	eor.b	#0xC0,d0                         	| [$2df5: xor  $C0]
	move.b	d0,d1                           	| [$2df7: ld   b,a]
	move.b	(0x09,a2),d0                    	| [$2df8: ld   a,(ix+$09)]
	ror.b	#2,d0                            	| [$2dfb: rrca] * 2
	and.b	#0x0F,d0                         	| [$2dfd: and  $0F]
	LEA_ROM	0x3201,a0                          	| [$2dff: ld   hl,$3201]
	ADD_D0_TO_A0_0018                            	| [$2e02: rst  $18]
	move.b	d1,d0                           	| [$2e03: ld   a,b]
	add.b	(a0),d0                          	| [$2e04: add  a,(hl)]
	move.b	d0,(sprite_code_02,a3)                    	| [$2e05: ld   (iy+$02),a]
	move.b	d0,(sprite_code_02+4,a3)                    	| [$2e08: ld   (iy+$06),a]
	rts                                    	| [$2e0b: ret]

l_2e0c:
	jbsr	l_2fd9                            	| [$2e0c: call $2FD9]
	rts                                    	| [$2e0f: ret]

l_2e10:
	jbsr	l_590e                            	| [$2e10: call $590E]
	jbsr	update_starfield_in_game_3804                            	| [$2e13: call $3804]
	jbsr	move_player_ship_1857                            	| [$2e16: call $1857]
	jbsr	update_player_shots_1f30                            	| [$2e19: call $1F30]
	jbsr	l_22f3                            	| [$2e1c: call $22F3]
	lea	distance_to_center_9465(a6),a0                      	| [$2e1f: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$2e22: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$2e23: ret  nz] [...]
0:
	lea	l_918E(a6),a0                      	| [$2e24: ld   hl,$918E]
	move.b	#0x02,(a0)                      	| [$2e27: ld   (hl),$02]
	jbsr	l_2e5d                            	| [$2e29: call $2E5D]
* ROM checksum
*	LEA_ROM	0x1550,a0                          	| [$2e2c: ld   hl,$1550]
*	clr.b	d1                               	| [$2e2f: ld   b,$00]
*	CLEAR_XC_FLAGS                         	| [$2e31: xor  a]
*	clr.b	d0                               	| [$2e31: xor  a]
*l_2e32:
*	add.b	(a0)+,d0                          	| [$2e32: add  a,(hl)]
*	                           	| [$2e33: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_2e32                             	| [$2e34: djnz $2E32]
*	sub.b	#0x8C,d0                         	| [$2e36: sub  $8C]
*	jne	l_cc0000                             	| [$2e38: jp   nz,$0000]
	clr.b	d0                               	| [$2e3b: xor  a]
	move.b	d0,l_93AD(a6)                   	| [$2e3c: ld   ($93AD),a]
	move.b	d0,l_924E(a6)                   	| [$2e3f: ld   ($924E),a]
	move.b	d0,death_ray_sattelites_active_92BE(a6)                   	| [$2e42: ld   ($92BE),a]
	move.b	d0,l_931E(a6)                   	| [$2e45: ld   ($931E),a]
	move.b	d0,seconds_since_last_respawn_935e(a6)                   	| [$2e48: ld   ($935E),a]
	move.b	d0,enemy_flees_flag_91ee(a6)                   	| [$2e4b: ld   ($91EE),a]
	move.b	d0,l_935D(a6)                   	| [$2e4e: ld   ($935D),a]
	move.b	d0,l_960E(a6)                   	| [$2e51: ld   ($960E),a]
	move.b	d0,l_903E(a6)                   	| [$2e54: ld   ($903E),a]
	move.b	d0,l_9478(a6)                   	| [$2e57: ld   ($9478),a]
	jra	next_game_state_080b                             	| [$2e5a: jp   $080B]

l_2e5d:
	lea	l_900E(a6),a0                      	| [$2e5d: ld   hl,$900E]
	clr.b	(a0)                             	| [$2e60: ld   (hl),$00]
	move.b	l_9601(a6),d0                   	| [$2e62: ld   a,($9601)]
	                               	| [$2e65: and  a]
	jne	l_2e69                             	| [$2e66: jr   nz,$2E69]
	addq.b	#1,(a0)                         	| [$2e68: inc  (hl)]
l_2e69:
	jra	l_4171                             	| [$2e69: jp   $4171]

l_2e6c:
	clr.b	d2                               	| [$2e6c: ld   c,$00]
	jbsr	l_3060                            	| [$2e6e: call $3060]
	rts                                    	| [$2e71: ret]

l_2e72:
	jbsr	l_2f06                            	| [$2e72: call $2F06]
	rts                                    	| [$2e75: ret]
l_2e76:
	jbsr	l_2f06                            	| [$2e76: call $2F06]
	addq.b	#1,(0x02,a3)                    	| [$2e79: inc  (iy+$02)]
	addq.b	#1,(0x06,a3)                    	| [$2e7c: inc  (iy+$06)]
	rts                                    	| [$2e7f: ret]

l_2e80:
	clr.b	d2                               	| [$2e80: ld   c,$00]
	jbsr	l_3060                            	| [$2e82: call $3060]
	addq.b	#1,(0x02,a3)                    	| [$2e85: inc  (iy+$02)]
	addq.b	#1,(0x06,a3)                    	| [$2e88: inc  (iy+$06)]
	rts                                    	| [$2e8b: ret]

l_2e8c:
	jra	l_2f06                             	| [$2e8c: jp   $2F06]

new_demo_game_start_2e8f:
	jbsr	clear_screen_row_0207                            	| [$2e8f: call $0207]
	beq.b	0f                               	| [...]
	rts                                    	| [$2e92: ret  nz] [...]
0:
	jbsr	l_5c82                            	| [$2e93: call $5C82]
	* clear RAM
	lea	level_playing_flag_9000(a6),a0                      	| [$2e96: ld   hl,$9000]
	lea	player_ship_angle_9001(a6),a1                      	| [$2e99: ld   de,$9001]
	move.w	#0x03AF,d1                          	| [$2e9c: ld   bc,$03AF]
	clr.b	(a0)                             	| [$2e9f: ld   (hl),$00]
	jbsr	ldir                              	| [$2ea1: ldir]
	jbsr	l_0ecb                            	| [$2ea3: call $0ECB]
	* clear the player data
	lea	lives_9600(a6),a0                  	| [$2ea6: ld   hl,lives_9600]
	lea	lives_9600+1(a6),a1                      	| [$2ea9: ld   de,$9601]
	move.w	#0x001F,d1                      	| [$2eac: ld   bc,$001F]
	clr.b	(a0)                             	| [$2eaf: ld   (hl),$00]
	jbsr	ldir                              	| [$2eb1: ldir]
	clr.b	d0                               	| [$2eb3: xor  a]
	move.b	d0,general_fast_timer_9400(a6)                   	| [$2eb4: ld   ($9400),a]
	move.b	d0,l_9476(a6)                   	| [$2eb7: ld   ($9476),a]
	move.b	d0,l_9475(a6)                   	| [$2eba: ld   ($9475),a]
	move.b	d0,l_9478(a6)                   	| [$2ebd: ld   ($9478),a]
	move.b	d0,l_923E(a6)                   	| [$2ec0: ld   ($923E),a]
	jbsr	l_172e                            	| [$2ec3: call $172E]
	move.b	#1,d0                       		| [$2ec6: ld   a,($09D6)]
	move.b	d0,lives_9600(a6)               	| [$2ec9: ld   (lives_9600),a]
	move.b	d0,l_929E(a6)                   	| [$2ecc: ld   ($929E),a]
	move.b	#0x24,d0                        	| [$2ecf: ld   a,$24]
	move.b	d0,l_9601(a6)                   	| [$2ed1: ld   ($9601),a]
	move.b	d0,l_9605(a6)                   	| [$2ed4: ld   ($9605),a]
	lea	l_9450(a6),a0                      	| [$2ed7: ld   hl,$9450]
	addq.b	#1,(a0)                         	| [$2eda: inc  (hl)]
	move.b	(a0),d0                         	| [$2edb: ld   a,(hl)]
	and.b	#0x01,d0                         	| [$2edc: and  $01]
	add.b	d0,d0                            	| [$2ede: add  a,a]
	add.b	d0,d0                            	| [$2edf: add  a,a]
	move.b	d0,l_960A(a6)                   	| [$2ee0: ld   ($960A),a]
	add.b	d0,d0                            	| [$2ee3: add  a,a]
	* demo mode sets proper stage number AND stage itself
	move.b	d0,current_stage_number_9609(a6)    | [$2ee4: ld   (current_stage_number_9609),a]
	move.b	d0,current_stage_960B(a6)           | [$2ee7: ld   ($960B),a]
	                               	| [$2eea: xor  a]
	clr.b	l_9476(a6)                   	| [$2eeb: ld   ($9476),a]
	clr.b	update_sequence_control_flag_a7fd(a6) 	| [$2eee: ld   ($A7FD),a]
	* fix difficulty so demo sequence won't go off rails!
	move.b	#0x03,d0                        	| [$2ef1: ld   a,$03]
	move.b	d0,difficulty_9444(a6)                   	| [$2ef3: ld   ($9444),a]
	jbsr	l_4171                            	| [$2ef6: call $4171]
	READ_ROM_BYTE	0x06D7,d0                       	| [$2ef9: ld   a,($06D7)]
	move.b	d0,sub_state_942C(a6)                   	| [$2efc: ld   ($942C),a]
	READ_ROM_BYTE	0x4421,d0                       	| [$2eff: ld   a,($4421)]
	move.b	d0,global_state_942B(a6)                   	| [$2f02: ld   ($942B),a]
	rts                                    	| [$2f05: ret]


l_2f06:
	move.b	(0x00,a3),d0                    	| [$2f06: ld   a,(iy+$00)]
	subq.b	#0x04,d0                        	| [$2f09: sub  $04]
	cmp.b	#0xF8,d0                         	| [$2f0b: cp   $F8]
	jcc	l_2fff                             	| [$2f0d: jp   nc,$2FFF]
	ror.b	#2,d0                            	| [$2f10: rrca] * 2
	and.b	#0x30,d0                         	| [$2f12: and  $30]
	move.b	d0,d1                           	| [$2f14: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$2f15: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$2f18: add  a,$08]
	move.b	d0,d2                           	| [$2f1a: ld   c,a]
	ror.b	#3,d0                            	| [$2f1b: rrca] * 3
	and.b	#0x0E,d0                         	| [$2f1e: and  $0E]
	add.b	d1,d0                            	| [$2f20: add  a,b]
	LEA_ROM	0x2F54,a0                          	| [$2f21: ld   hl,$2F54]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2f24: rst  $08]


update_player_ship_fading_away_2f25:
	btst.b	#7,d2                           	| [$2f25: bit  7,c]
	jne	l_2f39                             	| [$2f27: jr   nz,$2F39]
	move.b	d0,(sprite_code_01,a3)                    	| [$2f29: ld   (iy+$01),a]
	addq.b	#1,d0                           	| [$2f2c: inc  a]
	move.b	d0,(sprite_code_01+4,a3)                    	| [$2f2d: ld   (iy+$05),a]
	addq.w	#1,a0                           	| [$2f30: inc  hl]
	move.b	(a0),d0                         	| [$2f31: ld   a,(hl)]
	move.b	d0,(sprite_code_02,a3)                    	| [$2f32: ld   (iy+$02),a]
	move.b	d0,(sprite_code_02+4,a3)                    	| [$2f35: ld   (iy+$06),a]
	rts                                    	| [$2f38: ret]

l_2f39:
	move.b	d0,(sprite_code_01+4,a3)                    	| [$2f39: ld   (iy+$05),a]
	addq.b	#1,d0                           	| [$2f3c: inc  a]
	move.b	d0,(sprite_code_01,a3)                    	| [$2f3d: ld   (iy+$01),a]
	addq.w	#1,a0                           	| [$2f40: inc  hl]
	move.b	(a0),d0                         	| [$2f41: ld   a,(hl)]
	eor.b	#0xC0,d0                         	| [$2f42: xor  $C0]
	move.b	d0,(sprite_code_02,a3)                    	| [$2f44: ld   (iy+$02),a]
	move.b	d0,(sprite_code_02+4,a3)                    	| [$2f47: ld   (iy+$06),a]
	btst.b	#4,d0                           	| [$2f4a: bit  4,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2f4c: ret  nz] [...]
0:
	move.b	(sprite_code_01+4,a3),d0                    	| [$2f4d: ld   a,(iy+$05)] [uncovered]
	move.b	d0,(sprite_code_01,a3)                    	| [$2f50: ld   (iy+$01),a] [uncovered]
	rts                                    	| [$2f53: ret] [uncovered]

update_player_ship_fading_away_2f94:
	move.b	(displayed_y_00,a3),d0                    	| [$2f94: ld   a,(iy+$00)]
	rol.b	#3,d0                            	| [$2f97: rlca] * 3
	and.b	#0x07,d0                         	| [$2f9a: and  $07]
	LEA_ROM	0x2FB0,a0                          	| [$2f9c: ld   hl,$2FB0]
	jbsr	load_rom_pointer_in_a1_d3_0010      | [$2f9f: rst  $10]
	move.b	(displayed_x_03,a3),d0             	| [$2fa0: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$2fa3: add  a,$08]
	move.b	d0,d2                           	| [$2fa5: ld   c,a]
	ror.b	#3,d0                            	| [$2fa6: rrca] * 3
	and.b	#0x0E,d0                         	| [$2fa9: and  $0E]
	exg	a1,a0                              	| [$2fab: ex   de,hl]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2fac: rst  $08]
	jra	update_player_ship_fading_away_2f25                             	| [$2fad: jp   $2F25]

l_2fd9:
	move.b	(displayed_y_00,a3),d0                    	| [$2fd9: ld   a,(iy+$00)]
	addq.b	#0x04,d0                        	| [$2fdc: add  a,$04]
	cmp.b	#0x09,d0                         	| [$2fde: cp   $09]
	jcs	l_2fff                             	| [$2fe0: jp   c,$2FFF]
	move.b	general_fast_timer_9400(a6),d0                   	| [$2fe3: ld   a,($9400)]
	LEA_ROM	0x1116,a0                          	| [$2fe6: ld   hl,$1116]
	btst.b	#1,d0                           	| [$2fe9: bit  1,a]
	jeq	l_2ff0                             	| [$2feb: jr   z,$2FF0]
	LEA_ROM	0x1126,a0                          	| [$2fed: ld   hl,$1126]
l_2ff0:
	move.b	(displayed_x_03,a3),d0                    	| [$2ff0: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$2ff3: add  a,$08]
	move.b	d0,d2                           	| [$2ff5: ld   c,a]
	ror.b	#3,d0                            	| [$2ff6: rrca] * 3
	and.b	#0x0E,d0                         	| [$2ff9: and  $0E]
	jbsr	fetch_a0_plus_d0_0008                            	| [$2ffb: rst  $08]
	jra	update_player_ship_fading_away_2f25                             	| [$2ffc: jp   $2F25]

l_2fff:
	clr.b	(sprite_code_01,a3)                        	| [$2fff: ld   (iy+$01),$00]
	clr.b	(sprite_code_01+4,a3)                        	| [$3003: ld   (iy+$05),$00]
	clr.b	(sprite_code_02,a3)                        	| [$3007: ld   (iy+$02),$00]
	clr.b	(sprite_code_02+4,a3)                        	| [$300b: ld   (iy+$06),$00]
	rts                                    	| [$300f: ret]

clear_sprite_mem_blocks_3010:
	lea	sprite_shadow_ram_9800(a6),a0      	| [$3010: ld   hl,sprite_shadow_ram_9800]
	lea	l_9801(a6),a1                      	| [$3013: ld   de,$9801]
	move.w	#0x07FF,d1                          	| [$3016: ld   bc,$07FF]
	clr.b	(a0)                             	| [$3019: ld   (hl),$00]
	jbsr	ldir                              	| [$301b: ldir]
                       	| [$301d: ld   (watchdog_C000),a]
	jra	clear_sprites_05d7                             	| [$3020: jp   $05D7]

l_304b:
	jbsr	l_3055                            	| [$304b: call $3055]
	addq.b	#1,(sprite_code_02,a3)                    	| [$304e: inc  (iy+$02)]
	addq.b	#1,(sprite_code_02+4,a3)                    	| [$3051: inc  (iy+$06)]
	rts                                    	| [$3054: ret]

l_3055:
	move.b	general_fast_timer_9400(a6),d0                   	| [$3055: ld   a,($9400)]
	clr.b	d2                               	| [$3058: ld   c,$00]
	btst.b	#3,d0                           	| [$305a: bit  3,a]
	jne	l_3060                             	| [$305c: jr   nz,$3060]
	move.b	#0x0A,d2                        	| [$305e: ld   c,$0A]
l_3060:
	move.b	(0x00,a3),d0                    	| [$3060: ld   a,(iy+$00)]
	addq.b	#0x04,d0                        	| [$3063: add  a,$04]
	cmp.b	#0x09,d0                         	| [$3065: cp   $09]
	jcs	l_2fff                             	| [$3067: jp   c,$2FFF]
	move.b	(0x03,a3),d0                    	| [$306a: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$306d: add  a,$08]
	move.b	d0,d1                           	| [$306f: ld   b,a]
	ror.b	#3,d0                            	| [$3070: rrca] * 3
	and.b	#0x0E,d0                         	| [$3073: and  $0E]
	LEA_ROM	0x30A1,a0                          	| [$3075: ld   hl,$30A1]
	jbsr	fetch_a0_plus_d0_0008                            	| [$3078: rst  $08]
	btst.b	#7,d1                           	| [$3079: bit  7,b]
	jne	l_308e                             	| [$307b: jr   nz,$308E]
	add.b	d2,d0                            	| [$307d: add  a,c]
	move.b	d0,(0x01,a3)                    	| [$307e: ld   (iy+$01),a]
	addq.b	#1,d0                           	| [$3081: inc  a]
	move.b	d0,(0x05,a3)                    	| [$3082: ld   (iy+$05),a]
	addq.w	#1,a0                           	| [$3085: inc  hl]
	move.b	(a0),d0                         	| [$3086: ld   a,(hl)]
	move.b	d0,(0x02,a3)                    	| [$3087: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$308a: ld   (iy+$06),a]
	rts                                    	| [$308d: ret]

l_308e:
	add.b	d2,d0                            	| [$308e: add  a,c]
	move.b	d0,(0x05,a3)                    	| [$308f: ld   (iy+$05),a]
	addq.b	#1,d0                           	| [$3092: inc  a]
	move.b	d0,(0x01,a3)                    	| [$3093: ld   (iy+$01),a]
	addq.w	#1,a0                           	| [$3096: inc  hl]
	move.b	(a0),d0                         	| [$3097: ld   a,(hl)]
	eor.b	#0xC0,d0                         	| [$3098: xor  $C0]
	move.b	d0,(0x02,a3)                    	| [$309a: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$309d: ld   (iy+$06),a]
	rts                                    	| [$30a0: ret]

l_30c4:
	move.b	general_fast_timer_9400(a6),d0                   	| [$30c4: ld   a,($9400)]
	and.b	#0x06,d0                         	| [$30c7: and  $06]
	add.b	#0x78,d0                         	| [$30c9: add  a,$78]
	move.b	d0,(0x01,a3)                    	| [$30cb: ld   (iy+$01),a]
	addq.b	#1,d0                           	| [$30ce: inc  a]
	move.b	d0,(0x05,a3)                    	| [$30cf: ld   (iy+$05),a]
	move.b	#0xF8,(0x02,a3)                 	| [$30d2: ld   (iy+$02),$F8]
	move.b	#0xF8,(0x06,a3)                 	| [$30d6: ld   (iy+$06),$F8]
	rts                                    	| [$30da: ret]

l_30db:
	move.b	general_fast_timer_9400(a6),d0                   	| [$30db: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$30de: and  $07]
	move.b	d0,d1                           	| [$30e0: ld   b,a]
	move.b	(0x0f,a2),d0                    	| [$30e1: ld   a,(ix+$0f)]
	and.b	#0x07,d0                         	| [$30e4: and  $07]
	cmp.b	d1,d0                            	| [$30e6: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$30e7: ret  nz] [...]
0:
	move.b	(0x09,a2),d0                    	| [$30e8: ld   a,(ix+$09)]
	ror.b	#2,d0                            	| [$30eb: rrca] * 2
	and.b	#0x0F,d0                         	| [$30ed: and  $0F]
	move.b	d0,d2                           	| [$30ef: ld   c,a]
	move.b	(0x03,a3),d0                    	| [$30f0: ld   a,(iy+$03)]
	add.b	#0x08,d0                         	| [$30f3: add  a,$08]
	move.b	d0,d1                           	| [$30f5: ld   b,a]
	rol.b	#4,d0                            	| [$30f6: rlca] * 4
	and.b	#0x07,d0                         	| [$30fa: and  $07]
	move.b	d0,d3                           	| [$30fc: ld   d,a]
	add.b	d0,d0                            	| [$30fd: add  a,a]
	add.b	d3,d0                            	| [$30fe: add  a,d]
	LEA_ROM	0x3D31,a0                          	| [$30ff: ld   hl,$3D31]
	jbsr	fetch_a0_plus_d0_0008                            	| [$3102: rst  $08]
	move.b	d0,(0x01,a3)                    	| [$3103: ld   (iy+$01),a]
	addq.w	#2,a0                           	| [$3106: inc  hl] * 2
	move.b	(a0),d3                         	| [$3108: ld   d,(hl)]
	btst.b	#7,d1                           	| [$3109: bit  7,b]
	jeq	l_3111                             	| [$310b: jr   z,$3111]
	move.b	d3,d0                           	| [$310d: ld   a,d]
	eor.b	#0xC0,d0                         	| [$310e: xor  $C0]
	move.b	d0,d3                           	| [$3110: ld   d,a]
l_3111:
	move.b	d2,d0                           	| [$3111: ld   a,c]
	LEA_ROM	0x3201,a0                          	| [$3112: ld   hl,$3201]
	jbsr	fetch_a0_plus_d0_0008                            	| [$3115: rst  $08]
	add.b	d3,d0                            	| [$3116: add  a,d]
	move.b	d0,(0x02,a3)                    	| [$3117: ld   (iy+$02),a]
	rts                                    	| [$311a: ret]

l_311b:
	move.b	(0x00,a3),d0                    	| [$311b: ld   a,(iy+$00)]
	LEA_ROM	0x3199,a0                          	| [$311e: ld   hl,$3199]
	ror.b	#4,d0                            	| [$3121: rrca] * 4
	and.b	#0x0F,d0                         	| [$3125: and  $0F]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$3127: rst  $10]
	exg	a1,a0                              	| [$3128: ex   de,hl]
	moveq	#0,d0
	move.b	(0x00,a2),d0                    	| [$3129: ld   a,(ix+$00)]
	ror.b	#3,d0                            	| [$312c: rrca] * 3
	and.b	#0x06,d0                         	| [$312f: and  $06]
	add.w	d0,a0                            	| [$3131: add  a,l]

	                         	| [$3132: ld   l,a]
	                        	| [$3133: jr   nc,$3136]
	                         	| [$3135: inc  h] [uncovered]
l_3136:
	move.b	(a0)+,d0                         	| [$3136: ld   a,(hl)]
	move.b	d0,(0x01,a3)                    	| [$3137: ld   (iy+$01),a]
	move.b	d0,d1                           	| [$313a: ld   b,a]
												| [$313b: inc  hl]
	move.b	(a0),d0                         	| [$313c: ld   a,(hl)]
	and.b	#0xF0,d0                         	| [$313d: and  $F0]
	move.b	d0,d2                           	| [$313f: ld   c,a]
	move.b	(0x02,a3),d0                    	| [$3140: ld   a,(iy+$02)]
	and.b	#0x0F,d0                         	| [$3143: and  $0F]
	add.b	d2,d0                            	| [$3145: add  a,c]
	move.b	d0,d2                           	| [$3146: ld   c,a]
	move.b	d2,(0x02,a3)                    	| [$3147: ld   (iy+$02),c]
	btst.b	#4,d2                           	| [$314a: bit  4,c]
	bne.b	0f                               	| [...]
	rts                                    	| [$314c: ret  z] [...]
0:
	addq.b	#1,d1                           	| [$314d: inc  b]
	move.b	d1,(0x05,a3)                    	| [$314e: ld   (iy+$05),b]
	move.b	d2,(0x06,a3)                    	| [$3151: ld   (iy+$06),c]
	rts                                    	| [$3154: ret]

l_3155:
	move.b	#0x08,(0x02,a3)                 	| [$3155: ld   (iy+$02),$08]
	move.b	general_fast_timer_9400(a6),d0                   	| [$3159: ld   a,($9400)]
	ror.b	#3,d0                            	| [$315c: rrca] * 3
	and.b	#0x01,d0                         	| [$315f: and  $01]
	move.b	d0,d2                           	| [$3161: ld   c,a]
	move.b	(0x00,a3),d0                    	| [$3162: ld   a,(iy+$00)]
	rol.b	#2,d0                            	| [$3165: rlca] * 2
	and.b	#0x03,d0                         	| [$3167: and  $03]
	add.b	d0,d0                            	| [$3169: add  a,a]
	add.b	#0x3E,d0                         	| [$316a: add  a,$3E]
	add.b	d2,d0                            	| [$316c: add  a,c]
	move.b	d0,(0x01,a3)                    	| [$316d: ld   (iy+$01),a]
	rts                                    	| [$3170: ret]

l_3171:
	move.b	l_960D(a6),d0                   	| [$3171: ld   a,($960D)]
	and.b	#0x01,d0                         	| [$3174: and  $01]
	jeq	l_2d81                             	| [$3176: jp   z,$2D81]
	move.b	current_stage_960B(a6),d0                   	| [$3179: ld   a,($960B)]
	ror.b	#2,d0                            	| [$317c: rrca] * 2
	and.b	#0x1F,d0                         	| [$317e: and  $1F]
	jbsr	jump_table_jump_0030                            	| [$3180: rst  $30]
* [jump_table]
	.long	l_2e0c
	.long	l_2e6c
	.long	l_2e72
	.long	l_2e76
	.long	l_2e80
	.long	l_2e8c

l_324b:
	move.b	level_playing_flag_9000(a6),d0                   	| [$324b: ld   a,($9000)]
	addq.b	#1,d0                           	| [$324e: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$324f: ret  nz] [...]
0:
	* level is playing
	move.b	l_9601(a6),d0                   	| [$3250: ld   a,($9601)]
	                               	| [$3253: and  a]
	jne	l_3530                             	| [$3254: jp   nz,$3530]
	move.b	l_9605(a6),d0                   	| [$3257: ld   a,($9605)]
	                               	| [$325a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$325b: ret  z] [...]
0:
	move.b	l_924E(a6),d0                   	| [$325c: ld   a,($924E)]
	                               	| [$325f: and  a]
	jne	l_3481                             	| [$3260: jp   nz,$3481]
	move.b	l_91DE(a6),d0                   	| [$3263: ld   a,($91DE)]
	move.b	d0,d1                           	| [$3266: ld   b,a]
	move.b	l_913E(a6),d0                   	| [$3267: ld   a,($913E)]
	sub.b	d1,d0                            	| [$326a: sub  b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$326b: ret  nc] [...]
0:
	move.b	l_921E(a6),d0                   	| [$326c: ld   a,($921E)]
	                               	| [$326f: and  a]
	jne	l_3280                             	| [$3270: jr   nz,$3280]
	move.b	l_90FE(a6),d0                   	| [$3272: ld   a,($90FE)]
	                               	| [$3275: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3276: ret  nz] [...]
0:
	move.b	attack_frequency_912e(a6),d0                   	| [$3277: ld   a,($912E)]
	                               	| [$327a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$327b: ret  z] [...]
0:
	move.b	d0,l_921E(a6)                   	| [$327c: ld   ($921E),a]
	rts                                    	| [$327f: ret]

l_3280:
	lea	l_916E(a6),a0                      	| [$3280: ld   hl,$916E]
	move.b	(a0),d0                         	| [$3283: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$3284: inc  (hl)]
	and.b	#0x07,d0                         	| [$3285: and  $07]
	add.b	d0,d0                            	| [$3287: add  a,a]
	add.b	d0,d0                            	| [$3288: add  a,a]
	LEA_ROM	0x336D,a0                          	| [$3289: ld   hl,$336D]
	ADD_D0_TO_A0_0018                            	| [$328c: rst  $18]
	move.b	(a0)+,d4                         	| [$328d: ld   e,(hl)]
	                           	| [$328e: inc  hl]
	move.b	(a0)+,d3                         	| [$328f: ld   d,(hl)]
	LOAD_A1_FROM_D3D4_RAM
	move.l	a1,-(sp)                        	| [$3290: push de]
											| [$3291: inc  hl]
	move.b	(a0)+,d4                         	| [$3292: ld   e,(hl)]
	                           	| [$3293: inc  hl]
	move.b	(a0),d3                         	| [$3294: ld   d,(hl)]
	LOAD_A1_FROM_D3D4_RAM
	exg	a1,a0                              	| [$3295: ex   de,hl]
	move.w	#0x0010,d3                      	| [$3296: ld   de,$0010]
	jbsr	exx                               	| [$3299: exx]
	move.l	(sp)+,a0                        	| [$329a: pop  hl]
	move.w	#0x0004,d3                      	| [$329b: ld   de,$0004]
	move.b	#0x05,d1                        	| [$329e: ld   b,$05]
l_32a0:
	jbsr	exx                               	| [$32a0: exx]
	move.b	(a0),d0                         	| [$32a1: ld   a,(hl)]
	addq.b	#1,d0                           	| [$32a2: inc  a]
	jeq	start_attack_32ac                       | [$32a3: jp   z,$32AC]
	add.w	d3,a0                            	| [$32a6: add  hl,de]
	jbsr	exx                               	| [$32a7: exx]
	add.w	d3,a0                            	| [$32a8: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_32a0                             	| [$32a9: djnz $32A0]
	rts                                    	| [$32ab: ret]

start_attack_32ac:
	STORE_RAM_POINTER	a0,l_946B(a6)        	| [$32ac: ld   ($946B),hl]
	jbsr	exx                               	| [$32af: exx]
	STORE_RAM_POINTER	a0,l_946D(a6)        	| [$32b0: ld   ($946D),hl]
	lea	enemy_objects_9010(a6),a0                      	| [$32b3: ld   hl,$9010]
	move.w	#0x0010,d3                      	| [$32b6: ld   de,$0010]
	jbsr	exx                               	| [$32b9: exx]
	lea	sprite_shadow_ram_9800+0x10(a6),a0                      	| [$32ba: ld   hl,$9810]
	move.w	#0x0008,d3                      	| [$32bd: ld   de,$0008]
	move.b	l_924E(a6),d0                   	| [$32c0: ld   a,($924E)]
	                               	| [$32c3: and  a]
	jne	l_32d2                             	| [$32c4: jr   nz,$32D2]
	move.b	l_9605(a6),d0                   	| [$32c6: ld   a,($9605)]
	cmp.b	#0x16,d0                         	| [$32c9: cp   $16]
	jcc	l_32d7                             	| [$32cb: jr   nc,$32D7]
	move.b	#0x0A,d1                        	| [$32cd: ld   b,$0A]
	jra	l_32e2                             	| [$32cf: jp   $32E2]

l_32d2:
	move.b	#0x06,d1                        	| [$32d2: ld   b,$06]
	jra	l_32e2                             	| [$32d4: jp   $32E2]

l_32d7:
	move.b	d0,d2                           	| [$32d7: ld   c,a]
	READ_ROM_BYTE	0x09E7,d0                       	| [$32d8: ld   a,($09E7)]
	sub.b	d2,d0                            	| [$32db: sub  c]
	ror.b	#1,d0                            	| [$32dc: rrca]
	and.b	#0x0F,d0                         	| [$32dd: and  $0F]
	addq.b	#0x03,d0                        	| [$32df: add  a,$03]
	move.b	d0,d1                           	| [$32e1: ld   b,a]
l_32e2:
	jbsr	exx                               	| [$32e2: exx]
	move.b	(a0),d0                         	| [$32e3: ld   a,(hl)]
	                               	| [$32e4: and  a]
	jeq	enemy_attack_32ee                             	| [$32e5: jp   z,$32EE]
	add.w	d3,a0                            	| [$32e8: add  hl,de]
	jbsr	exx                               	| [$32e9: exx]
	add.w	d3,a0                            	| [$32ea: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_32e2                             	| [$32eb: djnz $32E2]
	rts                                    	| [$32ed: ret] [uncovered]


enemy_attack_32ee:
	move.l	a0,a3                        	| [$32ee: push hl]
	                        	| [$32ef: pop  iy]
	LOAD_RAM_POINTER	l_946B(a6),a2         	| [$32f1: ld   ix,($946B)]
	subq.b	#1,(enemy_active_00,a3)                    	| [$32f5: dec  (iy+$00)]
	move.b	#0xC0,(0x01,a3)                 	| [$32f8: ld   (iy+$01),$C0]
	clr.b	(0x06,a3)                        	| [$32fc: ld   (iy+$06),$00]
	clr.b	(0x07,a3)                        	| [$3300: ld   (iy+$07),$00]
	* set enemy to "attack" mode
	move.b	#0x03,(enemy_state_0a,a3)           | [$3304: ld   (iy+$0a),$03]
	move.b	(0x09,a2),d0                    	| [$3308: ld   a,(ix+$09)]
	move.b	d0,(0x09,a3)                    	| [$330b: ld   (iy+$09),a]
	move.b	(0x0c,a2),d0                    	| [$330e: ld   a,(ix+$0c)]
	move.b	d0,(0x0c,a3)                    	| [$3311: ld   (iy+$0c),a]
	move.b	(0x0d,a2),d0                    	| [$3314: ld   a,(ix+$0d)]
	move.b	d0,(0x0d,a3)                    	| [$3317: ld   (iy+$0d),a]
	clr.b	(0x00,a2)                        	| [$331a: ld   (ix+$00),$00]
	jbsr	exx                               	| [$331e: exx]
	exg	a1,a0                              	| [$331f: ex   de,hl]
	LOAD_RAM_POINTER	l_946D(a6),a0         	| [$3320: ld   hl,($946D)]

	move.b	(a0),d0                         	| [$3323: ld   a,(hl)]
	move.b	d0,(a1)+                         	| [$3324: ld   (de),a]
	clr.b	(a0)+                             	| [$3325: ld   (hl),$00]
												| [$3327: inc  l]
												| [$3328: inc  e]
	move.b	(a0)+,(a1)+                               	| [$3329: ldi]
	move.b	(a0)+,(a1)+                               	| [$332b: ldi]
	move.b	(a0)+,(a1)+                               	| [$332d: ldi]
	move.b	l_9605(a6),d0                   	| [$332f: ld   a,($9605)]
l_3332:
	cmp.b	#0x03,d0                         	| [$3332: cp   $03]
	jcc	l_333a                             	| [$3334: jr   nc,$333A]
	lea	l_931E(a6),a0                      	| [$3336: ld   hl,$931E] [uncovered]
	addq.b	#1,(a0)                         	| [$3339: inc  (hl)] [uncovered]
l_333a:
	lea	l_921E(a6),a0                      	| [$333a: ld   hl,$921E]
	subq.b	#1,(a0)                         	| [$333d: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$333e: ret  nz] [...]
0:
	move.b	l_907E(a6),d0                   	| [$333f: ld   a,($907E)]
	move.b	d0,l_90FE(a6)                   	| [$3342: ld   ($90FE),a]
	rts                                    	| [$3345: ret]

l_3481:
	move.b	l_9070(a6),d0                   	| [$3481: ld   a,($9070)]
	                               	| [$3484: and  a]
	jne	l_3280                             	| [$3485: jp   nz,$3280]
	move.b	l_9080(a6),d0                   	| [$3488: ld   a,($9080)]
	                               	| [$348b: and  a]
	jne	l_3280                             	| [$348c: jp   nz,$3280]
	move.b	l_9090(a6),d0                   	| [$348f: ld   a,($9090)]
	                               	| [$3492: and  a]
	jne	l_3280                             	| [$3493: jp   nz,$3280]
	jbsr	l_5d3f                            	| [$3496: call $5D3F]
	lea	l_9070(a6),a2                      	| [$3499: ld   ix,$9070]
	lea	l_9840(a6),a3                      	| [$349d: ld   iy,$9840]
	move.b	player_ship_angle_9001(a6),d0                   	| [$34a1: ld   a,($9001)]
	move.b	d0,l_926E(a6)                   	| [$34a4: ld   ($926E),a]
	READ_ROM_BYTE	0x00F0,d0                       	| [$34a7: ld   a,($00F0)]
	move.b	d0,l_927E(a6)                   	| [$34aa: ld   ($927E),a]
	move.b	#0x4F,(0x08,a2)                 	| [$34ad: ld   (ix+$08),$4F]
	move.b	#0x4F,(0x18,a2)                 	| [$34b1: ld   (ix+$18),$4F]
	move.b	#0x4F,(0x28,a2)                 	| [$34b5: ld   (ix+$28),$4F]
	move.b	#0xFE,(0x00,a2)                 	| [$34b9: ld   (ix+$00),$FE]
	move.b	#0xFE,(0x10,a2)                 	| [$34bd: ld   (ix+$10),$FE]
	move.b	#0xFE,(0x20,a2)                 	| [$34c1: ld   (ix+$20),$FE]
	clr.b	(0x09,a2)                        	| [$34c5: ld   (ix+$09),$00]
	move.b	#0x01,(0x19,a2)                 	| [$34c9: ld   (ix+$19),$01]
	move.b	#0x02,(0x29,a2)                 	| [$34cd: ld   (ix+$29),$02]
	move.b	#0x07,(0x0a,a2)                 	| [$34d1: ld   (ix+$0a),$07]
	move.b	#0x07,(0x1a,a2)                 	| [$34d5: ld   (ix+$1a),$07]
	move.b	#0x07,(0x2a,a2)                 	| [$34d9: ld   (ix+$2a),$07]
	clr.b	(0x06,a2)                        	| [$34dd: ld   (ix+$06),$00]
	clr.b	(0x16,a2)                        	| [$34e1: ld   (ix+$16),$00]
	clr.b	(0x26,a2)                        	| [$34e5: ld   (ix+$26),$00]
	clr.b	(0x07,a2)                        	| [$34e9: ld   (ix+$07),$00]
	clr.b	(0x17,a2)                        	| [$34ed: ld   (ix+$17),$00]
	clr.b	(0x27,a2)                        	| [$34f1: ld   (ix+$27),$00]
	clr.b	d0                               	| [$34f5: xor  a]
	move.b	d0,l_924E(a6)                   	| [$34f6: ld   ($924E),a]
	move.b	d0,l_928E(a6)                   	| [$34f9: ld   ($928E),a]
	lea	l_960E(a6),a0                      	| [$34fc: ld   hl,$960E]
	addq.b	#1,(a0)                         	| [$34ff: inc  (hl)]
	move.b	l_9605(a6),d0                   	| [$3500: ld   a,($9605)]
	addq.b	#0x03,d0                        	| [$3503: add  a,$03]
	move.b	d0,l_9605(a6)                   	| [$3505: ld   ($9605),a]
	rts                                    	| [$3508: ret]

switch_to_highscores_3509:
	move.w	#0x0113,d3                          	| [$3509: ld   de,$0113]
	jbsr	start_task_d3_0038                            	| [$350c: rst  $38]
	move.b	#0x07,d3                        	| [$350d: ld   d,$07]
	jbsr	start_task_d3_0038                            	| [$350f: rst  $38]
	jbsr	display_higscore_entries_145e                            	| [$3510: call $143E]
*  ROM checksum
*	LEA_ROM	0x1C58,a0                          	| [$3513: ld   hl,$1C58]
*	move.w	#0x0000,d1                      	| [$3516: ld   bc,$0000]
*	sub.b	d0,d0                            	| [$3519: sub  a]
*l_351a:
*	add.b	(a0),d0                          	| [$351a: add  a,(hl)]
*	addq.w	#1,a0                           	| [$351b: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_351a                             	| [$351c: djnz $351A]
*	sub.b	#0xAD,d0                         	| [$351e: sub  $AD]
*	jne	l_07ff                             	| [$3520: jp   nz,$07FF]
	move.b	(0x061B,a6),d0                    	| [$3523: ld   a,($861B)]
	move.b	#0x3A,d1                        	| [$3526: ld   b,$3A]
	sub.b	d1,d0                            	| [$3528: sub  b]
	addq.b	#1,d0                           	| [$3529: inc  a]
	move.b	d0,global_state_942B(a6)                   	| [$352a: ld   ($942B),a]
	jra	next_game_state_080b                             	| [$352d: jp   $080B]

l_3530:
	lea	at_least_one_active_enemy_902E(a6),a0                      	| [$3530: ld   hl,$902E]
	move.b	(a0),d0                         	| [$3533: ld   a,(hl)]
	                               	| [$3534: and  a]
	jne	update_active_enemy_flag_35ca                             	| [$3535: jp   nz,$35CA]
	subq.b	#1,(a0)                         	| [$3538: dec  (hl)]
	lea	enemy_objects_9010(a6),a2                      	| [$3539: ld   ix,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$353d: ld   iy,$9810]
	lea	l_960D(a6),a0                      	| [$3541: ld   hl,$960D]
	move.b	(a0),d0                         	| [$3544: ld   a,(hl)]
	move.b	d0,d1                           	| [$3545: ld   b,a]
	cmp.b	#0x04,d0                         	| [$3546: cp   $04]
	jcc	l_35df                             	| [$3548: jp   nc,$35DF]
	cmp.b	#0x03,d0                         	| [$354b: cp   $03]
	bne.b	0f                               	| [...]
	jbsr	l_37f3                            	| [$354d: call z,$37F3]
0:
	addq.b	#1,(a0)                         	| [$3550: inc  (hl)]
	move.b	current_stage_960B(a6),d0                   	| [$3551: ld   a,($960B)]
	and.b	#0x1F,d0                         	| [$3554: and  $1F]
	add.b	d0,d0                            	| [$3556: add  a,a]
	add.b	d0,d0                            	| [$3557: add  a,a]
	add.b	d1,d0                            	| [$3558: add  a,b]
	LEA_ROM	0x5152,a0                          	| [$3559: ld   hl,$5152]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$355c: rst  $10]
	exg	a1,a0                              	| [$355d: ex   de,hl]
	move.b	(a0),d0                         	| [$355e: ld   a,(hl)]
	move.b	d0,l_91FE(a6)                   	| [$355f: ld   ($91FE),a]
	move.b	d0,d1                           	| [$3562: ld   b,a]
	addq.w	#1,a0                           	| [$3563: inc  hl]
	move.w	#0x0008,d3                      	| [$3564: ld   de,$0008]
l_3567:
	movem.w	d1/d2,-(sp)                    	| [$3567: push bc]
	move.b	l_9602(a6),d0                   	| [$3568: ld   a,($9602)]
	move.b	d0,(0x09,a2)                    	| [$356b: ld   (ix+$09),a]
	addq.b	#1,d0                           	| [$356e: inc  a]
	move.b	d0,l_9602(a6)                   	| [$356f: ld   ($9602),a]
	jbsr	l_3581                            	| [$3572: call $3581]
	add.w	d3,a2                            	| [$3575: add  ix,de]
	add.w	d3,a2                            	| [$3577: add  ix,de]
	add.w	d3,a3                            	| [$3579: add  iy,de]
	movem.w	(sp)+,d1/d2                    	| [$357b: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_3567                             	| [$357c: djnz $3567]
	jra	l_5ca6                             	| [$357e: jp   $5CA6]

l_3581:
	move.b	is_screen_flipped_9407(a6),d0                   	| [$3581: ld   a,($9407)]
	ror.b	#1,d0                            	| [$3584: rrca]
	and.b	#0x80,d0                         	| [$3585: and  $80]
	add.b	(a0)+,d0                          	| [$3587: add  a,(hl)]
	move.b	d0,(0x03,a3)                    	| [$3588: ld   (iy+$03),a]
	move.b	#0xFF,(0x00,a3)                 	| [$358b: ld   (iy+$00),$FF]
										| [$358f: inc  hl]
	move.b	(a0)+,d0                         	| [$3590: ld   a,(hl)]
	move.b	d0,(0x05,a2)                    	| [$3591: ld   (ix+$05),a]
	clr.b	(0x06,a2)                        	| [$3594: ld   (ix+$06),$00]
	clr.b	(0x07,a2)                        	| [$3598: ld   (ix+$07),$00]
	                           	| [$359c: inc  hl]
	move.b	(a0)+,d0                         	| [$359d: ld   a,(hl)]
	move.b	d0,(0x08,a2)                    	| [$359e: ld   (ix+$08),a]
	clr.b	(0x01,a3)                        	| [$35a1: ld   (iy+$01),$00]
	clr.b	(0x02,a3)                        	| [$35a5: ld   (iy+$02),$00]
	                           	| [$35a9: inc  hl]
	jbsr	exx                               	| [$35aa: exx]
	move.b	(0x09,a2),d0                    	| [$35ab: ld   a,(ix+$09)]
	LEA_ROM	0x3760,a0                          	| [$35ae: ld   hl,$3760]
	add.b	d0,d0                            	| [$35b1: add  a,a]
	jbsr	fetch_a0_plus_d0_0008                            	| [$35b2: rst  $08]
	move.b	d0,(0x0c,a2)                    	| [$35b3: ld   (ix+$0c),a]
	addq.w	#1,a0                           	| [$35b6: inc  hl]
	move.b	(a0),d0                         	| [$35b7: ld   a,(hl)]
	move.b	d0,(0x0d,a2)                    	| [$35b8: ld   (ix+$0d),a]
	lea	l_913E(a6),a0                      	| [$35bb: ld   hl,$913E]
	addq.b	#1,(a0)                         	| [$35be: inc  (hl)]
	jbsr	exx                               	| [$35bf: exx]
	clr.b	(0x0a,a2)                        	| [$35c0: ld   (ix+$0a),$00]
	move.b	#0xFF,(0x00,a2)                 	| [$35c4: ld   (ix+$00),$FF]
	rts                                    	| [$35c8: ret]

update_active_enemy_flag_35ca:
	lea	enemy_objects_9010(a6),a0                      	| [$35ca: ld   hl,$9010]
	move.w	#0x0010,d3                      	| [$35cd: ld   de,$0010]
	                                    	| [$35d0: nop]
	move.b	#0x0A,d0                        	| [$35d1: ld   a,$0A]
	move.b	d0,d1                           	| [$35d3: ld   b,a]
l_35d4:
	move.b	(enemy_active_00,a0),d0                         	| [$35d4: ld   a,(hl)]
	                               	| [$35d5: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$35d6: ret  nz] [...]
0:
	* inactive enemy
	add.w	d3,a0                            	| [$35d7: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_35d4                             	| [$35d8: djnz $35D4]
	* no active enemy, update flag
	                              	| [$35da: xor  a]
	clr.b	at_least_one_active_enemy_902E(a6)                   	| [$35db: ld   ($902E),a]
	rts                                    	| [$35de: ret]

l_35df:
	move.b	l_91AE(a6),d0                   	| [$35df: ld   a,($91AE)]
	                               	| [$35e2: and  a]
	jne	l_361b                             	| [$35e3: jr   nz,$361B]
	clr.b	d0                               	| [$35e5: xor  a]
	move.b	d0,l_9601(a6)                   	| [$35e6: ld   ($9601),a]
	move.b	d0,l_922E(a6)                   	| [$35e9: ld   ($922E),a]
	move.b	l_961D(a6),d0                   	| [$35ec: ld   a,($961D)]
	                               	| [$35ef: and  a]
	jne	l_360e                             	| [$35f0: jp   nz,$360E]
	move.b	l_9478(a6),d0                   	| [$35f3: ld   a,($9478)]
	                               	| [$35f6: and  a]
	jne	l_360e                             	| [$35f7: jp   nz,$360E]
	move.b	l_935D(a6),d0                   	| [$35fa: ld   a,($935D)]
	cmp.b	#0x04,d0                         	| [$35fd: cp   $04]
	jcs	l_3604                             	| [$35ff: jr   c,$3604]
	move.b	d0,l_961D(a6)                   	| [$3601: ld   ($961D),a] [uncovered]
l_3604:
	move.b	l_903E(a6),d0                   	| [$3604: ld   a,($903E)]
	                               	| [$3607: and  a]
	jeq	l_4171                             	| [$3608: jp   z,$4171]
	jra	l_3623                             	| [$360b: jp   $3623] [uncovered]

l_360e:
	clr.b	d0                               	| [$360e: xor  a]
	move.b	d0,l_9478(a6)                   	| [$360f: ld   ($9478),a]
	move.b	d0,l_903E(a6)                   	| [$3612: ld   ($903E),a]
	move.b	d0,l_9601(a6)                   	| [$3615: ld   ($9601),a]
	jra	l_4171                             	| [$3618: jp   $4171]

l_361b:
	clr.b	d0                               	| [$361b: xor  a]
	move.b	d0,l_9605(a6)                   	| [$361c: ld   ($9605),a]
	move.b	d0,l_9601(a6)                   	| [$361f: ld   ($9601),a]
	rts                                    	| [$3622: ret]

l_3623:
	move.b	#0x01,d0                        	| [$3623: ld   a,$01]
	move.b	d0,l_9601(a6)                   	| [$3625: ld   ($9601),a]
	lea	l_90B0(a6),a0                      	| [$3628: ld   hl,$90B0]
	STORE_RAM_POINTER	a0,l_9479(a6)        	| [$362b: ld   ($9479),hl]
	                                    	| [$362e: nop]
	clr.b	d0                               	| [$362f: ld   a,$00]
	move.b	d0,l_947B(a6)                   	| [$3631: ld   ($947B),a]
	jbsr	randomize_direction_1381                            	| [$3634: call $1381]
l_3637:
	move.b	d0,d1                           	| [$3637: ld   b,a]
	and.w	#0x07,d0                         	| [$3638: and  $07]
	move.b	d0,d2                           	| [$363a: ld   c,a]
	add.b	d0,d0                            	| [$363b: add  a,a]
	add.b	d2,d0                            	| [$363c: add  a,c]
	LEA_ROM	0x36BA,a0                          	| [$363d: ld   hl,$36BA]
	add.w	d0,a0                            	| [$3640: add  a,l]
	                        	| [$3641: ld   l,a]
	                       	| [$3642: jr   nc,$3645]
	                        	| [$3644: inc  h]

	move.b	(a0)+,d4                         	| [$3645: ld   e,(hl)]
	                           	| [$3646: inc  hl]
	move.b	(a0)+,d3                         	| [$3647: ld   d,(hl)]
	                           	| [$3648: inc  hl]
	* this is a ROM address
	LOAD_A1_FROM_D3D4_ROM
	move.b	(a0),d0                         	| [$3649: ld   a,(hl)]
	move.b	d0,alt_attack_wave_type_9477(a6)                   	| [$364a: ld   ($9477),a]
	move.b	d0,l_9478(a6)                   	| [$364d: ld   ($9478),a]
	exg	a1,a0                              	| [$3650: ex   de,hl]
	move.b	d1,d0                           	| [$3651: ld   a,b]
	ror.b	#2,d0                            	| [$3652: rrca] * 2
	and.b	#0x03,d0                         	| [$3654: and  $03]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$3656: rst  $10]
	exg	a1,a0                              	| [$3657: ex   de,hl]
	lea	enemy_objects_9010(a6),a2                      	| [$3658: ld   ix,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$365c: ld   iy,$9810]
	move.b	(a0)+,d1                         	| [$3660: ld   b,(hl)]
	move.b	d1,d0                           	| [$3661: ld   a,b]
	move.b	d0,l_91FE(a6)                   	| [$3662: ld   ($91FE),a]
	move.b	d0,l_903E(a6)                   	| [$3665: ld   ($903E),a]
	move.b	l_9605(a6),d0                   	| [$3668: ld   a,($9605)]
	add.b	d1,d0                            	| [$366b: add  a,b]
	move.b	d0,l_9605(a6)                   	| [$366c: ld   ($9605),a]
												| [$366f: inc  hl]
	move.w	#0x0008,d3                      	| [$3670: ld   de,$0008]
l_3673:
	movem.w	d1/d2,-(sp)                    	| [$3673: push bc]
	jbsr	l_3689                            	| [$3674: call $3689]
	move.b	d0,(0x09,a2)                    	| [$3677: ld   (ix+$09),a]
	jbsr	l_3581                            	| [$367a: call $3581]
	add.w	d3,a2                            	| [$367d: add  ix,de]
	add.w	d3,a2                            	| [$367f: add  ix,de]
	add.w	d3,a3                            	| [$3681: add  iy,de]
	movem.w	(sp)+,d1/d2                    	| [$3683: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_3673                             	| [$3684: djnz $3673]
	jra	l_5ca6                             	| [$3686: jp   $5CA6]

l_3689:
	jbsr	exx                               	| [$3689: exx]
	move.b	l_947B(a6),d0                   	| [$368a: ld   a,($947B)]
	move.b	d0,d1                           	| [$368d: ld   b,a]
	LOAD_RAM_POINTER	l_9479(a6),a0         	| [$368e: ld   hl,($9479)]
	move.w	#0x0010,d3                      	| [$3691: ld   de,$0010]
l_3694:
	move.b	(a0),d0                         	| [$3694: ld   a,(hl)]
	                               	| [$3695: and  a]
	jeq	l_369c                             	| [$3696: jr   z,$369C]
l_3698:
	addq.b	#1,d1                           	| [$3698: inc  b]
	add.w	d3,a0                            	| [$3699: add  hl,de]
	jra	l_3694                             	| [$369a: jr   $3694]
l_369c:
	LOAD_D5D6_FROM_A0_RAM
	move.b	first_death_ray_emitter_struct_9611(a6),d0                   	| [$369c: ld   a,($9611)]
	sub.b	d6,d0                            	| [$369f: sub  l]
	jeq	l_3698                             	| [$36a0: jr   z,$3698]
	move.b	second_death_ray_emitter_struct_9615(a6),d0                   	| [$36a2: ld   a,($9615)]
	sub.b	d6,d0                            	| [$36a5: sub  l]
	jeq	l_3698                             	| [$36a6: jr   z,$3698]
	move.b	death_ray_struct_9619(a6),d0                   	| [$36a8: ld   a,($9619)]
	sub.b	d6,d0                            	| [$36ab: sub  l]
	jeq	l_3698                             	| [$36ac: jr   z,$3698]
	add.w	d3,a0                            	| [$36ae: add  hl,de]
	STORE_RAM_POINTER	a0,l_9479(a6)        	| [$36af: ld   ($9479),hl]
	addq.b	#1,d1                           	| [$36b2: inc  b]
	move.b	d1,d0                           	| [$36b3: ld   a,b]
	move.b	d0,l_947B(a6)                   	| [$36b4: ld   ($947B),a]
	jbsr	exx                               	| [$36b7: exx]
	subq.b	#1,d0                           	| [$36b8: dec  a]
	rts                                    	| [$36b9: ret]

l_36e9:
	clr.b	d0                               	| [$36e9: xor  a]
	move.b	d0,l_9476(a6)                   	| [$36ea: ld   ($9476),a]
	move.b	d0,l_923E(a6)                   	| [$36ed: ld   ($923E),a]
	lea	l_9860(a6),a3                      	| [$36f0: ld   iy,$9860]
	lea	l_90B0(a6),a2                      	| [$36f4: ld   ix,$90B0]
	* TODO optimize exx
	move.w	#0x0004,d3                      	| [$36f8: ld   de,$0004]
	move.w	#0x0010,d1                      	| [$36fb: ld   bc,$0010]
	jbsr	exx                               	| [$36fe: exx]
	LEA_ROM	0x3760,a0                          	| [$36ff: ld   hl,$3760]
	                                    	| [$3702: nop]
	move.b	#0x24,d0                        	| [$3703: ld   a,$24]
	move.b	d0,d1                           	| [$3705: ld   b,a]
	move.b	current_player_9662(a6),d0                   	| [$3706: ld   a,($9662)]
	and.b	#0x01,d0                         	| [$3709: and  $01]
	jne	l_3736                             	| [$370b: jr   nz,$3736]
l_370d:
	move.b	(0x05,a2),d0                    	| [$370d: ld   a,(ix+$05)]
	addq.b	#1,d0                           	| [$3710: inc  a]
	jne	l_372b                             	| [$3711: jr   nz,$372B]
	move.b	#0xFF,(0x00,a2)                 	| [$3713: ld   (ix+$00),$FF]
	move.b	(a0)+,d0                         	| [$3717: ld   a,(hl)]
	move.b	d0,(0x03,a3)                    	| [$3718: ld   (iy+$03),a]
	                           	| [$371b: inc  hl]
	move.b	(a0)+,d0                         	| [$371c: ld   a,(hl)]
	move.b	d0,(0x00,a3)                    	| [$371d: ld   (iy+$00),a]
	clr.b	(0x01,a3)                        	| [$3720: ld   (iy+$01),$00]
	clr.b	(0x02,a3)                        	| [$3724: ld   (iy+$02),$00]
	                           	| [$3728: inc  hl]
	jra	l_372d                             	| [$3729: jr   $372D]

l_372b:
	addq.w	#2,a0                           	| [$372b: inc  hl]
	                           	| [$372c: inc  hl]
l_372d:
	* TODO optimize exx
	jbsr	exx                               	| [$372d: exx]
	add.w	d3,a3                            	| [$372e: add  iy,de]
	add.w	d1,a2                            	| [$3730: add  ix,bc]
	jbsr	exx                               	| [$3732: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_370d                             	| [$3733: djnz $370D]
	rts                                    	| [$3735: ret]
l_3736:
	move.b	(0x06,a2),d0                    	| [$3736: ld   a,(ix+$06)]
	addq.b	#1,d0                           	| [$3739: inc  a]
	jne	l_3755                             	| [$373a: jr   nz,$3755]
	move.b	#0xFF,(0x00,a2)                 	| [$373c: ld   (ix+$00),$FF]
	move.b	d2,d0                           	| [$3740: ld   a,c]
	add.b	(a0)+,d0                          	| [$3741: add  a,(hl)]
	move.b	d0,(0x03,a3)                    	| [$3742: ld   (iy+$03),a]
	                           	| [$3745: inc  hl]
	move.b	(a0)+,d0                         	| [$3746: ld   a,(hl)]
	move.b	d0,(0x00,a3)                    	| [$3747: ld   (iy+$00),a]
	                           	| [$374a: inc  hl]
	clr.b	(0x01,a3)                        	| [$374b: ld   (iy+$01),$00]
	clr.b	(0x02,a3)                        	| [$374f: ld   (iy+$02),$00]
	jra	l_3757                             	| [$3753: jr   $3757]
l_3755:
	addq.w	#2,a0                           	| [$3755: inc  hl]
	                           	| [$3756: inc  hl]
l_3757:
	* TODO optimize exx
	jbsr	exx                               	| [$3757: exx]
	add.w	d3,a3                            	| [$3758: add  iy,de]
	add.w	d1,a2                            	| [$375a: add  ix,bc]
	jbsr	exx                               	| [$375c: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_3736                             	| [$375d: djnz $3736]
	rts                                    	| [$375f: ret]


l_37e9:
	jbsr	update_starfield_inter_levels_3831                            	| [$37e9: call $3831]
	jbsr	clear_screen_row_0207                            	| [$37ec: call $0207]
	beq.b	0f                               	| [...]
	rts                                    	| [$37ef: ret  nz] [...]
0:
	jra	next_game_state_080b                             	| [$37f0: jp   $080B]

l_37f3:
	move.b	l_91AE(a6),d0                   	| [$37f3: ld   a,($91AE)]
	                               	| [$37f6: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$37f7: ret  nz] [...]
0:
	move.b	l_9605(a6),d0                   	| [$37f8: ld   a,($9605)]
	cmp.b	#0x07,d0                         	| [$37fb: cp   $07]
	bcs.b	0f                               	| [...]
	rts                                    	| [$37fd: ret  nc] [...]
0:
	move.b	#0x01,d0                        	| [$37fe: ld   a,$01]
	move.b	d0,l_903E(a6)                   	| [$3800: ld   ($903E),a]
	rts                                    	| [$3803: ret]

* starfield during game (less available sprites means less stars)
* with 3 slightly different speeds
update_starfield_in_game_3804:
	jbsr	select_stars_buffer_38ef            | [$3804: call $38EF]
	move.b	#0xFD,d5                        	| [$3807: ld   h,$FD]
	move.b	#0xC0,d2                        	| [$3809: ld   c,$C0]
	jbsr	update_base_stars_3A37        | [$380b: call update_base_stars_3A37]
												| [$380e: ld   a,($0CC2)]
	move.b	#3,d1                           	| [$3811: ld   b,a]
	move.b	#0xFC,d5                        	| [$3812: ld   h,$FC]
	jbsr	update_base_stars_3A37        | [$3814: call update_base_stars_3A37]
	move.b	#0xFE,d6                        	| [$3817: ld   l,$FE]
	* extra stars
	jra	update_starfield_using_bullet_slots_39B1              	| [$3819: jp   update_starfield_using_bullet_slots_39B1]



erase_1up_381c:
	LEA_ROM	0x40A6,a0                          	| [$381c: ld   hl,$40A6]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$381f: rst  $10]
	exg	a1,a0                              	| [$3820: ex   de,hl]
	move.b	(a0)+,d4                         	| [$3821: ld   e,(hl)]
	                           	| [$3822: inc  hl]
	move.b	(a0)+,d3                         	| [$3823: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	move.l	d3,a1
	addq.w	#1,a0                           	| [$3824: inc  hl] * 2
l_3826:
	move.b	(a0),d0                         	| [$3826: ld   a,(hl)]
	cmp.b	#0x9E,d0                         	| [$3827: cp   $9E]
	bne.b	0f                               	| [...]
	rts                                    	| [$3829: ret  z] [...]
0:
	move.b	#0x83,d0                        	| [$382a: ld   a,$83]
	jbsr	write_videoram_a1                  	| [$382c: ld   (de),a]
	addq.w	#1,a0                           	| [$382d: inc  hl]
	jbsr	sub_20_to_a1_0020                            	| [$382e: rst  $20]
	jra	l_3826                             	| [$382f: jr   $3826]

* able to throw in more stars since most sprites aren't used otherwise
update_starfield_inter_levels_3831:
	tst.b	stars_off_flag
	jeq		0f
	rts
0:
	jbsr	select_stars_buffer_38ef                            	| [$3831: call $38EF]
	move.b	stars_speed_943B(a6),d0                   	| [$3834: ld   a,($943B)]
	move.b	d0,d5                           	| [$3837: ld   h,a]
	move.b	#0xC0,d2                        	| [$3838: ld   c,$C0]
	jbsr	update_base_stars_3A37        | [$383a: call update_base_stars_3A37]
												| [$383d: ld   a,($17FA)]
	move.b	#3,d1                           	| [$3840: ld   b,a]
	move.b	stars_speed_943B(a6),d0                   	| [$3841: ld   a,($943B)]
	subq.b	#1,d0                           	| [$3844: dec  a]
	move.b	d0,d5                           	| [$3845: ld   h,a]
	jbsr	update_base_stars_3A37        | [$3846: call update_base_stars_3A37]
	move.b	stars_speed_943B(a6),d0                   	| [$3849: ld   a,($943B)]
	subq.b	#0x02,d0                        	| [$384c: sub  $02]
	move.b	d0,d6                           	| [$384e: ld   l,a]
	jbsr	update_starfield_using_bullet_slots_39B1        | [$384f: call update_starfield_using_bullet_slots_39B1]
	
	* extra stars buffer for inter levels
	lea	l_9860(a6),a3                      		| [$3852: ld   iy,$9860]
	lea	l_90B0(a6),a2                      		| [$3856: ld   ix,$90B0]
	move.b	stars_speed_943B(a6),d0                   	| [$385a: ld   a,($943B)]
	subq.b	#0x03,d0                        	| [$385d: sub  $03]
	move.b	d0,d5                           	| [$385f: ld   h,a]
	move.b	#0xC0,d2                        	| [$3860: ld   c,$C0]
	jra	update_starfield_inter_levels_3938      | [$3862: jp   $3938]

l_3865:
	move.b	#0xFB,d0                        	| [$3865: ld   a,$FB]
	move.b	d0,stars_speed_943B(a6)                   	| [$3867: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$386a: call $3831]
	jbsr	l_22f3                            	| [$386d: call $22F3]
	move.w	#0x0400,d3                          	| [$3870: ld   de,$0400]
	jbsr	start_task_d3_0038                            	| [$3873: rst  $38]
	move.w	#0x0500,d3                        	| [$3874: ld   d,$05]
	jbsr	start_task_d3_0038                            	| [$3876: rst  $38]
	move.w	#0x0600,d3                        	| [$3877: ld   d,$06]
	jbsr	start_task_d3_0038                            	| [$3879: rst  $38]
	move.b	l_9458(a6),d0                   	| [$387a: ld   a,($9458)]
	                               	| [$387d: and  a]
	jeq	l_388b                             	| [$387e: jr   z,$388B]
	move.w	#0x0109,d3                          	| [$3880: ld   de,$0109] [uncovered]
	move.b	current_player_9662(a6),d0                   	| [$3883: ld   a,($9662)] [uncovered]
	                               	| [$3886: and  a] [uncovered]
	jeq	l_388a                             	| [$3887: jr   z,$388A] [uncovered]
	addq.b	#1,d3                           	| [$3889: inc  e] [uncovered]
l_388a:
	jbsr	start_task_d3_0038                            	| [$388a: rst  $38] [uncovered]
l_388b:
	lea	0x8040,a0                          	| [$388b: ld   hl,$8040]
	move.w	#0x0020,d3                      	| [$388e: ld   de,$0020]
	move.b	#0x1C,d1                        	| [$3891: ld   b,$1C]
	jbsr	change_attribute_line_38b4                            	| [$3893: call $38B4]
	lea	0x805F,a0                          	| [$3896: ld   hl,$805F]
	move.w	#0x0020,d3                      	| [$3899: ld   de,$0020]
	move.b	#0x1C,d1                        	| [$389c: ld   b,$1C]
	jbsr	change_attribute_line_38b4                            	| [$389e: call $38B4]
	jbsr	l_3b2d                            	| [$38a1: call $3B2D]
	jbsr	next_game_state_080b                            	| [$38a4: call $080B]
	move.b	l_960C(a6),d0                   	| [$38a7: ld   a,($960C)]
	                               	| [$38aa: and  a]
	jeq	l_38ba                             	| [$38ab: jp   z,$38BA]
	jbsr	l_38c9                            	| [$38ae: call $38C9]
	jra	l_089a                             	| [$38b1: jp   $089A]

change_attribute_line_38b4:
	move.w	d0,-(a7)
0:
	jbsr	read_videoram_a0
	bset.b	#4,d0                         	| [$38b4: set  4,(hl)]
	jbsr	osd_w_videoram
	add.w	d3,a0                            	| [$38b6: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	0b                             	| [$38b7: djnz $38B4]
	move.w	(a7)+,d0
	rts                                    	| [$38b9: ret]

l_38ba:
	move.w	#0x011C,d3                          	| [$38ba: ld   de,$011C]
	jbsr	start_task_d3_0038                            	| [$38bd: rst  $38]
	jbsr	l_08ad                            	| [$38be: call $08AD]
	move.b	l_9458(a6),d0                   	| [$38c1: ld   a,($9458)]
	                               	| [$38c4: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$38c5: ret  z] [...]
0:
	jra	l_36e9                             	| [$38c6: jp   $36E9] [uncovered]

l_38c9:
	move.b	current_stage_960B(a6),d0                   	| [$38c9: ld   a,($960B)]
	addq.b	#0x01,d0                        	| [$38cc: add  a,$01]
	and.b	#0x03,d0                         	| [$38ce: and  $03]
	add.b	#0x2C,d0                         	| [$38d0: add  a,$2C]
	move.b	d0,d4                           	| [$38d2: ld   e,a]
	move.b	#0x01,d3                        	| [$38d3: ld   d,$01]
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$38d5: rst  $38]
	move.b	current_stage_960B(a6),d0                   	| [$38d6: ld   a,($960B)]
	cmp.b	#0x17,d0                         	| [$38d9: cp   $17]
	jeq	l_38ea                             	| [$38db: jr   z,$38EA]
	addq.b	#0x01,d0                        	| [$38dd: add  a,$01]
	ror.b	#2,d0                            	| [$38df: rrca] * 2
	and.b	#0x07,d0                         	| [$38e1: and  $07]
	add.b	#0x26,d0                         	| [$38e3: add  a,$26]
	move.b	d0,d4                           	| [$38e5: ld   e,a]
	move.b	#0x01,d3                        	| [$38e6: ld   d,$01]
	LOAD_D3_16_FROM_D3D4
	jbsr	start_task_d3_0038                            	| [$38e8: rst  $38]
	rts                                    	| [$38e9: ret]


l_38ea:
	move.w	#0x0126,d3                          	| [$38ea: ld   de,$0126]
	jbsr	start_task_d3_0038                            	| [$38ed: rst  $38]
	rts                                    	| [$38ee: ret]


select_stars_buffer_38ef:
	move.b	general_fast_timer_9400(a6),d0   | [$38ef: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$38f2: and  $01]
	jne	l_38fd                             	| [$38f4: jr   nz,$38FD]
	* same as even frame (A700=0)
	lea	stars_sprite_buffer_1_A138(a6),a2                          	| [$38f6: ld   ix,$A138]
	jra	l_3901                             	| [$38fa: jp   $3901]
l_38fd:
	* same as odd frame (A700=1)
	lea	stars_sprite_buffer_2_A338(a6),a2                          	| [$38fd: ld   ix,$A338]
l_3901:
	lea	star_sprite_shadow_ram_2_9938(a6),a3                      	| [$3901: ld   iy,$9938]
	move.b	#0x05,d0                        	| [$3905: ld   a,$05]
	move.b	d0,d1                           	| [$3907: ld   b,a] 5 couples of stars to update
	rts                                    	| [$3908: ret]

show_highscores_for_a_while_3909:
	lea	distance_to_center_9465(a6),a0                      	| [$3909: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$390c: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$390d: ret  nz] [...]
0:
*	RAM checksum
*	move.w	#-0x20,d3                       	| [$390e: ld   de,$FFE0]
*	lea	l_xx869B,a0                          	| [$3911: ld   hl,$869B]
*	clr.b	d0                               	| [$3914: xor  a]
*	add.b	(a0),d0                          	| [$3915: add  a,(hl)]
*	sub.b	#0xD7,d0                         	| [$3916: sub  $D7]
*	add.w	d3,a0                            	| [$3918: add  hl,de]
*	add.b	(a0),d0                          	| [$3919: add  a,(hl)]
*	sub.b	#0xB1,d0                         	| [$391a: sub  $B1]
*	add.w	d3,a0                            	| [$391c: add  hl,de]
*	add.b	(a0),d0                          	| [$391d: add  a,(hl)]
*	sub.b	#0x47,d0                         	| [$391e: sub  $47]
*	jne	l_07ff                             	| [$3920: jp   nz,$07FF]
*	LOAD_RAM_POINTER	l_37AA,a2             	| [$3923: ld   ix,($37AA)]
*	LOAD_RAM_POINTER	l_37AD,a3             	| [$3927: ld   iy,($37AD)]
*	move.b	ixl,d0                          	| [$392b: ld   a,ixl]
*	add.b	#ixh,d0                          	| [$392d: add  a,ixh]
*	add.b	d6,d0                            	| [$392f: add  a,l]
*	addq.b	#0x00,d0                        	| [$3930: add  a,$00]
*	nop                                    	| [$3932: nop]
*	nop                                    	| [$3933: nop]
*	nop                                    	| [$3934: nop]
	jra	next_game_state_080b                             	| [$3935: jp   $080B]

* < A2: stars structure (always 90B0)
* < A3: star sprite structure (always 9860)
* < D2: ??

update_starfield_inter_levels_3938:
												| [$3938: ld   a,($1222)]
	move.b	#0x12,d1                           	| [$393b: ld   b,a] 18 stars to update
	move.b	#0x26,d6                        	| [$393c: ld   l,$26] 13<<1 star code
	moveq	#0x0004,d3                      	| [$393e: ld   de,$0004]
	moveq	#0x10,d4                      	| [$393e: ld   de,$0004] optim
l_3941:
	move.b	(enemy_active_00,a2),d0                    	| [$3941: ld   a,(ix+$00)]
	                               	| [$3944: and  a]
	jne	l_3960                             	| [$3945: jr   nz,$3960]
	move.b	(displayed_y_00,a3),d0                    	| [$3947: ld   a,(iy+$00)]
	add.b	d5,d0                            	| [$394a: add  a,h]
	cmp.b	#0x18,d0                         	| [$394b: cp   $18]
	bcc.b	0f                               	| [...]
	jbsr	random_stuff_3aae                            	| [$394d: call c,$3AAE]
0:
	move.b	d0,(displayed_y_00,a3)                    	| [$3950: ld   (iy+$00),a]
	not.b	d0                               	| [$3953: cpl]
	rol.b	#2,d0                            	| [$3954: rlca] * 2
	and.b	#0x03,d0                         	| [$3956: and  $03]
	addq.b	#0x04,d0                        	| [$3958: add  a,$04]
	move.b	d0,(sprite_code_02,a3)                    	| [$395a: ld   (iy+$02),a]
	move.b	d6,(sprite_code_01,a3)                    	| [$395d: ld   (iy+$01),l]
l_3960:
	add.w	d3,a3                            	| [$3960: add  iy,de] next sprite
	add.w	d4,a2                            	| [$3962: add  ix,de] next structure (*4)
												| [$3964: add  ix,de]
												| [$3966: add  ix,de]
												| [$3968: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3941                             	| [$396a: djnz $3941]
	rts                                    	| [$396c: ret]

* < D6
* use empty slots of bullet sprites to add stars
update_starfield_using_bullet_slots_39B1:
	tst.b	stars_off_flag
	jeq		0f
	rts
0:
	lea	bullet_sprite_structures_9330(a6),a2                      	| [$39b1: ld   ix,$9330]
	lea	bullet_sprite_shadow_ram_9918(a6),a3                      	| [$39b5: ld   iy,$9918]
											| [$39b9: ld   de,$0010]
											| [$39bc: ld   bc,$0004]
	move.b	#0x80,d5                        	| [$39bf: ld   h,$80]
	                               	| [$39c1: exx]
												| [$39c2: ld   a,($00A3)]
	move.b	#6,d1                           	| [$39c5: ld   b,a] 6 stars
l_39c6:
												| [$39c6: exx]
	move.b	(enemy_active_00,a2),d0             | [$39c7: ld   a,(ix+$00)]
	                               	| [$39ca: and  a]
	jne	l_39ef                             	| [$39cb: jp   nz,$39EF]
	move.b	(displayed_x_03,a3),d0                    	| [$39ce: ld   a,(iy+$03)]
	add.b	d5,d0                            	| [$39d1: add  a,h]
	move.b	d0,(displayed_x_03,a3)                    	| [$39d2: ld   (iy+$03),a]
	move.b	(displayed_y_00,a3),d0                    	| [$39d5: ld   a,(iy+$00)]
	add.b	d6,d0                            	| [$39d8: add  a,l]
	cmp.b	#0x18,d0                         	| [$39d9: cp   $18]
	bcc.b	0f                               	| [...]
	jbsr	random_stuff_3a6a                            	| [$39db: call c,$3A6A]
0:
	move.b	d0,(displayed_y_00,a3)                    	| [$39de: ld   (iy+$00),a]
	not.b	d0                               	| [$39e1: cpl]
	* pick kind of random color
	rol.b	#2,d0                            	| [$39e2: rlca] * 2
	and.b	#0x03,d0                         	| [$39e4: and  $03]
	addq.b	#0x04,d0                        	| [$39e6: add  a,$04]
	move.b	d0,(sprite_code_02,a3)              | [$39e8: ld   (iy+$02),a] color
	move.b	#0x26,(sprite_code_01,a3)           | [$39eb: ld   (iy+$01),$26]
l_39ef:
	addq.w	#0x0004,a3                            	| [$39ef: add  iy,bc] next sprite
	add.w	#0x0010,a2                            	| [$39f1: add  ix,de] next struct *4
												| [$39f3: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_39c6                             	| [$39f4: djnz $39C6]
	rts                                    	| [$39f6: ret]

	
* < D1: number of star couples to move (symmetrically)
*   always 5 means that 10 stars are updated here
* < A2: A138/A338
* < A3: 9938
* < D5: ?
update_base_stars_3A37:
	tst.b	stars_off_flag
	jeq		0f
	rts
0:
	move.b	#0x26,d6                        	| [$3a37: ld   l,$26] star code 13<<1
	move.w	#0x0004,d3                      	| [$3a39: ld   de,$0004]
l_3a3c:
	              | [$3a3c: ld   a,(iy+$03)]
	add.b	#0x80,(displayed_x_03,a3)                         	| [$3a3f: add  a,$80]
	              | [$3a41: ld   (iy+$03),a]
	move.b	(displayed_y_00,a3),d0              | [$3a44: ld   a,(iy+$00)]
	add.b	d5,d0                            	| [$3a47: add  a,h]
	cmp.b	#0x18,d0                         	| [$3a48: cp   $18]
	bcc.b	0f                               	| [...]
	jbsr	random_stuff_3aae                   | [$3a4a: call c,$3AAE]
0:
	move.b	d0,(displayed_y_00,a3)              | [$3a4d: ld   (iy+$00),a]
	* randomize the color
	not.b	d0                               	| [$3a50: cpl]
	rol.b	#2,d0                            	| [$3a51: rlca] * 2
	and.b	#0x03,d0                         	| [$3a53: and  $03]
	addq.b	#0x04,d0                        	| [$3a55: add  a,$04]
	move.b	d0,(sprite_code_02,a2)              | [$3a57: ld   (ix+$02),a] color
	move.b	d0,(sprite_code_02+0x20,a2)         | [$3a5a: ld   (ix+$22),a]
	move.b	d6,(sprite_code_01,a2)				| [$3a5d: ld   (ix+$01),l]
	move.b	d6,(sprite_code_01+0x20,a2)                    	| [$3a60: ld   (ix+$21),l]
	add.w	d3,a3                            	| [$3a63: add  iy,de] next entry
	add.w	d3,a2                            	| [$3a65: add  ix,de] next entry
	subq.b	#1,d1                           	| [...]
	jne	l_3a3c                             	| [$3a67: djnz $3A3C]
	rts                                    	| [$3a69: ret]

	
random_stuff_3a6a:
	jbsr	exx                               	| [$3a6a: exx]
	move.b	general_fast_timer_9400(a6),d0                   	| [$3a6b: ld   a,($9400)]
	move.b	d0,d5                           	| [$3a6e: ld   h,a]
	ror.b	#3,d0                            	| [$3a6f: rrca] * 3
	add.b	d5,d0                            	| [$3a72: add  a,h]
	move.b	d0,(displayed_x_03,a3)              | [$3a73: ld   (iy+$03),a]
	and.b	#0x0F,d0                         	| [$3a76: and  $0F]
	add.b	#0xEC,d0                         	| [$3a78: add  a,$EC]
	jbsr	exx                               	| [$3a7a: exx]
	rts                                    	| [$3a7b: ret]

* < D2
random_stuff_3aae:
	jbsr	randomize_direction_1381           | [$3aae: call $1381]
	move.b	d0,(displayed_x_03,a3)                    	| [$3ab1: ld   (iy+$03),a]
	and.b	#0x3F,d0                         	| [$3ab4: and  $3F]
	add.b	d2,d0                            	| [$3ab6: add  a,c]
	rts                                    	| [$3ab7: ret]

starfield_related_3ab8:
	lea	bullet_sprite_shadow_ram_9918(a6),a3                      	| [$3ab8: ld   iy,$9918]
	lea	l_A118(a6),a2                          	| [$3abc: ld   ix,$A118]
	READ_ROM_BYTE	0x09F8,d0                       	| [$3ac0: ld   a,($09F8)]
	move.b	d0,d1                           	| [$3ac3: ld   b,a]
	move.w	#0x0004,d3                      	| [$3ac4: ld   de,$0004]
l_3ac7:
	jbsr	randomize_star_pos_3ae4                            	| [$3ac7: call $3AE4]
	add.w	d3,a3                            	| [$3aca: add  iy,de]
	add.w	d3,a2                            	| [$3acc: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3ac7                             	| [$3ace: djnz $3AC7]
	* next slot (skip 1 slot)
	add.w	d3,a2                            	| [$3ad0: add  ix,de]
	add.w	d3,a2                            	| [$3ad2: add  ix,de]
	add.w	d3,a3                            	| [$3ad4: add  iy,de]
	add.w	d3,a3                            	| [$3ad6: add  iy,de]
	move.b	#0x08,d1                        	| [$3ad8: ld   b,$08]
l_3ada:
	jbsr	randomize_star_pos_3ae4                            	| [$3ada: call $3AE4]
	add.w	d3,a2                            	| [$3add: add  ix,de]
	add.w	d3,a3                            	| [$3adf: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3ada                             	| [$3ae1: djnz $3ADA]
	rts                                    	| [$3ae3: ret]

randomize_star_pos_3ae4:
	jbsr	randomize_direction_1381                            	| [$3ae4: call $1381]
	move.b	d0,(displayed_y_00,a3)             | [$3ae7: ld   (iy+$00),a]
	ror.b	#4,d0                            	| [$3aea: rrca] * 4
	move.b	d0,(displayed_x_03,a3)           | [$3aee: ld   (iy+$03),a]
	rts                                    	| [$3af1: ret]

randomize_18_star_positions_3af2:
	lea	l_9860(a6),a3                      	| [$3af2: ld   iy,$9860]
	lea	l_90B0(a6),a2                      	| [$3af6: ld   ix,$90B0]
	                       	| [$3afa: ld   a,($0664)]
	move.b	#0x12,d1                           	| [$3afd: ld   b,a] 18 stars
	move.w	#0x0004,d3                      	| [$3afe: ld   de,$0004]
l_3b01:
	move.b	(enemy_active_00,a2),d0                    	| [$3b01: ld   a,(ix+$00)]
	                               	| [$3b04: and  a]
	jne	l_3b12                             	| [$3b05: jr   nz,$3B12]
	jbsr	randomize_star_pos_3ae4          | [$3b07: call $3AE4]
	clr.b	(sprite_code_01,a3)                 | [$3b0a: ld   (iy+$01),$00]
	clr.b	(sprite_code_02,a3)                | [$3b0e: ld   (iy+$02),$00]
l_3b12:
	add.w	d3,a3                            	| [$3b12: add  iy,de] advance 1 sprite slot
	add.w	d3,a2                            	| [$3b14: add  ix,de] advance 4 star structures
	add.w	d3,a2                            	| [$3b16: add  ix,de]
	add.w	d3,a2                            	| [$3b18: add  ix,de]
	add.w	d3,a2                            	| [$3b1a: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3b01                             	| [$3b1c: djnz $3B01]
	rts                                    	| [$3b1e: ret]

l_3b2d:
	lea	l_9860(a6),a3                      	| [$3b2d: ld   iy,$9860]
	lea	l_90B0(a6),a2                      	| [$3b31: ld   ix,$90B0]
	move.b	#0x12,d1                        	| [$3b35: ld   b,$12]
	move.w	#0x0004,d3                      	| [$3b37: ld   de,$0004]
l_3b3a:
	move.b	(0x00,a2),d0                    	| [$3b3a: ld   a,(ix+$00)]
	                               	| [$3b3d: and  a]
	jne	l_3b44                             	| [$3b3e: jr   nz,$3B44]
	clr.b	(0x00,a3)                        	| [$3b40: ld   (iy+$00),$00]
l_3b44:
	add.w	d3,a3                            	| [$3b44: add  iy,de]
	add.w	d3,a2                            	| [$3b46: add  ix,de]
	add.w	d3,a2                            	| [$3b48: add  ix,de]
	add.w	d3,a2                            	| [$3b4a: add  ix,de]
	add.w	d3,a2                            	| [$3b4c: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3b3a                             	| [$3b4e: djnz $3B3A]
	rts                                    	| [$3b50: ret]

l_4001:
	clr.b	d2                               	| [$4001: ld   c,$00]
	move.b	(displayed_x_03,a3),d1                    	| [$4003: ld   b,(iy+$03)]
	move.b	d5,d0                           	| [$4006: ld   a,h]
	sub.b	d1,d0                            	| [$4007: sub  b]
	cmp.b	#0x80,d0                         	| [$4008: cp   $80]
	jcs	l_4010                             	| [$400a: jr   c,$4010]
	neg.b	d0                               	| [$400c: neg]
	bset.b	#0,d2                           	| [$400e: set  0,c]
l_4010:
	move.b	d0,d3                           	| [$4010: ld   d,a]
	move.b	(displayed_y_00,a3),d1                    	| [$4011: ld   b,(iy+$00)]
	move.b	d6,d0                           	| [$4014: ld   a,l]
	sub.b	d1,d0                            	| [$4015: sub  b]
	cmp.b	#0x80,d0                         	| [$4016: cp   $80]
	jcs	l_401e                             	| [$4018: jr   c,$401E]
	neg.b	d0                               	| [$401a: neg]
	bset.b	#1,d2                           	| [$401c: set  1,c]
l_401e:
	move.b	d0,d4                           	| [$401e: ld   e,a]
	clr.b	d6                               	| [$401f: ld   l,$00]
	sub.b	d3,d0                            	| [$4021: sub  d]
	jeq	l_4095                             	| [$4022: jr   z,$4095]
	jcc	l_402a                             	| [$4024: jr   nc,$402A]
	bset.b	#2,d2                           	| [$4026: set  2,c]
	jra	l_4031                             	| [$4028: jr   $4031]

l_402a:
	move.b	d3,d5                           	| [$402a: ld   h,d]
	jbsr	l_4073                            	| [$402b: call $4073]
	jra	l_4036                             	| [$402e: jp   $4036]

l_4031:
	move.b	d4,d5                           	| [$4031: ld   h,e]
	move.b	d3,d4                           	| [$4032: ld   e,d]
	jbsr	l_4073                            	| [$4033: call $4073]
l_4036:
	move.b	d2,d0                           	| [$4036: ld   a,c]
	LEA_ROM	0x409E,a0                          	| [$4037: ld   hl,$409E]
	ADD_D0_TO_A0_0018                   | [$403a: rst  $18]
	move.b	d1,d0                           	| [$403b: ld   a,b]
	ror.b	#2,d0                            	| [$403c: rrca] * 2
	and.b	#0x1F,d0                         	| [$403e: and  $1F]
	btst.b	#5,(a0)                         	| [$4040: bit  5,(hl)]
	jeq	l_4049                             	| [$4042: jr   z,$4049]
	move.b	d0,d1                           	| [$4044: ld   b,a]
	READ_ROM_BYTE	0x154C,d0                       	| [$4045: ld   a,($154C)]
	sub.b	d1,d0                            	| [$4048: sub  b]
l_4049:
	add.b	(a0),d0                          	| [$4049: add  a,(hl)]
	move.b	d0,(0x04,a2)                    	| [$404a: ld   (ix+$04),a]
	rts                                    	| [$404d: ret]

init_end_of_level_sequence_404e:
	jbsr	update_starfield_in_game_3804                            	| [$404e: call $3804]
	jbsr	randomize_18_star_positions_3af2   | [$4051: call $3AF2]
	move.b	#0x5A,d0                        	| [$4054: ld   a,$5A]
	move.b	d0,distance_to_center_9465(a6)                   	| [$4056: ld   ($9465),a]
	jbsr	fading_away_computation_start_1b86                            	| [$4059: call $1B86]
*  ROM checksum
*	clr.b	d1                               	| [$405c: ld   b,$00]
*	LEA_ROM	0x2DED,a0                          	| [$405e: ld   hl,$2DED]
*	sub.b	d0,d0                            	| [$4061: sub  a]
*l_4062:
*	move.b	(a0),d7
*	eor.b	d7,d0                            	| [$4062: xor  (hl)]
*	addq.w	#1,a0                           	| [$4063: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_4062                             	| [$4064: djnz $4062]
*	add.b	#0x40,d0                         	| [$4066: add  a,$40]
*	jne	l_0192                             	| [$4068: jp   nz,$0192]
	move.b	#0xFB,d0                        	| [$406b: ld   a,$FB]
	move.b	d0,stars_speed_943B(a6)                   	| [$406d: ld   ($943B),a]
	jra	next_game_state_080b                             	| [$4070: jp   $080B]

* < D4/D5/D6 (byte)
* > D1
l_4073:
	READ_ROM_BYTE	0x0661,d0                       	| [$4073: ld   a,($0661)]
	moveq	#0,d1
	move.b	d0,d1                           	| [$4076: ld   b,a]
	subq	#1,d1		| for dbf
	CLEAR_XC_FLAGS                               	| [$4077: xor  a]
l_4078:
	LOAD_D5_16_FROM_D5D6
	addx.w	d5,d5                           	| [$4078: adc  hl,hl]
	scs		d7			| save carry
	LOAD_D5D6_FROM_D5_16
	move.b	d5,d0                           	| [$407a: ld   a,h]
	tst.b	d7
	jne	l_4080                             	| [$407b: jr   c,$4080]
	cmp.b	d4,d0                            	| [$407d: cp   e]
	jcs	l_4083                             	| [$407e: jr   c,$4083]
l_4080:
	sub.b	d4,d0                            	| [$4080: sub  e]
	move.b	d0,d5                           	| [$4081: ld   h,a]
	CLEAR_XC_FLAGS                         	| [$4082: xor  a]
l_4083:
	INVERT_XC_FLAGS                        	| [$4083: ccf]
	dbf	d1,l_4078                             	| [$4084: djnz $4078]
	move.b	d6,d1                           	| [$4086: ld   b,l]
	rts                                    	| [$4087: ret]

l_4095:
	LEA_ROM	0x416D,a0                          	| [$4095: ld   hl,$416D]
	move.b	d2,d0                           	| [$4098: ld   a,c]
	jbsr	fetch_a0_plus_d0_0008                            	| [$4099: rst  $08]
	move.b	d0,(0x04,a2)                    	| [$409a: ld   (ix+$04),a]
	rts                                    	| [$409d: ret]

clear_screen_and_go_to_demo_4104:
	jbsr	osd_read_dsw_3                       	| [$4104: ld   a,($C100)]
	not.b	d0                               	| [$4107: cpl]
	btst.b	#0,d0                           	| [$4108: bit  0,a]
	beq.b	0f                               	| [...]
	jbsr	l_5dc2                            	| [$410a: call nz,$5DC2]
0:
* ROM checksum
*	clr.b	d1                               	| [$410d: ld   b,$00]
*	LEA_ROM	0x0170,a0                          	| [$410f: ld   hl,$0170]
*	CLEAR_XC_FLAGS                         	| [$4112: xor  a]
*	clr.b	d0                               	| [$4112: xor  a]
*l_4113:
*	add.b	(a0),d0                          	| [$4113: add  a,(hl)]
*	subq.w	#1,a0                           	| [$4114: dec  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_4113                             	| [$4115: djnz $4113]
*	add.b	#0xF7,d0                         	| [$4117: add  a,$F7]
*	jne	l_152b                             	| [$4119: jp   nz,$152B]
	jbsr	l_01d6                            	| [$411c: call $01D6]
	jra	next_game_state_080b                             	| [$411f: jp   $080B]

l_4171:
	move.b	l_960A(a6),d0                   	| [$4171: ld   a,($960A)]
	move.b	d0,d1                           	| [$4174: ld   b,a]
	move.b	difficulty_9444(a6),d0                   	| [$4175: ld   a,($9444)]
	cmp.b	#0x04,d0                         	| [$4178: cp   $04]
	jcs	l_417d                             	| [$417a: jr   c,$417D]
	addq.b	#1,d1                           	| [$417c: inc  b]
l_417d:
	move.b	d1,d0                           	| [$417d: ld   a,b]
	add.b	d0,d0                            	| [$417e: add  a,a]
	add.b	d1,d0                            	| [$417f: add  a,b]
	add.b	d0,d0                            	| [$4180: add  a,a]
	LEA_ROM	0x41DF,a0                          	| [$4181: ld   hl,$41DF]
	ADD_D0_TO_A0_0018                            	| [$4184: rst  $18]
	exg	a1,a0                              	| [$4185: ex   de,hl]
	lea	l_900E(a6),a0                      	| [$4186: ld   hl,$900E]
	move.b	(a0),d0                         	| [$4189: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$418a: cp   $02]
	jcs	l_4191                             	| [$418c: jr   c,$4191]
	READ_ROM_BYTE	0x1206,d0                       	| [$418e: ld   a,($1206)] [uncovered]
l_4191:
	addq.b	#1,(a0)                         	| [$4191: inc  (hl)]
	exg	a1,a0                              	| [$4192: ex   de,hl]
	jbsr	load_rom_pointer_in_a1_d3_0010                            	| [$4193: rst  $10]
	move.b	(a1)+,d0                         	| [$4194: ld   a,(de)]
	move.b	d0,l_905E(a6)                   	| [$4195: ld   ($905E),a]
	                           	| [$4198: inc  de]
	move.b	(a1)+,d0                         	| [$4199: ld   a,(de)]
	move.b	d0,l_90AE(a6)                   	| [$419a: ld   ($90AE),a]
	                           	| [$419d: inc  de]
	move.b	(a1)+,d0                         	| [$419e: ld   a,(de)]
	move.b	d0,l_90DE(a6)                   	| [$419f: ld   ($90DE),a]
	                           	| [$41a2: inc  de]
	move.b	(a1)+,d0                         	| [$41a3: ld   a,(de)]
	move.b	d0,l_92AE(a6)                   	| [$41a4: ld   ($92AE),a]
	                          	| [$41a7: inc  de]
	move.b	(a1)+,d0                         	| [$41a8: ld   a,(de)]
	move.b	d0,l_911E(a6)                   	| [$41a9: ld   ($911E),a]
	                           	| [$41ac: inc  de]
	move.b	(a1)+,d0                         	| [$41ad: ld   a,(de)]
	move.b	d0,l_909E(a6)                   	| [$41ae: ld   ($909E),a]
	                           	| [$41b1: inc  de]
	move.b	(a1)+,d0                         	| [$41b2: ld   a,(de)]
	move.b	d0,l_908E(a6)                   	| [$41b3: ld   ($908E),a]
	                           	| [$41b6: inc  de]
	move.b	(a1)+,d0                         	| [$41b7: ld   a,(de)]
	move.b	d0,l_907E(a6)                   	| [$41b8: ld   ($907E),a]
	                           	| [$41bb: inc  de]
	move.b	(a1)+,d0                         	| [$41bc: ld   a,(de)]
	move.b	d0,attack_frequency_912e(a6)                   	| [$41bd: ld   ($912E),a]
	                          	| [$41c0: inc  de]
	move.b	(a1)+,d0                         	| [$41c1: ld   a,(de)]
	move.b	d0,l_91DE(a6)                   	| [$41c2: ld   ($91DE),a]
	                           	| [$41c5: inc  de]
	move.b	(a1)+,d0                         	| [$41c6: ld   a,(de)]
	move.b	d0,l_901E(a6)                   	| [$41c7: ld   ($901E),a]
	                           	| [$41ca: inc  de]
	move.b	(a1)+,d0                         	| [$41cb: ld   a,(de)]
	move.b	d0,l_914E(a6)                   	| [$41cc: ld   ($914E),a]
	                           	| [$41cf: inc  de]
	move.b	(a1)+,d0                         	| [$41d0: ld   a,(de)]
	move.b	d0,l_920E(a6)                   	| [$41d1: ld   ($920E),a]
	                           	| [$41d4: inc  de]
	move.b	(a1)+,d0                         	| [$41d5: ld   a,(de)]
	move.b	d0,unknown_active_flag_92de(a6)                   	| [$41d6: ld   ($92DE),a]
	                           	| [$41d9: inc  de]
	move.b	(a1),d0                         	| [$41da: ld   a,(de)]
	move.b	d0,l_92EE(a6)                   	| [$41db: ld   ($92EE),a]
	rts                                    	| [$41de: ret]

game_over_4255:
	LEA_ROM	0x4251,a0                          	| [$4255: ld   hl,$4251]
	move.b	general_fast_timer_9400(a6),d0                   	| [$4258: ld   a,($9400)]
	ror.b	#3,d0                            	| [$425b: rrca] * 3
	and.b	#0x03,d0                         	| [$425e: and  $03]
	jbsr	fetch_a0_plus_d0_0008                            	| [$4260: rst  $08]
	lea	0x8270,a0                          	| [$4261: ld   hl,$8270]
	move.w	#-0x20,d3                       	| [$4264: ld   de,$FFE0]
	move.b	#0x0C,d1                        	| [$4267: ld   b,$0C]
l_4269:
	jbsr	osd_w_videoram                         	| [$4269: ld   (hl),a]
	add.w	d3,a0                            	| [$426a: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_4269                             	| [$426b: djnz $4269]
	move.b	#0xFD,d0                        	| [$426d: ld   a,$FD]
	move.b	d0,stars_speed_943B(a6)                   	| [$426f: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$4272: call $3831]
	lea	distance_to_center_9465(a6),a0                      	| [$4275: ld   hl,$9465]
	subq.b	#1,(a0)                         	| [$4278: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$4279: ret  nz] [...]
0:
	clr.b	d2                               	| [$427a: ld   c,$00]
	* another ROM check that changes state if checksum fails
	* after game over
	                          	| [$427c: ld   hl,$4683]
	move.b	global_state_942B(a6),d0                   	| [$427f: ld   a,($942B)]

                         	| [$4282: sub  (hl)]
          	| [$4283: inc  hl]
                       	| [$4284: dec  c]
                      	| [$4285: jr   nz,$4282]
                        	| [$4287: sub  $0E]
	move.b	d0,global_state_942B(a6)                   	| [$4289: ld   ($942B),a]
	jbsr	allocate_high_score_entry_15a0              | [$428c: call $15A0]
	jcc	l_42a3                             	| [$428f: jp   nc,$42A3]
	* we have a highscore: perform name entry
	move.w	#0x0309,d3                          	| [$4292: ld   de,$0309] [uncovered]
	jbsr	start_task_d3_0038                            	| [$4295: rst  $38] [uncovered]
	move.w	#0x030B,d3                          	| [$4296: ld   de,$030B] [uncovered]
	jbsr	start_task_d3_0038                            	| [$4299: rst  $38] [uncovered]
												| [$429a: ld   a,($5E25)] [uncovered]
	move.b	#0xB,sub_state_942C(a6)                   	| [$429d: ld   ($942C),a] [uncovered]
	jra	l_13d1                             	| [$42a0: jp   $13D1] [uncovered]

l_42a3:
	jbsr	l_01d6                            	| [$42a3: call $01D6]
	jra	next_game_state_080b                             	| [$42a6: jp   $080B]
l_42DC:
	move.b	#0x0E,d1                        	| [$42dc: ld   b,$0E]
	move.w	#0x001F,d3                      	| [$42de: ld   de,$001F]
	lea	0x869E,a0                          	| [$42e1: ld   hl,$869E]
l_42e4:
	WRITE_VIDEORAM	0x83                      	| [$42e4: ld   (hl),$83]
	addq.w	#1,a0                           	| [$42e6: inc  hl]
	WRITE_VIDEORAM	0x83                      	| [$42e7: ld   (hl),$83]
	add.w	d3,a0                            	| [$42e9: add  hl,de]
	* game writes past the screen address, protect against that
	cmp.l	#0x8800,a0
	jcc		0f
	subq.b	#1,d1                           	| [...]
	jne	l_42e4                             	| [$42ea: djnz $42E4]
0:
	move.b	lives_9600(a6),d0               	| [$42ec: ld   a,(lives_9600)]
	                               	| [$42ef: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$42f0: ret  z] [...]
0:
	* displays lives on the bottom left of the screen
	cmp.b	#0x06,d0                         	| [$42f1: cp   $06]
	jcs	l_42f8                             	| [$42f3: jr   c,$42F8]
	READ_ROM_BYTE	0x21EA,d0                       	| [$42f5: ld   a,($21EA)] [uncovered]
l_42f8:
	move.b	d0,d1                           	| [$42f8: ld   b,a]
	* read video ram address
	LEA_ROM	0x432A,a0                          	| [$42f9: ld   hl,$432A]
	jbsr	load_word_in_d3_0010	      	| [$42fc: rst  $10]
	exg	d3,a0                              	| [$42fd: ex   de,hl]
l_42fe:
	move.w	#0x001F,d3                      	| [$42fe: ld   de,$001F]
l_4301:
	WRITE_VIDEORAM	0x68                      	| [$4301: ld   (hl),$68]
	BCLR_A0	10                           	| [$4303: res  2,h]
	WRITE_VIDEORAM	0x02                      	| [$4305: ld   (hl),$02]
	BSET_A0	10                           	| [$4307: set  2,h]
	addq.w	#1,a0                           	| [$4309: inc  l]
	WRITE_VIDEORAM	0x1F                      	| [$430a: ld   (hl),$1F]
	BCLR_A0	10                          	| [$430c: res  2,h]
	WRITE_VIDEORAM	0x02                      	| [$430e: ld   (hl),$02]
	BSET_A0	10                           	| [$4310: set  2,h]
	add.w	d3,a0                            	| [$4312: add  hl,de]
	WRITE_VIDEORAM	0xF2                      	| [$4313: ld   (hl),$F2]
	BCLR_A0	10                           	| [$4315: res  2,h]
	WRITE_VIDEORAM	0x02                      	| [$4317: ld   (hl),$02]
	BSET_A0	10                          	| [$4319: set  2,h]
	addq.w	#1,a0                           	| [$431b: inc  l]
	WRITE_VIDEORAM	0x61                      	| [$431c: ld   (hl),$61]
	BCLR_A0	10                           	| [$431e: res  2,h]
	WRITE_VIDEORAM	0x02                      	| [$4320: ld   (hl),$02]
	BSET_A0	10                          	| [$4322: set  2,h]
	add.w	d3,a0                            	| [$4324: add  hl,de]
	subq.b	#0x03,d0                        	| [$4325: sub  $03]
	subq.b	#1,d1                           	| [...]
	jne	l_4301                             	| [$4327: djnz $4301]
	rts                                    	| [$4329: ret]

l_43f4:
	clr.b	d0                               	| [$43f4: xor  a]
	move.b	d0,update_sequence_control_flag_a7fd(a6)                       	| [$43f5: ld   ($A7FD),a]
	jbsr	l_0ecb                            	| [$43f8: call $0ECB]
	jbsr	music_off_5c88                            	| [$43fb: call $5C88]
	jbsr	l_5dd4                            	| [$43fe: call $5DD4]
	jbsr	l_01d6                            	| [$4401: call $01D6]
	* another ROM check after ship killed in the attract play
	                        	| [$4404: ld   c,$00]
	                          	| [$4406: ld   hl,$4C09]
	move.b	sub_state_942C(a6),d0                   	| [$4409: ld   a,($942C)]
									
													| [$440c: sub  (hl)]
									| [$440d: inc  hl]
													| [$440e: dec  c]
												| [$440f: jr   nz,$440C]
													| [$4411: xor  $02]
									
									| [$4413: ld   ($942C),a]
	jra	next_game_state_080b                             	| [$4416: jp   $080B]

l_4516:
	move.b	l_91AE(a6),d0                   	| [$4516: ld   a,($91AE)]
	                               	| [$4519: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$451a: ret  nz] [...]
0:
	move.b	l_914E(a6),d0                   	| [$451b: ld   a,($914E)]
	                               	| [$451e: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$451f: ret  z] [...]
0:
	lea	iceberg_on_screen_915e(a6),a0                      	| [$4520: ld   hl,$915E]
	move.b	(a0),d0                         	| [$4523: ld   a,(hl)]
	                               	| [$4524: and  a]
	jne	iceberg_is_active_4579                             	| [$4525: jr   nz,$4579]
	move.b	l_9605(a6),d0                   	| [$4527: ld   a,($9605)]
	                               	| [$452a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$452b: ret  z] [...]
0:
	move.b	l_906E(a6),d0                   	| [$452c: ld   a,($906E)]
	                               	| [$452f: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4530: ret  nz] [...]
0:
	move.b	l_90A0(a6),d0                   	| [$4531: ld   a,($90A0)]
	                               	| [$4534: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4535: ret  nz] [...]
0:
	move.b	at_least_one_active_enemy_902E(a6),d0                   	| [$4536: ld   a,($902E)]
	                               	| [$4539: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$453a: ret  z] [...]
0:
	move.b	level_playing_flag_9000(a6),d0                   	| [$453b: ld   a,($9000)]
	addq.b	#1,d0                           	| [$453e: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$453f: ret  nz] [...]
0:
	subq.b	#1,(a0)                         	| [$4540: dec  (hl)]
	lea	l_90A0(a6),a2                      	| [$4541: ld   ix,$90A0]
	lea	l_9858(a6),a3                      	| [$4545: ld   iy,$9858]
	subq.b	#1,(0x00,a2)                    	| [$4549: dec  (ix+$00)]
	jbsr	l_5cfe                            	| [$454c: call $5CFE]
	lea	l_9006(a6),a0                      	| [$454f: ld   hl,$9006]
	move.b	general_fast_timer_9400(a6),d0                   	| [$4552: ld   a,($9400)]
	rol.b	#2,d0                            	| [$4555: rlca] * 2
	and.b	#0x01,d0                         	| [$4557: and  $01]
	jeq	l_455c                             	| [$4559: jr   z,$455C]
	addq.w	#1,a0                           	| [$455b: inc  l]
l_455c:
	move.b	(a0),d0                         	| [$455c: ld   a,(hl)]
	move.b	d0,(0x03,a3)                    	| [$455d: ld   (iy+$03),a]
	READ_ROM_BYTE	0x24F8,d0                       	| [$4560: ld   a,($24F8)]
	move.b	d0,(0x00,a3)                    	| [$4563: ld   (iy+$00),a]
	jbsr	l_45a3                            	| [$4566: call $45A3]
	LEA_ROM	0x055E,a0                          	| [$4569: ld   hl,$055E]
	clr.b	d0                               	| [$456c: xor  a]
	move.b	#0x80,d1                        	| [$456d: ld   b,$80]
l_456f:
	sub.b	(a0)+,d0                          	| [$456f: sub  (hl)]
	                           	| [$4570: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_456f                             	| [$4571: djnz $456F]
	add.b	#0x9F,d0                         	| [$4573: add  a,$9F]
	move.b	d0,sub_state_942C(a6)                   	| [$4575: ld   ($942C),a]
	rts                                    	| [$4578: ret]

iceberg_is_active_4579:
	jbsr	l_5ce6                            	| [$4579: call $5CE6]
	lea	l_90A0(a6),a2                      	| [$457c: ld   ix,$90A0]
	lea	l_9858(a6),a3                      	| [$4580: ld   iy,$9858]
	st.b	(0x00,a2)                 	| [$4584: ld   (ix+$00),$FF]
	move.b	l_960A(a6),d0                   	| [$4588: ld   a,($960A)]
	and.b	#0x1F,d0                         	| [$458b: and  $1F]
	READ_ROM_WORD	0x44C6,d3                          	| [$458d: ld   hl,$44C6]
	move.b	(0x00,a3),d5                    	| [$4591: ld   h,(iy+$00)]
	move.b	(0x03,a2),d6                    	| [$4594: ld   l,(ix+$03)]
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$4597: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x00,a3)                    	| [$4598: ld   (iy+$00),h]
	move.b	d6,(0x03,a2)                    	| [$459b: ld   (ix+$03),l]
	move.b	d5,d0                           	| [$459e: ld   a,h]
	cmp.b	#0x20,d0                         	| [$459f: cp   $20]
	jcs	l_45ee                             	| [$45a1: jr   c,$45EE]
l_45a3:
	LEA_ROM	0x460A,a0                          	| [$45a3: ld   hl,$460A]
	ror.b	#4,d0                            	| [$45a6: rrca] * 4
	and.b	#0x0E,d0                         	| [$45aa: and  $0E]
	jbsr	fetch_a0_plus_d0_0008                            	| [$45ac: rst  $08]
	move.b	d0,(0x01,a3)                    	| [$45ad: ld   (iy+$01),a]
	move.b	d0,d1                           	| [$45b0: ld   b,a]
	addq.w	#1,a0                           	| [$45b1: inc  hl]
	move.b	(a0),d0                         	| [$45b2: ld   a,(hl)]
	move.b	d0,(0x02,a3)                    	| [$45b3: ld   (iy+$02),a]
	btst.b	#4,d0                           	| [$45b6: bit  4,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$45b8: ret  z] [...]
0:
	move.b	d0,(0x06,a3)                    	| [$45b9: ld   (iy+$06),a]
	addq.b	#1,d1                           	| [$45bc: inc  b]
	move.b	d1,(0x05,a3)                    	| [$45bd: ld   (iy+$05),b]
	move.b	level_playing_flag_9000(a6),d0                   	| [$45c0: ld   a,($9000)]
	addq.b	#1,d0                           	| [$45c3: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$45c4: ret  nz] [...]
0:
	move.b	player_ship_angle_9001(a6),d0                   	| [$45c5: ld   a,($9001)]
	sub.b	(displayed_x_03,a3),d0                     	| [$45c8: sub  (iy+$03)]
	addq.b	#0x04,d0                        	| [$45cb: add  a,$04]
	cmp.b	#0x09,d0                         	| [$45cd: cp   $09]
	bcs.b	0f                               	| [...]
	rts                                    	| [$45cf: ret  nc] [...]
0:
	move.b	#0x28,d0                        	| [$45d0: ld   a,$28]
	sub.b	(displayed_y_00,a3),d0                     	| [$45d2: sub  (iy+$00)]
	addq.b	#0x04,d0                        	| [$45d5: add  a,$04]
	cmp.b	#0x09,d0                         	| [$45d7: cp   $09]
	bcs.b	0f                               	| [...]
	rts                                    	| [$45d9: ret  nc] [...]
0:
	tst.b	invincible_flag
	jeq		0f
	rts
0:
	* kill the player
	move.b	#0xF0,d0                        	| [$45da: ld   a,$F0]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$45dc: ld   ($9000),a]
	rts                                    	| [$45df: ret]

l_45e0:
	move.b	#0xFC,d0                        	| [$45e0: ld   a,$FC]
	move.b	d0,stars_speed_943B(a6)                   	| [$45e2: ld   ($943B),a]
	jbsr	update_starfield_inter_levels_3831                            	| [$45e5: call $3831]
	jbsr	l_01d6                            	| [$45e8: call $01D6]
	jra	next_game_state_080b                             	| [$45eb: jp   $080B]

l_45ee:
	clr.b	(0x00,a2)                        	| [$45ee: ld   (ix+$00),$00]
	clr.b	(0x00,a3)                        	| [$45f2: ld   (iy+$00),$00]
	clr.b	d0                               	| [$45f6: xor  a]
	move.b	d0,iceberg_on_screen_915e(a6)                   	| [$45f7: ld   ($915E),a]
	move.b	l_901E(a6),d0                   	| [$45fa: ld   a,($901E)]
	move.b	d0,d1                           	| [$45fd: ld   b,a]
	move.b	difficulty_9444(a6),d0                   	| [$45fe: ld   a,($9444)]
	add.b	d0,d0                            	| [$4601: add  a,a]
	add.b	d0,d0                            	| [$4602: add  a,a]
	sub.b	#0x0C,d0                         	| [$4603: sub  $0C]
	add.b	d1,d0                            	| [$4605: add  a,b]
	move.b	d0,l_906E(a6)                   	| [$4606: ld   ($906E),a]
	rts                                    	| [$4609: ret]

bonus_central_ship_appearing_463a:
	move.b	(0x08,a2),d0                    	| [$463a: ld   a,(ix+$08)]
	                               	| [$463d: and  a]
	jeq	l_470a                             	| [$463e: jp   z,$470A]
	subq.b	#1,(0x08,a2)                    	| [$4641: dec  (ix+$08)]
	move.b	d0,d1                           	| [$4644: ld   b,a]
	move.b	(0x09,a2),d0                    	| [$4645: ld   a,(ix+$09)]
	jbsr	jump_table_jump_0030                            	| [$4648: rst  $30]
* [jump_table]
	.long	l_464f
	.long	l_4668
	.long	l_4686

l_464f:
	move.b	l_926E(a6),d0                   	| [$464f: ld   a,($926E)]
	move.b	d0,(0x03,a3)                    	| [$4652: ld   (iy+$03),a]
	move.b	general_fast_timer_9400(a6),d0                   	| [$4655: ld   a,($9400)]
	move.b	d0,d5                           	| [$4658: ld   h,a]
	move.b	d1,d0                           	| [$4659: ld   a,b]
	btst.b	#0,d5                           	| [$465a: bit  0,h]
	jne	l_4660                             	| [$465c: jr   nz,$4660]
	neg.b	d0                               	| [$465e: neg]
l_4660:
	add.b	#0x70,d0                         	| [$4660: add  a,$70]
	move.b	d0,(0x00,a3)                    	| [$4662: ld   (iy+$00),a]
	jra	l_46a3                             	| [$4665: jp   $46A3]

l_4668:
	move.b	d1,d0                           	| [$4668: ld   a,b]
	asr.b	#1,d0                            	| [$4669: sra  a]
	add.b	#0x70,d0                         	| [$466b: add  a,$70]
	move.b	d0,(0x00,a3)                    	| [$466d: ld   (iy+$00),a]
	move.b	l_926E(a6),d0                   	| [$4670: ld   a,($926E)]
	move.b	d0,d2                           	| [$4673: ld   c,a]
	move.b	general_fast_timer_9400(a6),d0                   	| [$4674: ld   a,($9400)]
	move.b	d0,d5                           	| [$4677: ld   h,a]
	move.b	d1,d0                           	| [$4678: ld   a,b]
	btst.b	#0,d5                           	| [$4679: bit  0,h]
	jne	l_467f                             	| [$467b: jr   nz,$467F]
	neg.b	d0                               	| [$467d: neg]
l_467f:
	add.b	d2,d0                            	| [$467f: add  a,c]
	move.b	d0,(0x03,a3)                    	| [$4680: ld   (iy+$03),a]
	jra	l_46a3                             	| [$4683: jp   $46A3]

l_4686:
	move.b	d1,d0                           	| [$4686: ld   a,b]
	asr.b	#1,d0                            	| [$4687: sra  a]
	neg.b	d0                               	| [$4689: neg]
	add.b	#0x70,d0                         	| [$468b: add  a,$70]
	move.b	d0,(0x00,a3)                    	| [$468d: ld   (iy+$00),a]
	move.b	l_926E(a6),d0                   	| [$4690: ld   a,($926E)]
	move.b	d0,d2                           	| [$4693: ld   c,a]
	move.b	general_fast_timer_9400(a6),d0                   	| [$4694: ld   a,($9400)]
	move.b	d0,d5                           	| [$4697: ld   h,a]
	move.b	d1,d0                           	| [$4698: ld   a,b]
	btst.b	#0,d5                           	| [$4699: bit  0,h]
	jne	l_469f                             	| [$469b: jr   nz,$469F]
	neg.b	d0                               	| [$469d: neg]
l_469f:
	add.b	d2,d0                            	| [$469f: add  a,c]
	move.b	d0,(0x03,a3)                    	| [$46a0: ld   (iy+$03),a]
l_46a3:
	LEA_ROM	0x46F8,a0                          	| [$46a3: ld   hl,$46F8]
	move.b	d1,d0                           	| [$46a6: ld   a,b]
	ror.b	#4,d0                            	| [$46a7: rrca] * 4
	and.b	#0x07,d0                         	| [$46ab: and  $07]
	jbsr	fetch_a0_plus_d0_0008                            	| [$46ad: rst  $08]
	move.b	d0,(0x01,a3)                    	| [$46ae: ld   (iy+$01),a]
	move.b	#0x08,(0x02,a3)                 	| [$46b1: ld   (iy+$02),$08]
	rts                                    	| [$46b5: ret]

start_title_screen_tasks_46b6:
	* enable simple sprite copy (earth in title is partially
	* made of sprites)
	move.b	#0x01,d0                        	| [$46b6: ld   a,$01]
	move.b	d0,sprite_sync_status_a7ff(a6)                       	| [$46b8: ld   ($A7FF),a]
	READ_ROM_BYTE	0x25C9,d0                       	| [$46bb: ld   a,($25C9)]
	move.b	d0,current_stage_960B(a6)                   	| [$46be: ld   ($960B),a]
	jbsr	l_4cea                            	| [$46c1: call $4CEA]
	move.w	#0x0100,d3                          	| [$46c4: ld   de,$0100]
	jbsr	start_task_d3_0038                            	| [$46c7: rst  $38]
	addq.b	#1,d3                           	| [$46c8: inc  e]
	jbsr	start_task_d3_0038                            	| [$46c9: rst  $38]
	addq.b	#1,d3                           	| [$46ca: inc  e]
	jbsr	start_task_d3_0038                            	| [$46cb: rst  $38]
	addq.b	#1,d3                           	| [$46cc: inc  e]
	jbsr	start_task_d3_0038                            	| [$46cd: rst  $38]
	move.w	#0x0104,d3                          	| [$46ce: ld   de,$0104]
	jbsr	start_task_d3_0038                            	| [$46d1: rst  $38]
	addq.b	#1,d3                           	| [$46d2: inc  e]
	jbsr	start_task_d3_0038                            	| [$46d3: rst  $38]
	clr.b	d1                               	| [$46d4: ld   b,$00]
* ROM checksum
*	LEA_ROM	0x34A3,a0                          	| [$46d6: ld   hl,$34A3]
*	sub.b	d0,d0                            	| [$46d9: sub  a]
*l_46da:
*	move.b	(a0),d7
*	eor.b	d7,d0                            	| [$46da: xor  (hl)]
*	addq.w	#1,a0                           	| [$46db: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_46da                             	| [$46dc: djnz $46DA]
*	add.b	#0x13,d0                         	| [$46de: add  a,$13]
*	jne	l_04ea                             	| [$46e0: jp   nz,$04EA]
	move.b	l_9440(a6),d0                   	| [$46e3: ld   a,($9440)]
	                               	| [$46e6: and  a]
	jne	l_46ed                             	| [$46e7: jr   nz,$46ED]
	move.w	#0x0107,d3                          	| [$46e9: ld   de,$0107]
	jbsr	start_task_d3_0038                            	| [$46ec: rst  $38]
l_46ed:
	move.w	#0x0707,d3                        	| [$46ed: ld   d,$07]
	jbsr	start_task_d3_0038                            	| [$46ef: rst  $38]
	move.b	#0xB4,d0                        	| [$46f0: ld   a,$B4]
	move.b	d0,distance_to_center_9465(a6)                   	| [$46f2: ld   ($9465),a]
	jra	next_game_state_080b                             	| [$46f5: jp   $080B]

l_470a:
	move.b	#0x18,(0x08,a2)                 	| [$470a: ld   (ix+$08),$18]
	move.b	#0x08,(0x0a,a2)                 	| [$470e: ld   (ix+$0a),$08]
	rts                                    	| [$4712: ret]

bonus_satellite_appearing_4713:
	subq.b	#1,(0x08,a2)                    	| [$4713: dec  (ix+$08)]
	jeq	l_474f                             	| [$4716: jr   z,$474F]
	st.b	d0                                	| [$4718: ld   a,$FF]
	add.b	(0x09,a2),d0                     	| [$471a: add  a,(ix+$09)]
	add.b	(0x03,a3),d0                     	| [$471d: add  a,(iy+$03)]
	move.b	d0,(0x03,a3)                    	| [$4720: ld   (iy+$03),a]
	jbsr	update_3_satellites_arrival_473c                            	| [$4723: call $473C]
	move.b	(0x08,a2),d0                    	| [$4726: ld   a,(ix+$08)]
	move.b	#0xFC,d1                        	| [$4729: ld   b,$FC]
	cmp.b	#0x0C,d0                         	| [$472b: cp   $0C]
	jcc	l_4731                             	| [$472d: jr   nc,$4731]
	move.b	#0xFE,d1                        	| [$472f: ld   b,$FE]
l_4731:
	move.b	(0x02,a3),d0                    	| [$4731: ld   a,(iy+$02)]
	add.b	d1,d0                            	| [$4734: add  a,b]
	move.b	d0,(0x02,a3)                    	| [$4735: ld   (iy+$02),a]
	move.b	d0,(0x06,a3)                    	| [$4738: ld   (iy+$06),a]
	rts                                    	| [$473b: ret]

update_3_satellites_arrival_473c:
	move.b	(0x09,a2),d0                    	| [$473c: ld   a,(ix+$09)]
	subq.b	#1,d0                           	| [$473f: dec  a]
	jeq	deploy_3_satellites_4745                             	| [$4740: jr   z,$4745]
	jra	l_304b                             	| [$4742: jp   $304B]

deploy_3_satellites_4745:
	move.b	double_fire_930E(a6),d0         	| [$4745: ld   a,(double_fire_930E)]
	                               	| [$4748: and  a]
	jeq	l_30c4                             	| [$4749: jp   z,$30C4]
	jra	l_304b                             	| [$474c: jp   $304B]

l_474f:
	move.b	#0x09,(0x0a,a2)                 	| [$474f: ld   (ix+$0a),$09]
	move.b	#0xFF,(0x00,a2)                 	| [$4753: ld   (ix+$00),$FF]
	move.b	#0xC0,(0x01,a2)                 	| [$4757: ld   (ix+$01),$C0]
	move.b	#0x07,(0x07,a2)                 	| [$475b: ld   (ix+$07),$07]
	clr.b	(0x06,a2)                        	| [$475f: ld   (ix+$06),$00]
	move.b	#0x05,(0x05,a2)                 	| [$4763: ld   (ix+$05),$05]
	move.b	(0x09,a2),d0                    	| [$4767: ld   a,(ix+$09)]
	cmp.b	#0x01,d0                         	| [$476a: cp   $01]
	jeq	l_4773                             	| [$476c: jr   z,$4773]
l_476e:
	move.b	#0x2C,(0x09,a2)                 	| [$476e: ld   (ix+$09),$2C]
	rts                                    	| [$4772: ret]

l_4773:
	move.b	double_fire_930E(a6),d0         	| [$4773: ld   a,(double_fire_930E)]
	                               	| [$4776: and  a]
	jne	l_476e                             	| [$4777: jr   nz,$476E]
	move.b	#0x28,(0x09,a2)                 	| [$4779: ld   (ix+$09),$28]
	rts                                    	| [$477d: ret]

handle_satellite_477e:
	lea	l_93AE(a6),a0                      	| [$477e: ld   hl,$93AE]
	addq.b	#1,(a0)                         	| [$4781: inc  (hl)]
	move.b	level_playing_flag_9000(a6),d0                   	| [$4782: ld   a,($9000)]
	addq.b	#1,d0                           	| [$4785: inc  a]
	jne	l_47e3                             	| [$4786: jr   nz,$47E3]
	move.b	(0x00,a3),d0                    	| [$4788: ld   a,(iy+$00)]
	cmp.b	#0x20,d0                         	| [$478b: cp   $20]
	jcs	l_47da                             	| [$478d: jr   c,$47DA]
	move.b	(0x07,a2),d0                    	| [$478f: ld   a,(ix+$07)]
	                               	| [$4792: and  a]
	jne	l_47bd                             	| [$4793: jr   nz,$47BD]
	LEA_ROM	0x47ED,a0                          	| [$4795: ld   hl,$47ED]
	addq.b	#1,(0x06,a2)                    	| [$4798: inc  (ix+$06)]
	move.b	(0x06,a2),d0                    	| [$479b: ld   a,(ix+$06)]
	jbsr	fetch_a0_plus_d0_0008                            	| [$479e: rst  $08]
	cmp.b	#0xFF,d0                         	| [$479f: cp   $FF]
	jeq	l_47ac                             	| [$47a1: jr   z,$47AC]
	move.b	d0,(0x01,a2)                    	| [$47a3: ld   (ix+$01),a]
	move.b	#0x05,(0x07,a2)                 	| [$47a6: ld   (ix+$07),$05]
	jra	l_47bd                             	| [$47aa: jr   $47BD]

l_47ac:
	subq.b	#1,(0x05,a2)                    	| [$47ac: dec  (ix+$05)]
	jeq	l_47e3                             	| [$47af: jr   z,$47E3]
	clr.b	(0x06,a2)                        	| [$47b1: ld   (ix+$06),$00]
	move.b	#0x05,(0x07,a2)                 	| [$47b5: ld   (ix+$07),$05]
	move.b	#0xC0,(0x01,a2)                 	| [$47b9: ld   (ix+$01),$C0]
l_47bd:
	subq.b	#1,(0x07,a2)                    	| [$47bd: dec  (ix+$07)]
	jbsr	l_4ecb                            	| [$47c0: call $4ECB]
	jbsr	l_2bb3                            	| [$47c3: call $2BB3]
l_47c6:
	move.b	(0x09,a2),d0                    	| [$47c6: ld   a,(ix+$09)]
	cmp.b	#0x28,d0                         	| [$47c9: cp   $28]
	jeq	l_47d0                             	| [$47cb: jr   z,$47D0]
	jra	l_304b                             	| [$47cd: jp   $304B]

l_47d0:
	move.b	double_fire_930E(a6),d0         	| [$47d0: ld   a,(double_fire_930E)]
	                               	| [$47d3: and  a]
	jeq	l_30c4                             	| [$47d4: jp   z,$30C4]
	jra	l_304b                             	| [$47d7: jp   $304B] [uncovered]

l_47da:
	clr.b	(a3)                        	| [$47da: ld   (iy+$00),$00]
	clr.b	(a2)                        	| [$47de: ld   (ix+$00),$00]
	rts                                    	| [$47e2: ret]

l_47e3:
	move.b	#0xC0,(0x01,a2)                 	| [$47e3: ld   (ix+$01),$C0]
	move.b	#0x04,(0x0a,a2)                 	| [$47e7: ld   (ix+$0a),$04]
	jra	l_47c6                             	| [$47eb: jr   $47C6]

l_4816:
	move.b	death_ray_sattelites_active_92BE(a6),d0                   	| [$4816: ld   a,($92BE)]
	                               	| [$4819: and  a]
	jne	update_death_ray_sattelites_48ba                             	| [$481a: jp   nz,$48BA]
	move.b	l_9605(a6),d0           | [$481d: ld   a,($9605)]
	                               	| [$4820: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4821: ret  z] [...]
0:
	move.b	unknown_active_flag_92de(a6),d0                   	| [$4822: ld   a,($92DE)]
	                               	| [$4825: and  a]
	bne.b	0f                      | [...]
	rts                             | [$4826: ret  z] [...]
0:
	move.b	unknown_active_flag_92ce(a6),d0          | [$4827: ld   a,($92CE)]
	                               	| [$482a: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$482b: ret  nz] [...]
0:
	move.b	l_9610(a6),d0                   	| [$482c: ld   a,($9610)]
	cmp.b	#0x03,d0                         	| [$482f: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4831: ret  c] [...]
0:
	* init sattelites & death ray
	* 90xx enemy structure
	LOAD_RAM_POINTER	first_death_ray_emitter_struct_9611(a6),a2         	| [$4832: ld   ix,($9611)]
	* 98xx sprite shadow structure
	LOAD_RAM_POINTER	first_death_ray_emitter_sprite_9613(a6),a3         	| [$4836: ld   iy,($9613)]
	* far away (Y axis)
	st.b	(displayed_y_00,a3)           | [$483a: ld   (iy+$00),$FF]
	st.b	(active_01,a2)                 	| [$483e: ld   (ix+$01),$FF]
	clr.b	(0x04,a2)                        	| [$4842: ld   (ix+$04),$00]
	clr.b	(0x0b,a2)                        	| [$4846: ld   (ix+$0b),$00]
	move.b	#0x1E,(0x0c,a2)                 	| [$484a: ld   (ix+$0c),$1E]
	move.b	#0xC0,(0x0d,a2)                 	| [$484e: ld   (ix+$0d),$C0]
	* random
	move.b	general_fast_timer_9400(a6),d0      | [$4852: ld   a,($9400)]
	rol.b	#2,d0                            	| [$4855: rlca] * 2
	and.b	#0x01,d0                         	| [$4857: and  $01]
	clr.w	d1                               	| [$485d: ld   b,$00]
	move.b	d0,d1                           	| [$4859: ld   c,a]
	lea	l_900A(a6),a0                      	| [$485a: ld   hl,$900A]
	add.w	d1,a0                            	| [$485f: add  hl,bc]
	move.b	(a0),d0                         	| [$4860: ld   a,(hl)]
	* sattelite #1
	move.b	d0,death_ray_sattelite_x_932e(a6)                   	| [$4861: ld   ($932E),a]
	add.b	#0x10,d0                         	| [$4864: add  a,$10]
	move.b	d0,(displayed_x_03,a3)                    	| [$4866: ld   (iy+$03),a]
	jbsr	update_death_ray_sattelite_size_4b1c                            	| [$4869: call $4B1C]
	LOAD_RAM_POINTER	second_death_ray_emitter_struct_9615(a6),a2         	| [$486c: ld   ix,($9615)]
	LOAD_RAM_POINTER	second_death_ray_emitter_sprite_9617(a6),a3         	| [$4870: ld   iy,($9617)]

	st.b	(active_01,a2)                 			| [$4874: ld   (ix+$01),$FF]
	move.b	#0x01,(orientation_04,a2)                 	| [$4878: ld   (ix+$04),$01]
	clr.b	(0x0b,a2)                        	| [$487c: ld   (ix+$0b),$00]
	move.b	#0x1E,(0x0c,a2)                 	| [$4880: ld   (ix+$0c),$1E]
	move.b	#0xC0,(0x0d,a2)                 	| [$4884: ld   (ix+$0d),$C0]
	* far away (Y axis)
	st.b	(displayed_y_00,a3)                 	| [$4888: ld   (iy+$00),$FF]
	move.b	death_ray_sattelite_x_932e(a6),d0                   	| [$488c: ld   a,($932E)]
	# sattelite #2
	add.b	#0xF0,d0                         	| [$488f: add  a,$F0]
	move.b	d0,(displayed_x_03,a3)                    	| [$4891: ld   (iy+$03),a]
	jbsr	update_death_ray_sattelite_size_4b1c                            	| [$4894: call $4B1C]
	LOAD_RAM_POINTER	death_ray_struct_9619(a6),a2         	| [$4897: ld   ix,($9619)]
	LOAD_RAM_POINTER	death_ray_sprite_961B(a6),a3         	| [$489b: ld   iy,($961B)]
	st.b	(displayed_y_00,a3)                 	| [$489f: ld   (iy+$00),$FF]
	st.b	(0x01,a2)                 	| [$48a3: ld   (ix+$01),$FF]
	move.b	#0x02,(orientation_04,a2)                 	| [$48a7: ld   (ix+$04),$02]
	st.b	d0                                	| [$48ab: ld   a,$FF]
	move.b	d0,death_ray_sattelites_active_92BE(a6)                   	| [$48ad: ld   ($92BE),a]
											| [$48b0: ld   a,($3050)]
	move.b	#2,death_ray_visibility_counter_92fe(a6)                   	| [$48b3: ld   ($92FE),a]
	jra	l_5d1c                             	| [$48b6: jp   $5D1C]

update_death_ray_sattelites_48ba:
	LOAD_RAM_POINTER	first_death_ray_emitter_struct_9611(a6),a2         	| [$48ba: ld   ix,($9611)]
	LOAD_RAM_POINTER	first_death_ray_emitter_sprite_9613(a6),a3         	| [$48be: ld   iy,($9613)]
	jbsr	update_death_ray_emitter_4954                            	| [$48c2: call $4954]
	move.b	(displayed_y_00,a3),d0                    	| [$48c5: ld   a,(iy+$00)]
	move.b	d0,death_ray_sattelite_y_933e(a6)                   	| [$48c8: ld   ($933E),a]
	LOAD_RAM_POINTER	second_death_ray_emitter_struct_9615(a6),a2         	| [$48cb: ld   ix,($9615)]
	LOAD_RAM_POINTER	second_death_ray_emitter_sprite_9617(a6),a3         	| [$48cf: ld   iy,($9617)]
	jbsr	update_death_ray_emitter_4954                            	| [$48d3: call $4954]
	LOAD_RAM_POINTER	death_ray_struct_9619(a6),a2         	| [$48d6: ld   ix,($9619)]
	LOAD_RAM_POINTER	death_ray_sprite_961B(a6),a3         	| [$48da: ld   iy,($961B)]
	move.b	death_ray_visibility_counter_92fe(a6),d0                   	| [$48de: ld   a,($92FE)]
	cmp.b	#0x02,d0                         	| [$48e1: cp   $02]
	jcs	death_ray_out_of_scope_4933             | [$48e3: jr   c,$4933]
	jbsr	update_death_ray_sattelite_size_4b1c                            	| [$48e5: call $4B1C]
	bset.b	#4,(0x01,a3)                    	| [$48e8: set  4,(iy+$01)]
	move.b	level_playing_flag_9000(a6),d0                   	| [$48ec: ld   a,($9000)]
	addq.b	#1,d0                           	| [$48ef: inc  a]
	jne	l_48fa                             	| [$48f0: jr   nz,$48FA] this is a bogus jump!
	move.b	general_fast_timer_9400(a6),d0                   	| [$48f2: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$48f5: and  $07]
	jne	handle_death_ray_4900                             	| [$48f7: jr   nz,$4900]
	move.b	level_playing_flag_9000(a6),d0                   	| [$48f9: ld   a,($9000)]
* game jumps here in the middle of the prev instruction ???
* but d1 = 0 so it has no effect
l_48fa:
	addq.b	#1,d0                           	| [$48fc: inc  a]
	bne.b	0f                               	| [...]
	jbsr	l_5d04                            	| [$48fd: call z,$5D04]
0:
* animates death ray and tests collision between the death ray itself 
* (not the ray generators)
handle_death_ray_4900:
	move.b	general_fast_timer_9400(a6),d0      | [$4900: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$4903: and  $07]
	add.b	d0,d0                            	| [$4905: add  a,a]
	add.b	d0,d0                            	| [$4906: add  a,a]
	sub.b	#0x10,d0                         	| [$4907: sub  $10]
	move.b	d0,d1                           	| [$4909: ld   b,a]
	move.b	death_ray_sattelite_x_932e(a6),d0                   	| [$490a: ld   a,($932E)]
	add.b	d1,d0                            	| [$490d: add  a,b]
	* ray only moves along virtual X axis
	move.b	d0,(displayed_x_03,a3)              | [$490e: ld   (iy+$03),a]
	move.b	death_ray_sattelite_y_933e(a6),d0   | [$4911: ld   a,($933E)]
	move.b	d0,(displayed_y_00,a3)              | [$4914: ld   (iy+$00),a]
	cmp.b	#0x30,d0                         	| [$4917: cp   $30]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4919: ret  nc] [...]
0:
	cmp.b	#0x20,d0                         	| [$491a: cp   $20]
	bcc.b	0f                               	| [...]
	rts                                    	| [$491c: ret  c] [...]
0:
	move.b	level_playing_flag_9000(a6),d0                   	| [$491d: ld   a,($9000)]
	addq.b	#1,d0                           	| [$4920: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4921: ret  nz] [...]
0:
	move.b	player_ship_angle_9001(a6),d0                   	| [$4922: ld   a,($9001)]
	sub.b	(displayed_x_03,a3),d0                     	| [$4925: sub  (iy+$03)]
	add.b	#0x09,d0                         	| [$4928: add  a,$09]
	cmp.b	#0x13,d0                         	| [$492a: cp   $13]
	bcs.b	0f                               	| [...]
	rts                                    	| [$492c: ret  nc] [...]
0:
	tst.b	invincible_flag
	jne		0f
	move.b	#0xF0,d0                        	| [$492d: ld   a,$F0] [uncovered]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$492f: ld   ($9000),a] [uncovered]
0:
	rts                                    	| [$4932: ret] [uncovered]

death_ray_out_of_scope_4933:
	clr.b	(active_01,a2)                        	| [$4933: ld   (ix+$01),$00]
	clr.b	(displayed_y_00,a3)                        	| [$4937: ld   (iy+$00),$00]
	rts                                    	| [$493b: ret]

update_death_ray_emitter_4954:
	move.b	(active_01,a2),d0                    	| [$4954: ld   a,(ix+$01)]
	                               	| [$4957: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4958: ret  z] [...]
0:
	addq.b	#1,d0                           	| [$4959: inc  a]
	jne	l_4a37                             	| [$495a: jp   nz,$4A37]
	* active
	move.b	(fine_x_02,a2),d4                    	| [$495d: ld   e,(ix+$02)]
	move.b	(displayed_y_00,a3),d0                    	| [$4960: ld   a,(iy+$00)]
	cmp.b	#0x20,d0                         	| [$4963: cp   $20]
	jcs	l_49b0                             	| [$4965: jp   c,$49B0]
	  | useless, overwritten at 496f                	| [$4968: ld   d,a]
	move.b	(displayed_y_00,a3),d5                    	| [$4969: ld   h,(iy+$00)]
	move.b	(fine_y_03,a2),d6                    	| [$496c: ld   l,(ix+$03)]
	move.w	#-0x140,d3                      	| [$496f: ld   de,$FEC0]
	LOAD_D5D6_FROM_D5_16
	add.w	d3,d5                            	| [$4972: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_y_00,a3)                    	| [$4973: ld   (iy+$00),h]
	* I think it's an original game bug
	* used to write a here, when it should be l. Not really noticeable though
	move.b	d6,(fine_y_03,a2)                    	| [$4976: ld   (ix+$03),a]
	jbsr	update_death_ray_sattelite_size_4b1c                            	| [$4979: call $4B1C]
	move.b	(orientation_04,a2),d0                    	| [$497c: ld   a,(ix+$04)]
	subq.b	#1,d0                           	| [$497f: dec  a]
	jeq	l_498a                             	| [$4980: jr   z,$498A]
	move.b	(sprite_code_02,a3),d0                    	| [$4982: ld   a,(iy+$02)]
	eor.b	#0xC0,d0                         	| [$4985: xor  $C0]
	move.b	d0,(sprite_code_02,a3)                    	| [$4987: ld   (iy+$02),a]
l_498a:
	move.b	(displayed_y_00,a3),d0                    	| [$498a: ld   a,(iy+$00)]
	cmp.b	#0x30,d0                         	| [$498d: cp   $30]
	jcc	l_49b7                             	| [$498f: jr   nc,$49B7]
	cmp.b	#0x20,d0                         	| [$4991: cp   $20]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4993: ret  c] [...]
0:
	move.b	player_ship_angle_9001(a6),d0                   	| [$4994: ld   a,($9001)]
	sub.b	(displayed_x_03,a3),d0                     	| [$4997: sub  (iy+$03)]
	addq.b	#0x06,d0                        	| [$499a: add  a,$06]
	cmp.b	#0x0D,d0                         	| [$499c: cp   $0D]
	bcs.b	0f                               	| [...]
1:
	rts                                    	| [$499e: ret  nc] [...]
0:
	tst.b	invincible_flag
	jne		1b
	* death ray / sattelites collision with player
	move.b	#0xF0,d0                        	| [$499f: ld   a,$F0] [uncovered]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$49a1: ld   ($9000),a] [uncovered]
l_49a4:
	move.b	#0x20,(0x01,a2)                 	| [$49a4: ld   (ix+$01),$20]
	LOAD_RAM_POINTER	death_ray_sprite_961B(a6),a0         	| [$49a8: ld   hl,($961B)]
	clr.b	(a0)                             	| [$49ab: ld   (hl),$00]
	jra	l_5d22                             	| [$49ad: jp   $5D22]

l_49b0:
	lea	death_ray_visibility_counter_92fe(a6),a0                      	| [$49b0: ld   hl,$92FE]
	subq.b	#1,(a0)                         	| [$49b3: dec  (hl)]
	jra	l_4a86                             	| [$49b4: jp   $4A86]

l_49b7:
	move.b	general_fast_timer_9400(a6),d0                   	| [$49b7: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$49ba: and  $01]
	move.b	d0,d1                           	| [$49bc: ld   b,a]
	move.b	(0x04,a2),d0                    	| [$49bd: ld   a,(ix+$04)]
	cmp.b	d1,d0                            	| [$49c0: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$49c1: ret  nz] [...]
0:
	lea	aux_objects_9300(a6),a0                      	| [$49c2: ld   hl,$9300]
	lea	l_9900(a6),a1                      	| [$49c5: ld   de,$9900]
	jbsr	l_49de                            	| [$49c8: call $49DE]
	tst.b	d0                               	| [$49cb: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$49cc: ret  nz] [...]
0:
	lea	l_9310(a6),a0                      	| [$49cd: ld   hl,$9310]
	lea	l_9908(a6),a1                      	| [$49d0: ld   de,$9908]
	jbsr	l_49de                            	| [$49d3: call $49DE]
	tst.b	d0                               	| [$49d6: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$49d7: ret  nz] [...]
0:
	lea	l_9320(a6),a0                      	| [$49d8: ld   hl,$9320]
	lea	l_9910(a6),a1                      	| [$49db: ld   de,$9910]
l_49de:
	move.b	(a0),d0                         	| [$49de: ld   a,(hl)]
	cmp.b	#0xFE,d0                         	| [$49df: cp   $FE]
	jcs	l_4a35                             	| [$49e1: jr   c,$4A35]
	subq.b	#1,d0                           	| [$49e3: dec  a]
	jeq	l_49e8                             	| [$49e4: jr   z,$49E8]
	jra	l_4a19                             	| [$49e6: jr   $4A19]

l_49e8:
	exg	a1,a0                              	| [$49e8: ex   de,hl]
	move.b	(a0),d0                         	| [$49e9: ld   a,(hl)]
	sub.b	(0x00,a3),d0                     	| [$49ea: sub  (iy+$00)]
	cmp.b	#0x0C,d0                         	| [$49ed: cp   $0C]
	jcc	l_4a35                             	| [$49ef: jr   nc,$4A35]
	addq.w	#3,a0                           	| [$49f1: inc  l]
	move.b	(a0),d0                         	| [$49f4: ld   a,(hl)]
	sub.b	(0x03,a3),d0                     	| [$49f5: sub  (iy+$03)]
	addq.b	#0x04,d0                        	| [$49f8: add  a,$04]
	cmp.b	#0x09,d0                         	| [$49fa: cp   $09]
	jcc	l_4a35                             	| [$49fc: jr   nc,$4A35]
	exg	a1,a0                              	| [$49fe: ex   de,hl]
	move.b	#0xF0,(a0)                      	| [$49ff: ld   (hl),$F0]
	jra	l_49a4                             	| [$4a01: jp   $49A4]


* clear screen
l_4a04:
	lea	0x8000,a0                          	| [$4a04: ld   hl,$8000]
	move.w	#0x0400,d1                          	| [$4a07: ld   bc,$0400]
	move.b	#0x02,d0                        	| [$4a0a: ld   d,$02]
l_4a0c:
	jbsr	osd_w_videoram                         	| [$4a0c: ld   (hl),d]
	addq.w	#1,a0                           	| [$4a0d: inc  hl]
	subq.w	#1,d1                           	| [$4a0e: dec  bc]
	                           	| [$4a0f: ld   a,c]
	                             	| [$4a10: or   b]
	jne	l_4a0c                             	| [$4a11: jr   nz,$4A0C]
                       	| [$4a13: ld   (watchdog_C000),a]
	jra	l_5854                             	| [$4a16: jp   $5854]

l_4a19:
	exg	a1,a0                              	| [$4a19: ex   de,hl]
	move.b	(a0),d0                         	| [$4a1a: ld   a,(hl)]
	sub.b	(0x00,a3),d0                     	| [$4a1b: sub  (iy+$00)]
	cmp.b	#0x0C,d0                         	| [$4a1e: cp   $0C]
	jcc	l_4a35                             	| [$4a20: jr   nc,$4A35]
	addq.w	#3,a0                           	| [$4a22: inc  l]*3
	move.b	(a0),d0                         	| [$4a25: ld   a,(hl)]
	sub.b	(0x03,a3),d0                     	| [$4a26: sub  (iy+$03)]
	addq.b	#0x05,d0                        	| [$4a29: add  a,$05]
	cmp.b	#0x10,d0                         	| [$4a2b: cp   $10]
	jcc	l_4a35                             	| [$4a2d: jr   nc,$4A35]
	exg	a1,a0                              	| [$4a2f: ex   de,hl]
	move.b	#0xF0,(a0)                      	| [$4a30: ld   (hl),$F0]
	jra	l_49a4                             	| [$4a32: jp   $49A4]

l_4a35:
	clr.b	d0                               	| [$4a35: xor  a]
	rts                                    	| [$4a36: ret]

l_4a37:
	subq.b	#1,(0x01,a2)                    	| [$4a37: dec  (ix+$01)]
	jeq	l_4a7e                             	| [$4a3a: jr   z,$4A7E]
	move.b	(0x02,a3),d0                    	| [$4a3c: ld   a,(iy+$02)]
	cmp.b	#0x48,d0                         	| [$4a3f: cp   $48]
	bne.b	0f                               	| [...]
	rts                                    	| [$4a41: ret  z] [...]
0:
	cmp.b	#0x88,d0                         	| [$4a42: cp   $88]
	bne.b	0f                               	| [...]
	rts                                    	| [$4a44: ret  z] [...]
0:
	move.b	general_fast_timer_9400(a6),d0                   	| [$4a45: ld   a,($9400)]
	and.b	#0x07,d0                         	| [$4a48: and  $07]
	move.b	d0,(sprite_code_02,a3)                    	| [$4a4a: ld   (iy+$02),a]
	move.b	(fine_x_02,a2),d4                    	| [$4a4d: ld   e,(ix+$02)]
	move.b	(displayed_y_00,a3),d3                    	| [$4a50: ld   d,(iy+$00)]
	move.w	#-0x90,d5                       	| [$4a53: ld   hl,$FF70]
	LOAD_D3_16_FROM_D3D4
	add.w	d3,d5                            	| [$4a56: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d6,(fine_x_02,a2)                    	| [$4a57: ld   (ix+$02),l]
	move.b	d5,(displayed_y_00,a3)                    	| [$4a5a: ld   (iy+$00),h]
	move.b	(0x01,a2),d0                    	| [$4a5d: ld   a,(ix+$01)]
	cmp.b	#0x10,d0                         	| [$4a60: cp   $10]
	jeq	l_4a7a                             	| [$4a62: jr   z,$4A7A]
	cmp.b	#0x1F,d0                         	| [$4a64: cp   $1F]
	beq.b	0f                               	| [...]
	rts                                    	| [$4a66: ret  nz] [...]
0:
	move.b	#0x01,d1                        	| [$4a67: ld   b,$01]
l_4a69:
	move.b	(0x00,a3),d0                    	| [$4a69: ld   a,(iy+$00)]
	rol.b	#2,d0                            	| [$4a6c: rlca] * 2
	and.b	#0x03,d0                         	| [$4a6e: and  $03]
	add.b	d0,d0                            	| [$4a70: add  a,a]
	add.b	d1,d0                            	| [$4a71: add  a,b]
	LEA_ROM	0x4AB3,a0                          	| [$4a72: ld   hl,$4AB3]
	jbsr	fetch_a0_plus_d0_0008                            	| [$4a75: rst  $08]
	move.b	d0,(0x01,a3)                    	| [$4a76: ld   (iy+$01),a]
	rts                                    	| [$4a79: ret]

l_4a7a:
	clr.b	d1                               	| [$4a7a: ld   b,$00]
	jra	l_4a69                             	| [$4a7c: jr   $4A69]

l_4a7e:
	lea	death_ray_visibility_counter_92fe(a6),a0                      	| [$4a7e: ld   hl,$92FE]
	subq.b	#1,(a0)                         	| [$4a81: dec  (hl)]
	move.w	#0x0403,d3                          	| [$4a82: ld   de,$0403]
	jbsr	start_task_d3_0038                            	| [$4a85: rst  $38]
l_4a86:
	jbsr	l_5d16                            	| [$4a86: call $5D16]
	clr.b	(0x00,a2)                        	| [$4a89: ld   (ix+$00),$00]
	clr.b	(0x01,a2)                        	| [$4a8d: ld   (ix+$01),$00]
	clr.b	(0x00,a3)                        	| [$4a91: ld   (iy+$00),$00]
	clr.b	(0x03,a3)                        	| [$4a95: ld   (iy+$03),$00]
	move.b	death_ray_visibility_counter_92fe(a6),d0                   	| [$4a99: ld   a,($92FE)]
	                               	| [$4a9c: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$4a9d: ret  nz] [...]
0:
	move.b	l_92EE(a6),d0                   	| [$4a9e: ld   a,($92EE)]
	move.b	d0,unknown_active_flag_92ce(a6)                   	| [$4aa1: ld   ($92CE),a]
	clr.b	d0                               	| [$4aa4: xor  a]
	move.b	d0,death_ray_sattelites_active_92BE(a6)                   	| [$4aa5: ld   ($92BE),a]
	LOAD_RAM_POINTER	second_death_ray_emitter_sprite_9617(a6),a0         	| [$4aa8: ld   hl,($9617)]
	clr.b	(a0)                             	| [$4aab: ld   (hl),$00]
	LOAD_RAM_POINTER	first_death_ray_emitter_sprite_9613(a6),a0         	| [$4aad: ld   hl,($9613)]
	clr.b	(a0)                             	| [$4ab0: ld   (hl),$00]
	rts                                    	| [$4ab2: ret]

* depending on X and Y compute size and orientation of
* satellites
update_death_ray_sattelite_size_4b1c:
	move.b	(displayed_x_03,a3),d0                    	| [$4b1c: ld   a,(iy+$03)]
	move.b	d0,d1                           	| [$4b1f: ld   b,a]
	rol.b	#2,d0                            	| [$4b20: rlca] * 2
	and.b	#0x03,d0                         	| [$4b22: and  $03]
	LEA_ROM	0x4B44,a0                          	| [$4b24: ld   hl,$4B44]
	jbsr	fetch_a0_plus_d0_0008               | [$4b27: rst  $08]
	move.b	d0,(sprite_code_02,a3)              | [$4b28: ld   (iy+$02),a]
	move.b	(displayed_y_00,a3),d0              | [$4b2b: ld   a,(iy+$00)]
	ror.b	#3,d0                            	| [$4b2e: rrca] * 3
	and.b	#0x18,d0                         	| [$4b31: and  $18]
	move.b	d0,d2                           	| [$4b33: ld   c,a]
	move.b	d1,d0                           	| [$4b34: ld   a,b]
	ror.b	#4,d0                            	| [$4b35: rrca] * 4
	and.b	#0x07,d0                         	| [$4b39: and  $07]
	add.b	d2,d0                            	| [$4b3b: add  a,c]
	LEA_ROM	0x4B48,a0                          	| [$4b3c: ld   hl,$4B48]
	jbsr	fetch_a0_plus_d0_0008               | [$4b3f: rst  $08]
	move.b	d0,(sprite_code_01,a3)              | [$4b40: ld   (iy+$01),a]
	rts                                    		| [$4b43: ret]

l_4b68:
	move.b	current_stage_960B(a6),d0                   	| [$4b68: ld   a,($960B)]
	ror.b	#2,d0                            	| [$4b6b: rrca] * 2
	and.b	#0x07,d0                         	| [$4b6d: and  $07]
	jbsr	jump_table_jump_0030                            	| [$4b6f: rst  $30]
* [jump_table]
	.long	l_4bbd
	.long	l_4bd6
	.long	l_4c9f
	.long	l_4cba
	.long	l_4cca
	.long	l_4cea
l_4b7c:
	move.b	game_in_play_9669(a6),d0                   	| [$4b7c: ld   a,($9669)]
	                               	| [$4b7f: and  a]
	jeq	l_0f4c                             	| [$4b80: jp   z,$0F4C]
	move.b	general_fast_timer_9400(a6),d0                   	| [$4b83: ld   a,($9400)]
	move.b	d0,d1                           	| [$4b86: ld   b,a]
	and.b	#0x1F,d0                         	| [$4b87: and  $1F]
	beq.b	0f                               	| [...]
	rts                                    	| [$4b89: ret  nz] [...]
0:
	move.b	game_in_play_9669(a6),d0                   	| [$4b8a: ld   a,($9669)]
	                               	| [$4b8d: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4b8e: ret  z] [...]
0:
	move.b	sub_state_942C(a6),d0                   	| [$4b8f: ld   a,($942C)]
	cmp.b	#0x04,d0                         	| [$4b92: cp   $04]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4b94: ret  c] [...]
0:
	cmp.b	#0x08,d0                         	| [$4b95: cp   $08]
	jcs	l_4b9b                             	| [$4b97: jr   c,$4B9B]
	cmp.b	d0,d0                            	| [$4b99: cp   a]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4b9a: ret  c] [...]
0:
l_4b9b:
	move.b	current_player_9662(a6),d0                   	| [$4b9b: ld   a,($9662)]
	and.b	#0x01,d0                         	| [$4b9e: and  $01]
	jeq	l_4bad                             	| [$4ba0: jr   z,$4BAD]
	move.b	#0x06,d4                        	| [$4ba2: ld   e,$06] [uncovered]
	btst.b	#5,d1                           	| [$4ba4: bit  5,b] [uncovered]
	jeq	l_4bb8                             	| [$4ba6: jr   z,$4BB8] [uncovered]
	move.b	#0x01,d3                        	| [$4ba8: ld   d,$01] [uncovered]
	jra	start_task_d3d4_0038                             	| [$4baa: jp   $0038] [uncovered]

l_4bad:
	move.b	#0x05,d4                        	| [$4bad: ld   e,$05]
	btst.b	#5,d1                           	| [$4baf: bit  5,b]
	jeq	l_4bb8                             	| [$4bb1: jr   z,$4BB8]
	move.b	#0x01,d3                        	| [$4bb3: ld   d,$01]
	jra	start_task_d3d4_0038                             	| [$4bb5: jp   $0038]

l_4bb8:
	move.b	#0x03,d3                        	| [$4bb8: ld   d,$03]
	jra	start_task_d3d4_0038                             	| [$4bba: jp   $0038]

l_4bbd:
	LEA_ROM	0x1168,a0                          	| [$4bbd: ld   hl,$1168]
	READ_ROM_BYTE	0x15B4,d0                       	| [$4bc0: ld   a,($15B4)]
	move.b	d0,d1                           	| [$4bc3: ld   b,a]
	lea	l_9840(a6),a1                      	| [$4bc4: ld   de,$9840]
	jra	l_4d04                             	| [$4bc7: jp   $4D04]

l_4bd6:
	lea	0x85CD,a0                      	| [$4bd6: ld   hl,$85CD]
	READ_ROM_BYTE	0x1075,d0                       	| [$4bd9: ld   a,($1075)]
	move.b	d0,d1                           	| [$4bdc: ld   b,a]
	move.b	#0x04,d0                        	| [$4bdd: ld   a,$04]
	move.b	d0,d2                           	| [$4bdf: ld   c,a]
	LEA_ROM	0x4DF7,a1                          	| [$4be0: ld   de,$4DF7]
	jbsr	write_to_screen_4e77                            	| [$4be3: call write_to_screen_4e77]
	LEA_ROM	0x4C44,a0                          	| [$4be6: ld   hl,$4C44]
	READ_ROM_BYTE	0x1C27,d0                       	| [$4be9: ld   a,($1C27)]
	move.b	d0,d1                           	| [$4bec: ld   b,a]
	lea	l_9830(a6),a1                      	| [$4bed: ld   de,$9830]
	jra	l_4d04                             	| [$4bf0: jp   $4D04]


* called once for each line to clear (clearing effect)
* then init tasks and go to next state
clear_screen_then_init_tasks_4C00:
	jbsr	clear_screen_row_0207                            	| [$4c00: call $0207]
	beq.b	0f                               	| [...]
	rts                                    	| [$4c03: ret  nz] [...]
0:
	* simple sprite sync for title screen
	move.b	#0x01,d0                        	| [$4c04: ld   a,$01]
	move.b	d0,sprite_sync_status_a7ff(a6)                       	| [$4c06: ld   ($A7FF),a]
	jbsr	l_1400                            	| [$4c09: call $1400]
	jbsr	starfield_related_3ab8                            	| [$4c0c: call $3AB8]
	move.w	#0x0104,d3                          	| [$4c0f: ld   de,$0104]
	jbsr	start_task_d3_0038                            	| [$4c12: rst  $38]
	addq.b	#1,d3                           	| [$4c13: inc  e]
	jbsr	start_task_d3_0038                            	| [$4c14: rst  $38]
*	ROM checksum
*	LEA_ROM	0x0100,a0                          	| [$4c15: ld   hl,$0100]
*	clr.b	d1                               	| [$4c18: ld   b,$00]
*	clr.b	d0                               	| [$4c1a: xor  a]
*l_4c1b:
*	move.b	(a0),d7
*	eor.b	d7,d0                            	| [$4c1b: xor  (hl)]
*	addq.w	#1,a0                           	| [$4c1c: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_4c1b                             	| [$4c1d: djnz $4C1B]
*	sub.b	#0xA9,d0                         	| [$4c1f: sub  $A9]
*	jne	l_0066                             	| [$4c21: jp   nz,$0066]
	jbsr	write_player_1_score_0755                            	| [$4c24: call $0755]
	jbsr	l_0769                            	| [$4c27: call $0769]
	* next global state (resets sub state)
	clr.b	d0                               	| [$4c2a: xor  a]
	move.b	d0,sub_state_942C(a6)                   	| [$4c2b: ld   ($942C),a]
	addq.b	#1,d0                           	| [$4c2e: inc  a]
	move.b	d0,global_state_942B(a6)                   	| [$4c2f: ld   ($942B),a]
	move.b	l_9440(a6),d0                   	| [$4c32: ld   a,($9440)]
	                               	| [$4c35: and  a]
	jne	l_4c3e                             	| [$4c36: jr   nz,$4C3E]
	move.w	#0x0107,d3                          	| [$4c38: ld   de,$0107]
	jra	start_task_d3_0038                             	| [$4c3b: jp   $0038]

l_4c3e:
	move.w	#0x010D,d3                          	| [$4c3e: ld   de,$010D]
	jra	start_task_d3_0038                             	| [$4c41: jp   $0038]

clear_after_game_over_4c54:
	jbsr	update_starfield_inter_levels_3831                            	| [$4c54: call $3831]
	jbsr	disable_game_objects_0e43                            	| [$4c57: call $0E43]
	jbsr	clear_screen_row_0207                            	| [$4c5a: call $0207]
	beq.b	0f                               	| [...]
	rts                                    	| [$4c5d: ret  nz] [...]
0:
	jbsr	music_off_5c88                            	| [$4c5e: call $5C88]
	move.w	#0x0100,d3                          	| [$4c61: ld   de,$0100]
	jbsr	start_task_d3_0038                            	| [$4c64: rst  $38]
	addq.b	#1,d3                           	| [$4c65: inc  e]
	jbsr	start_task_d3_0038                            	| [$4c66: rst  $38]
	move.b	#0x0C,d3                        	| [$4c67: ld   e,$0C]
	jbsr	start_task_d3_0038                            	| [$4c69: rst  $38]
	move.w	#0x070C,d3                        	| [$4c6a: ld   d,$07]
	jbsr	start_task_d3_0038                            	| [$4c6c: rst  $38]
	* ROM checksum
*	LEA_ROM	0x0D50,a0                          	| [$4c6d: ld   hl,$0D50]
*	move.b	d6,d0                           	| [$4c70: ld   a,l]
*	move.b	d5,d1                           	| [$4c71: ld   b,h]
*l_4c72:
*	add.b	(a0),d0                          	| [$4c72: add  a,(hl)]
*	addq.w	#1,a0                           	| [$4c73: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_4c72                             	| [$4c74: djnz $4C72]
*	cmp.b	#0x90,d0                         	| [$4c76: cp   $90]
*	jne	l_0192                             	| [$4c78: jp   nz,$0192]
	jbsr	display_higscore_entries_145e                            	| [$4c7b: call $143E]
	lea	l_9415(a6),a0                      	| [$4c7e: ld   hl,$9415]
	clr.b	d0                               	| [$4c81: xor  a]
	move.b	#0x05,d1                        	| [$4c82: ld   b,$05]
l_4c84:
	move.b	d0,(a0)+                         	| [$4c84: ld   (hl),a]
										| [$4c85: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4c84                             	| [$4c86: djnz $4C84]
	move.b	#0x03,(a0)                      	| [$4c88: ld   (hl),$03]
	LOAD_VIDEO_POINTER	video_address_9413(a6),a1   | [$4c8a: ld   de,($9413)]
	move.b	l_9419(a6),d0                   	| [$4c8e: ld   a,($9419)]
	LEA_ROM	0x4DDC,a0                          	| [$4c91: ld   hl,$4DDC]
	jbsr	fetch_a0_plus_d0_0008               | [$4c94: rst  $08]
	jbsr	write_videoram_a1                  	| [$4c95: ld   (de),a]
	BCLR_A1	10                           	| [$4c96: res  2,d]
	* save color (high score entry area)
	sub.l	#0x8000,a1
	move.b	(a6,a1.w),d0                         	| [$4c98: ld   a,(de)]
	move.b	d0,saved_character_attribute_9410(a6)  | [$4c99: ld   ($9410),a]
	* goto name highscore entry
	jra	next_game_state_080b                             	| [$4c9c: jp   $080B]

l_4c9f:
	lea	0x85CE,a0                      	| [$4c9f: ld   hl,$85CE]
	READ_ROM_BYTE	0x2F0A,d0                       	| [$4ca2: ld   a,($2F0A)]
	move.b	d0,d1                           	| [$4ca5: ld   b,a]
	move.b	d0,d2                           	| [$4ca6: ld   c,a]
	LEA_ROM	0x4E4F,a1                          	| [$4ca7: ld   de,$4E4F]
	jbsr	write_to_screen_4e77           	| [$4caa: call write_to_screen_4e77]
	LEA_ROM	0x493C,a0                          	| [$4cad: ld   hl,$493C]
	READ_ROM_BYTE	0x4133,d0                       	| [$4cb0: ld   a,($4133)]
	move.b	d0,d1                           	| [$4cb3: ld   b,a]
	lea	l_9818(a6),a1                      	| [$4cb4: ld   de,$9818]
	jra	l_4d04                             	| [$4cb7: jp   $4D04]

l_4cba:
	lea	0x85CE,a0                      	| [$4cba: ld   hl,$85CE] [uncovered]
	READ_ROM_BYTE	0x1956,d0                       	| [$4cbd: ld   a,($1956)]
	move.b	d0,d1                           	| [$4cc0: ld   b,a]
	move.b	#0x04,d0                        	| [$4cc1: ld   a,$04]
	move.b	d0,d2                           	| [$4cc3: ld   c,a]
	LEA_ROM	0x4DBC,a1                          	| [$4cc4: ld   de,$4DBC]
	jra	write_to_screen_4e77                  	| [$4cc7: jp   write_to_screen_4e77]

l_4cca:
	* another ROM checksum that changes number of lives...
*	LEA_ROM	0x06E0,a0                          	| [$4cca: ld   hl,$06E0] [uncovered]
*	clr.b	d1                               	| [$4ccd: ld   b,$00]
*	move.b	#0xC0,d0                        	| [$4ccf: ld   a,$C0]
*l_4cd1:
*	add.b	(a0)+,d0                          	| [$4cd1: add  a,(hl)]
*												| [$4cd2: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_4cd1                             	| [$4cd3: djnz $4CD1]
*	move.b	d0,d1                           	| [$4cd5: ld   b,a]
*	move.b	lives_9600(a6),d0                   	| [$4cd6: ld   a,($9600)]
*	add.b	d1,d0                            	| [$4cd9: add  a,b]
*	move.b	d0,lives_9600(a6)                   	| [$4cda: ld   ($9600),a]
	lea	0x85EF,a0                      	| [$4cdd: ld   hl,$85EF]
	move.b	#0x02,d0                        	| [$4ce0: ld   a,$02]
	move.b	d0,d1                           	| [$4ce2: ld   b,a]
	move.b	d0,d2                           	| [$4ce3: ld   c,a]
	LEA_ROM	0x4E6F,a1                          	| [$4ce4: ld   de,$4E6F]
	jra	write_to_screen_4e77                   	| [$4ce7: jp   write_to_screen_4e77]

l_4cea:
	lea	0x85AD,a0                          	| [$4cea: ld   hl,$85AD]
	LEA_ROM	0x439D,a1                          	| [$4ced: ld   de,$439D]
	READ_ROM_BYTE	0x070F,d0                       	| [$4cf0: ld   a,($070F)]
	move.b	d0,d1                           	| [$4cf3: ld   b,a]
	READ_ROM_BYTE	0x0F54,d0                       	| [$4cf4: ld   a,($0F54)]
	move.b	d0,d2                           	| [$4cf7: ld   c,a]
	jbsr	write_to_screen_4e77                            	| [$4cf8: call write_to_screen_4e77]
	lea	l_9818(a6),a1                      	| [$4cfb: ld   de,$9818]
	LEA_ROM	0x4D69,a0                          	| [$4cfe: ld   hl,$4D69]
	move.b	#0x12,d0                        	| [$4d01: ld   a,$12]
	move.b	d0,d1                           	| [$4d03: ld   b,a]
l_4d04:
	move.b	#0x01,d0                        	| [$4d04: ld   a,$01]
	move.b	d0,update_sequence_control_flag_a7fc(a6)                       	| [$4d06: ld   ($A7FC),a]
	move.b	is_screen_flipped_9407(a6),d0                   	| [$4d09: ld   a,($9407)]
	                               	| [$4d0c: and  a]
	jne	l_4d22                             	| [$4d0d: jr   nz,$4D22]
l_4d0f:
	move.b	(a0)+,(a1)+                         	| [$4d0f: ld   a,(hl)]
	                         	| [$4d10: ld   (de),a]
	                         	| [$4d11: inc  hl]
	                         	| [$4d12: inc  de]
	move.b	(a0)+,(a1)+                         	| [$4d13: ld   a,(hl)]
	                        	| [$4d14: ld   (de),a]
	                           	| [$4d15: inc  hl]
	                           	| [$4d16: inc  de]
	move.b	(a0)+,(a1)+                         	| [$4d17: ld   a,(hl)]
	                         	| [$4d18: ld   (de),a]
	                         	| [$4d19: inc  hl]
	                         	| [$4d1a: inc  de]
	move.b	(a0)+,(a1)+                         	| [$4d1b: ld   a,(hl)]
	                        	| [$4d1c: ld   (de),a]
	                        	| [$4d1d: inc  hl]
	                        	| [$4d1e: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_4d0f                             	| [$4d1f: djnz $4D0F]
	rts                                    	| [$4d21: ret]

l_4d22:
	move.b	d1,d0                           	| [$4d22: ld   a,b]
	ror.b	#1,d0                            	| [$4d23: rrca]
	and.b	#0x7F,d0                         	| [$4d24: and  $7F]
	move.b	d0,d1                           	| [$4d26: ld   b,a]
	move.b	current_stage_960B(a6),d0                   	| [$4d27: ld   a,($960B)]
	move.b	#0x88,d2                        	| [$4d2c: ld   c,$88]
	cmp.b	#0x16,d0                         	| [$4d2a: cp   $16]
	jne	l_4d32                             	| [$4d2e: jr   nz,$4D32]
	move.b	#0xA8,d2                        	| [$4d30: ld   c,$A8]
l_4d32:

	move.l	a0,a3                        	| [$4d32: push hl]
	                        	| [$4d33: pop  iy]
	movem.w	d3/d4,-(sp)                    	| [$4d35: push de]
	move.l	a1,a2                        	| [$4d35: push de]
											| [$4d36: pop  ix]
	move.b	(0x00,a3),d0                    	| [$4d38: ld   a,(iy+$00)]
	add.b	#0x0F,d0                         	| [$4d3b: add  a,$0F]
	not.b	d0                               	| [$4d3d: cpl]
	move.b	d0,(0x00,a2)                    	| [$4d3e: ld   (ix+$00),a]
	move.b	(0x03,a3),d0                    	| [$4d41: ld   a,(iy+$03)]
	add.b	#0x0D,d0                         	| [$4d44: add  a,$0D]
	not.b	d0                               	| [$4d46: cpl]
	move.b	d0,(0x03,a2)                    	| [$4d47: ld   (ix+$03),a]
	move.b	d2,(0x02,a2)                    	| [$4d4a: ld   (ix+$02),c]
	move.b	d2,(0x06,a2)                    	| [$4d4d: ld   (ix+$06),c]
	move.b	(0x01,a3),d0                    	| [$4d50: ld   a,(iy+$01)]
	move.b	d0,(0x05,a2)                    	| [$4d53: ld   (ix+$05),a]
	move.b	(0x05,a3),d0                    	| [$4d56: ld   a,(iy+$05)]
	move.b	d0,(0x01,a2)                    	| [$4d59: ld   (ix+$01),a]
	exg	a1,a0                              	| [$4d5c: ex   de,hl]
	READ_ROM_BYTE	0x1DE0,d0                       	| [$4d5d: ld   a,($1DE0)]
	ADD_D0_TO_A0_0018                            	| [$4d60: rst  $18]
	exg	a1,a0                              	| [$4d61: ex   de,hl]
	READ_ROM_BYTE	0x2E5C,d0                       	| [$4d62: ld   a,($2E5C)]
	ADD_D0_TO_A0_0018                            	| [$4d65: rst  $18]
	subq.b	#1,d1                           	| [...]
	jne	l_4d32                             	| [$4d66: djnz $4D32]
	rts                                    	| [$4d68: ret]

write_stage_number_4e27:
	READ_ROM_BYTE	0x0DD4,d0                       	| [$4e27: ld   a,($0DD4)]
	jbsr	write_message_07e4                            	| [$4e2a: call $07E4]
	move.b	current_stage_number_9609(a6),d0      	| [$4e2d: ld   a,(current_stage_number_9609)]
	moveq	#0,d1
	move.b	d0,d1                           	| [$4e30: ld   b,a]
	*addq.b	#1,d1    | don't add: dbf                       	| [$4e31: inc  b]
	moveq	#0,d0                       	| [$4e32: ld   a,($1295)] cryptic load 0...
	* convert stage number to BCD
	CLEAR_XC_FLAGS
	moveq	#1,d7
l_4e35:
	abcd	d7,d0                        	| [$4e35: add  a,$01] + daa
	dbf	d1,l_4e35                             	| [$4e38: djnz $4E35]
	move.w	#0x0040,d5                      	| [$4e3a: ld   hl,$0040]
	add.w	d3,d5                            	| [$4e3d: add  hl,de]
	exg	d3,d5                              	| [$4e3e: ex   de,hl]
	move.b	#0x05,d2                        	| [$4e3f: ld   c,$05]
	move.l 	d3,a1
	jbsr	write_number_16ff                  | [$4e41: call $16FF]
	rts                                    	| [$4e44: ret]

l_4e45:
	jbsr	osd_read_dsw_1                       	| [$4e45: ld   a,($C0E0)]
	not.b	d0                               	| [$4e48: cpl]
	move.b	d0,copy_of_dsw1_9431(a6)                   	| [$4e49: ld   ($9431),a]
	jra	l_1019                             	| [$4e4c: jp   $1019]

write_to_screen_4e77:
	move.b	d1,d0                           	| [write_to_screen_4e77: ld   a,b]
	exg	d0,d7                              	| [$4e78: ex   af,af']
l_4e79:
	move.b	(a1)+,d0                         	| [$4e79: ld   a,(de)]
	                           	| [$4e7a: inc  de]
	jbsr	osd_w_videoram                         	| [$4e7b: ld   (hl),a]
	move.b	(a1)+,d0                         	| [$4e7c: ld   a,(de)]
	                           	| [$4e7d: inc  de]
	BCLR_A0	10                           	| [$4e7e: res  2,h]
	jbsr	osd_w_videoram                         	| [$4e80: ld   (hl),a]
	BSET_A0	10                           	| [$4e81: set  2,h]
	addq.w	#1,a0                           	| [$4e83: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4e79                             	| [$4e84: djnz $4E79]
	subq.b	#1,d2                           	| [$4e86: dec  c]
	bne.b	0f                               	| [...]
	rts                                    	| [$4e87: ret  z] [...]
0:
	exg	d0,d7                              	| [$4e88: ex   af,af']
	move.b	d0,d1                           	| [$4e89: ld   b,a]
	exg	d0,d7                              	| [$4e8a: ex   af,af']
	READ_ROM_BYTE	0x1216,d0                       	| [$4e8b: ld   a,($1216)]
	sub.b	d1,d0                            	| [$4e8e: sub  b]
	ADD_D0_TO_A0_0018                            	| [$4e8f: rst  $18]
	jra	l_4e79                             	| [$4e90: jr   $4E79]

l_4e92:
	clr.b	d0                               	| [$4e92: xor  a]
	move.b	d0,update_sequence_control_flag_a7fc(a6)                       	| [$4e93: ld   ($A7FC),a]
	lea	0x85AD,a0                          	| [$4e96: ld   hl,$85AD]
	move.w	#0x001A,d3                      	| [$4e99: ld   de,$001A]
	move.b	#0x06,d2                        	| [$4e9c: ld   c,$06]
l_4e9e:
	move.b	#0x06,d0                        	| [$4e9e: ld   a,$06]
	move.b	d0,d1                           	| [$4ea0: ld   b,a]
l_4ea1:
	WRITE_VIDEORAM	0x83                      	| [$4ea1: ld   (hl),$83]
	BSET_A0	10                           	| [$4ea3: res  2,h]
	WRITE_VIDEORAM	0                             	| [$4ea5: ld   (hl),$00]
	BCLR_A0	10                           	| [$4ea7: set  2,h]
	addq.w	#1,a0                           	| [$4ea9: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_4ea1                             	| [$4eaa: djnz $4EA1]
	add.w	d3,a0                            	| [$4eac: add  hl,de]
	subq.b	#1,d2                           	| [$4ead: dec  c]
	jne	l_4e9e                             	| [$4eae: jr   nz,$4E9E]
	lea	sprite_shadow_ram_9800+0x10(a6),a0                      	| [$4eb0: ld   hl,$9810]
	move.b	#0x0A,d0                        	| [$4eb3: ld   a,$0A]
	move.b	d0,d1                           	| [$4eb5: ld   b,a]
	moveq	#0x0008,d3                      	| [$4eb6: ld   de,$0008]
l_4eb9:
	clr.b	(a0)                             	| [$4eb9: ld   (hl),$00]
	add.w	d3,a0                            	| [$4ebb: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_4eb9                             	| [$4ebc: djnz $4EB9]
	rts                                    	| [$4ebe: ret]

l_4ebf:
	LEA_ROM	0x4F6F,a0                          	| [$4ebf: ld   hl,$4F6F]
	jra	l_4edb                             	| [$4ec2: jp   $4EDB]

l_4ec5:
	LEA_ROM	0x4F6F,a0                          	| [$4ec5: ld   hl,$4F6F]
	jra	l_4f37                             	| [$4ec8: jp   $4F37]

l_4ecb:
	moveq	#0,d0
	move.b	l_960A(a6),d0                   	| [$4ecb: ld   a,($960A)]
	add.b	d0,d0                            	| [$4ece: add  a,a]
	LEA_ROM	0x44A2,a0                          	| [$4ecf: ld   hl,$44A2]
	add.w	d0,a0                            	| [$4ed2: add  a,l]
	                           	| [$4ed3: ld   l,a]
	                             	| [$4ed4: jr   nc,$4ED7]
	                           	| [$4ed6: inc  h] [uncovered]
l_4ed7:
	move.b	(a0)+,d4                         	| [$4ed7: ld   e,(hl)]
	                           	| [$4ed8: inc  hl]
	move.b	(a0),d3                         	| [$4ed9: ld   d,(hl)]
	LOAD_A1_FROM_D3D4_ROM
	exg	a1,a0                              	| [$4eda: ex   de,hl]
	
* < A0; ROM pointer
* < A2: object structure pointer
l_4edb:
	move.b	(0x01,a2),d0                    	| [$4edb: ld   a,(ix+$01)]
	addq.b	#0x04,d0                        	| [$4ede: add  a,$04]
	move.w	#-0x10,d1                       	| [$4ee0: ld   bc,$FFF0]
	cmp.b	#0x40,d0                         	| [$4ee3: cp   $40]
	jcc	l_4eea                             	| [$4ee5: jr   nc,$4EEA]
	move.w	#0x0030,d1                      	| [$4ee7: ld   bc,$0030]
l_4eea:
	ror.b	#2,d0                            	| [$4eea: rrca]
	                            	| [$4eeb: rrca]
	and.b	#0x3E,d0                         	| [$4eec: and  $3E]
	ADD_D0_TO_A0_0018                            	| [$4eee: rst  $18]
	move.b	(a0)+,d4                         	| [$4eef: ld   e,(hl)]
	                           	| [$4ef0: inc  hl]
	move.b	(a0),d3                         	| [$4ef1: ld   d,(hl)]
	add.w	d1,a0                            	| [$4ef2: add  hl,bc]
	move.b	(a0),d1                         	| [$4ef3: ld   b,(hl)]
	                           	| [$4ef4: dec  hl]
	move.b	-(a0),d2                         	| [$4ef5: ld   c,(hl)]
	LOAD_D1_16_FROM_D1D2
	move.b	(fine_x_02,a2),d6                    	| [$4ef6: ld   l,(ix+$02)]
	move.b	(displayed_x_03,a3),d5                    	| [$4ef9: ld   h,(iy+$03)]
	LOAD_D3_16_FROM_D3D4
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$4efc: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_x_03,a3)                    	| [$4efd: ld   (iy+$03),h]
	move.b	d6,(fine_x_02,a2)                    	| [$4f00: ld   (ix+$02),l]
	move.b	(fine_y_03,a2),d6                    	| [$4f03: ld   l,(ix+$03)]
	move.b	(displayed_y_00,a3),d5                    	| [$4f06: ld   h,(iy+$00)]
	LOAD_D5_16_FROM_D5D6
	add.w	d1,d5                            	| [$4f09: add  hl,bc]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_y_00,a3)                    	| [$4f0a: ld   (iy+$00),h]
	move.b	d6,(fine_y_03,a2)                    	| [$4f0d: ld   (ix+$03),l]
	rts                                    	| [$4f10: ret]

l_4f11:
	LEA_ROM	0x5092,a0                          	| [$4f11: ld   hl,$5092]
	jra	l_4edb                             	| [$4f14: jr   $4EDB]

* handles arriving waves, and also parts of the player ship rematerializing itself
* after having been killed or at stage start!
* < A2: either aux_objects_9300 or enemy_objects_9010
object_movement_4f16:
	move.b	l_91AE(a6),d0                   	| [$4f16: ld   a,($91AE)]
	                               	| [$4f19: and  a]
	jne	l_4f11                             	| [$4f1a: jr   nz,$4F11]
	move.b	l_9478(a6),d0                   	| [$4f1c: ld   a,($9478)]
	                               	| [$4f1f: and  a]
	jne	l_4f27                             	| [$4f20: jr   nz,$4F27]
	moveq	#0,d0
	move.b	current_stage_960B(a6),d0        | [$4f22: ld   a,($960B)]
	jra		l_4f2a							 | [$4f25: jr   $4F2A]

l_4f27:
	moveq	#0,d0
	move.b	alt_attack_wave_type_9477(a6),d0                   	| [$4f27: ld   a,($9477)] [uncovered]
l_4f2a:
	add.b	d0,d0                            	| [$4f2a: add  a,a]
	LEA_ROM	0x37B9,a0                          	| [$4f2b: ld   hl,$37B9]
	add.w	d0,a0                            	| [$4f2e: add  a,l]
	                           	| [$4f2f: ld   l,a]
	                          	| [$4f30: jr   nc,$4F33]
	                           	| [$4f32: inc  h] [uncovered]
l_4f33:
	move.b	(a0)+,d4                         	| [$4f33: ld   e,(hl)]
	                           	| [$4f34: inc  hl]
	move.b	(a0),d3                         	| [$4f35: ld   d,(hl)]
	LOAD_A1_FROM_D3D4_ROM                      
	exg		a0,a1                        | [$4f36: ex   de,hl]
	
l_4f37:
	move.b	(0x01,a2),d0                    	| [$4f37: ld   a,(ix+$01)]
	addq.b	#0x04,d0                        	| [$4f3a: add  a,$04]
	move.w	#-0x10,d1                       	| [$4f3c: ld   bc,$FFF0]
	cmp.b	#0x40,d0                         	| [$4f3f: cp   $40]
	jcc	l_4f46                             	| [$4f41: jr   nc,$4F46]
	move.w	#0x0030,d1                      	| [$4f43: ld   bc,$0030]
l_4f46:
	ror.b	#2,d0                            	| [$4f46: rrca]
	                            	| [$4f47: rrca]
	and.b	#0x3E,d0                         	| [$4f48: and  $3E]
	ADD_D0_TO_A0_0018                            	| [$4f4a: rst  $18]
	move.b	(a0)+,d4                         	| [$4f4b: ld   e,(hl)]
	                           	| [$4f4c: inc  hl]
	move.b	(a0),d3                         	| [$4f4d: ld   d,(hl)]
	* X displacement in D3
	LOAD_D3_16_FROM_D3D4
	add.w	d1,a0                            	| [$4f4e: add  hl,bc]
	move.b	(a0),d1                         	| [$4f4f: ld   b,(hl)]
	                           	                | [$4f50: dec  hl]
	move.b	-(a0),d2                         	| [$4f51: ld   c,(hl)]
	* Y displacement in D1/D2
	move.b	(fine_x_02,a2),d6                    | [$4f52: ld   l,(ix+$02)] fine X
	move.b	(displayed_x_03,a3),d5               | [$4f55: ld   h,(iy+$03)] displayed X
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$4f58: add  hl,de]
	add.w	d3,d5                            	| [$4f59: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_x_03,a3)                    	| [$4f5a: ld   (iy+$03),h]
	move.b	d6,(fine_x_02,a2)                    	| [$4f5d: ld   (ix+$02),l]
	move.b	(fine_y_03,a2),d6                    	| [$4f60: ld   l,(ix+$03)] fine Y
	move.b	(displayed_y_00,a3),d5                    	| [$4f63: ld   h,(iy+$00)] displayed Y (portrait)
	LOAD_D5_16_FROM_D5D6
	LOAD_D1_16_FROM_D1D2			| Y displacement as 16 bits
	add.w	d1,d5                            	| [$4f66: add  hl,bc]
	add.w	d1,d5                            	| [$4f67: add  hl,bc]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(displayed_y_00,a3)                    	| [$4f68: ld   (iy+$00),h]
	move.b	d6,(fine_y_03,a2)                    	| [$4f6b: ld   (ix+$03),l]
	* breaks when wave arrives: bpset 4f6e,H==$8E && L==$10 && IX==$9010
*	cmp.b	#0x8E,D5
*	jne	0f
*	cmp.b	#0x10,D6
*	jne	0f
*	move.l	a2,d5
*	sub.l	a6,d5
*	cmp.w	#0x1010,d5
*	jne	0f
*	jbsr	osd_break
*0:
	rts                                    	| [$4f6e: ret]

l_4faf:
	jbsr	l_009a                            	| [$4faf: call $009A]
                       	| [$4fb2: ld   (watchdog_C000),a]
	* rom checksum
*	move.w	#0x0000,d5                      	| [$4fb5: ld   hl,$0000]
*	READ_ROM_BYTE	0x0000,d0                       	| [$4fb8: ld   a,($0000)]
*l_4fbb:
*	add.b	(a0),d0                          	| [$4fbb: add  a,(hl)]
*	addq.w	#1,a0                           	| [$4fbc: inc  hl]
*	exg	d0,d7                              	| [$4fbd: ex   af,af']
*	move.b	d5,d0                           	| [$4fbe: ld   a,h]
*	cmp.b	#0x60,d0                         	| [$4fbf: cp   $60]
*	jcc	l_4fc9                             	| [$4fc1: jr   nc,$4FC9]
*	exg	d0,d7                              	| [$4fc3: ex   af,af']
*                       	| [$4fc4: ld   (watchdog_C000),a]
*	jra	l_4fbb                             	| [$4fc7: jr   $4FBB]
*
*l_4fc9:
*	exg	d0,d7                              	| [$4fc9: ex   af,af']
*	subq.b	#0x00,d0                        	| [$4fca: sub  $00]
*l_4fcc:
*	jne	l_4fcc                             	| [$4fcc: jp   nz,$4FCC]
	jra	l_066e                             	| [$4fcf: jp   $066E]

l_52c3:
	jbsr	init_default_hiscores_1428                            	| [$52c3: call $1428]
											| [$52c6: ld   (watchdog_C000),a]
	jra	l_20be                             	| [$52c9: jp   $20BE]
	* also propagate the highest score to the
	* high score (separate memory locations as often)
	BREAKPOINT	"lfll"
	lea		high_score_table_9488+1(a6),a0	
	lea		highscore_last_digit_940D-2(a6),a1
	move.b	(a0)+,(a1)+
	move.b	(a0)+,(a1)+
	move.b	(a0)+,(a1)+
clear_ram_57dc:
	lea	level_playing_flag_9000(a6),a0                      	| [$57dc: ld   hl,$9000]
	                    	| [$57df: ld   de,$9001]
	move.w	#0x0200-1,d1                          	| [$57e2: ld   bc,$07FF]
0:	                            	| [$57e5: ld   (hl),$00]
	clr.l	(a0)+                             	| [$57e7: ldir]
	dbf 	d1,0b								
                       	| [$57e9: ld   (watchdog_C000),a]
	jra	clear_sprite_mem_blocks_3010                             	| [$57ec: jp   $3010]

* clear screen #2
l_5854:
	* fill with 0x83
	lea	0x8400,a0                          	| [$5854: ld   hl,$8400]
	move.w	#0x0400,d1                          	| [$5857: ld   bc,$0400]
	move.b	#0x83,d3                        	| [$585a: ld   d,$83]
	move.b	d3,d0                         	| [$585c: ld   (hl),d]
l_585c:
	jbsr	osd_w_videoram
	addq	#1,a0                           	| [$585d: inc  hl]
	subq.w	#1,d1                           	| [$585e: dec  bc]
										| [$585f: ld   a,c]
											| [$5860: or   b]
	jne	l_585c                             	| [$5861: jr   nz,$585C]
	* init task table with all FFs (inactive)
	lea	task_array_9500(a6),a0                      	| [$5863: ld   hl,$9500]
	move.b	#0x40,d1                        	| [$5866: ld   b,$40]
l_5868:
	move.b	#0xFF,(a0)+                      	| [$5868: ld   (hl),$FF]
	                           	| [$586a: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_5868                             	| [$586b: djnz $5868]
	jra	l_0980                             	| [$586d: jp   $0980]

l_590e:
	move.b	level_playing_flag_9000(a6),d0                   	| [$590e: ld   a,($9000)]
	addq.b	#1,d0                           	| [$5911: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5912: ret  nz] [...]
0:
	move.b	general_fast_timer_9400(a6),d0                   	| [$5913: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$5916: and  $01]
	jeq	l_59d7                             	| [$5918: jp   z,$59D7]
	jbsr	l_5921                            	| [$591b: call $5921]
	jbsr	enemies_vs_ship_collisions_5943                            	| [$591e: call $5943]
l_5921:
	move.b	player_ship_angle_9001(a6),d0                   	| [$5921: ld   a,($9001)]
	move.b	d0,d5                           	| [$5924: ld   h,a]
	move.b	#0x28,d6                        	| [$5925: ld   l,$28]
	move.b	#0x04,d3                        	| [$5927: ld   d,$04]
	move.b	#0x09,d4                        	| [$5929: ld   e,$09]
	move.w	#0x0004,d1                      	| [$592b: ld   bc,$0004]
	jbsr	exx                               	| [$592e: exx]
	move.w	#0x0010,d3                      	| [$592f: ld   de,$0010]
	move.b	#0x08,d1                        	| [$5932: ld   b,$08]
	lea	bullet_sprite_structures_9330(a6),a0                      	| [$5934: ld   hl,$9330]
	lea	bullet_sprite_shadow_ram_9918(a6),a3                      	| [$5937: ld   iy,$9918]
	jbsr	bullet_vs_ship_collision_5b79                            	| [$593b: call $5B79]
	bne.b	0f                               	| [...]
	rts                                    	| [$593e: ret  z] [...]
0:
	move.b	d0,level_playing_flag_9000(a6)                   	| [$593f: ld   ($9000),a]
	rts                                    	| [$5942: ret]

enemies_vs_ship_collisions_5943:
	move.b	l_91AE(a6),d0                   	| [$5943: ld   a,($91AE)]
	                               	| [$5946: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5947: ret  nz] [...]
0:
	lea	enemy_objects_9010(a6),a2                      	| [$5948: ld   ix,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$594c: ld   iy,$9810]
	move.b	#0x0A,d1                        	| [$5950: ld   b,$0A]
	move.b	iceberg_on_screen_915e(a6),d0                   	| [$5952: ld   a,($915E)]
	                               	| [$5955: and  a]
	jeq	l_595a                             	| [$5956: jr   z,$595A]
	move.b	#0x09,d1                        	| [$5958: ld   b,$09]
l_595a:
	                               	| [$595a: exx]
									| [$595b: ld   de,$0008]
									| [$595e: ld   bc,$0010]
	                               	| [$5961: exx]
	move.b	#0x24,d5                        	| [$5962: ld   h,$24]
	move.b	#0x0D,d6                        	| [$5964: ld   l,$0D]
	move.b	player_ship_angle_9001(a6),d0                   	| [$5966: ld   a,($9001)]
	subq.b	#0x05,d0                        	| [$5969: sub  $05]
	move.b	d0,d3                           	| [$596b: ld   d,a]
l_596c:
	move.b	(enemy_active_00,a2),d0                    	| [$596c: ld   a,(ix+$00)]
	addq.b	#1,d0                           	| [$596f: inc  a]
	jne	l_5994                             	| [$5970: jr   nz,$5994]
	* enemy active: check its state
	move.b	(enemy_state_0a,a2),d0                    	| [$5972: ld   a,(ix+$0a)]
	subq.b	#1,d0                           	| [$5975: dec  a]
	jeq	l_5994                             	| [$5976: jr   z,$5994]
	* both protagonists can collide, check bounding boxes
	move.b	(displayed_y_00,a3),d0                    	| [$5978: ld   a,(iy+$00)]
	sub.b	d5,d0                            	| [$597b: sub  h]
	cmp.b	d6,d0                            	| [$597c: cp   l]
	jcc	l_5994                             	| [$597d: jr   nc,$5994]
	move.b	(displayed_x_03,a3),d0                    	| [$597f: ld   a,(iy+$03)]
	sub.b	d3,d0                            	| [$5982: sub  d]
	cmp.b	d6,d0                            	| [$5983: cp   l]
	jcc	l_5994                             	| [$5984: jr   nc,$5994] branch: no collision

	tst.b	invincible_flag
	jne		l_5994
	
	* player ship / enemy ship collision
	move.b	#0xF0,d0                        	| [$5986: ld   a,$F0]
	move.b	d0,(0x00,a2)                    	| [$5988: ld   (ix+$00),a]
	move.b	d0,level_playing_flag_9000(a6)                   	| [$598b: ld   ($9000),a]
	move.w	#0x0402,d3                          	| [$598e: ld   de,$0402]
	jra	start_task_d3_0038                             	| [$5991: jp   $0038]

l_5994:
	* 68000 can add immediate values, we save a lot of exx shit
	                               	| [$5994: exx]
	add.w	#0x0010,a2                            	| [$5995: add  ix,bc]
	add.w	#0x0008,a3                            	| [$5997: add  iy,de]
	                               	| [$5999: exx]
	subq.b	#1,d1                           	| [...]
	jne	l_596c                             	| [$599a: djnz $596C]
	rts                                    	| [$599c: ret]

read_dip_switches_2_599d:
	jbsr	osd_read_dsw_2                       	| [$599d: ld   a,($C000)]
	not.b	d0                               	| [$59a0: cpl]
	move.b	d0,d2                           	| [$59a1: ld   c,a]
	and.b	#0x03,d0                         	| [$59a2: and  $03]
	addq.b	#0x03,d0                        	| [$59a4: add  a,$03]
	cmp.b	#0x06,d0                         	| [$59a6: cp   $06]
	jne	l_59ac                             	| [$59a8: jr   nz,$59AC]
	st.b	d0                                	| [$59aa: ld   a,$FF] [uncovered]
l_59ac:
	move.b	d0,start_lives_9441(a6)                   	| [$59ac: ld   ($9441),a]
	move.b	d2,d0                           	| [$59af: ld   a,c]
	ror.b	#2,d0                            	| [$59b0: rrca] * 2
	move.b	d0,d2                           	| [$59b2: ld   c,a]
	and.b	#0x01,d0                         	| [$59b3: and  $01]
	* force non-cocktail
	move.b	#1,cabinet_upright_9442(a6)                   	| [$59b5: ld   ($9442),a]
	move.b	d2,d0                           	| [$59b8: ld   a,c]
	ror.b	#1,d0                            	| [$59b9: rrca]
	move.b	d0,d2                           	| [$59ba: ld   c,a]
	and.b	#0x01,d0                         	| [$59bb: and  $01]
	move.b	d0,bonus_life_40k_9443(a6)                   	| [$59bd: ld   ($9443),a]
	move.b	d2,d0                           	| [$59c0: ld   a,c]
	ror.b	#1,d0                            	| [$59c1: rrca]
	move.b	d0,d2                           	| [$59c2: ld   c,a]
	and.b	#0x07,d0                         	| [$59c3: and  $07]
	move.b	d0,difficulty_9444(a6)                   	| [$59c5: ld   ($9444),a]
	move.b	d2,d0                           	| [$59c8: ld   a,c]
	ror.b	#3,d0                            	| [$59c9: rrca] * 3
	and.b	#0x01,d0                         	| [$59cc: and  $01]
	move.b	d0,demo_sounds_9446(a6)             | [$59ce: ld   ($9446),a]
                       	| [$59d1: ld   (watchdog_C000),a]
	jra	l_1901                             	| [$59d4: jp   $1901]

l_59d7:
	pea		l_59e7(pc)                          	| [$59d7: ld   hl,$59E7]

	                        	| [$59da: push hl]
	move.b	aux_objects_9300(a6),d0                   	| [$59db: ld   a,($9300)]
	addq.b	#1,d0                           	| [$59de: inc  a]
	jeq	l_5a04                             	| [$59df: jp   z,$5A04]
	addq.b	#1,d0                           	| [$59e2: inc  a]
	jeq	l_5a77                             	| [$59e3: jp   z,$5A77]
	* don't jump to pushed address
	move.l	(sp)+,a0                        	| [$59e6: pop  hl]
l_59e7:
	pea		l_59f7(pc)                          	| [$59e7: ld   hl,$59F7]
												| [$59ea: push hl]
	move.b	l_9310(a6),d0                   	| [$59eb: ld   a,($9310)]
	addq.b	#1,d0                           	| [$59ee: inc  a]
	jeq	l_5a2a                             	| [$59ef: jp   z,$5A2A]
	addq.b	#1,d0                           	| [$59f2: inc  a]
	jeq	l_5a9c                             	| [$59f3: jp   z,$5A9C]
	* don't jump to pushed address
	move.l	(sp)+,a0                        	| [$59f6: pop  hl]
l_59f7:
	move.b	l_9320(a6),d0                   	| [$59f7: ld   a,($9320)]
	addq.b	#1,d0                           	| [$59fa: inc  a]
	jeq	l_5a50                             	| [$59fb: jp   z,$5A50]
	addq.b	#1,d0                           	| [$59fe: inc  a]
	beq.b	0f                               	| [...]
	* jump to the pushed address
	rts                                    	| [$59ff: ret  nz] [...]
0:
	jra	l_5ac1                             	| [$5a00: jp   $5AC1]

l_5a04:
	move.b	#0x03,d3                        	| [$5a04: ld   d,$03]
	move.b	#0x07,d4                        	| [$5a06: ld   e,$07]
	move.b	l_9903(a6),d0                   	| [$5a08: ld   a,($9903)]
	move.b	d0,d5                           	| [$5a0b: ld   h,a]
	move.b	l_9900(a6),d0                   	| [$5a0c: ld   a,($9900)]
	jbsr	l_5b00                            	| [$5a0f: call $5B00]
	jne	l_5a22                             	| [$5a12: jr   nz,$5A22]
	move.b	#0x05,d3                        	| [$5a14: ld   d,$05]
	move.b	#0x0B,d4                        	| [$5a16: ld   e,$0B]
	jbsr	enemy_vs_player_shot_collisions_5b53                            	| [$5a18: call $5B53]
	bne.b	0f                               	| [...]
	rts                                    	| [$5a1b: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$5a1c: push de]
	move.w	#0x0402,d3                          	| [$5a1d: ld   de,$0402]
	jbsr	start_task_d3_0038                            	| [$5a20: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5a21: pop  de]
l_5a22:
	move.b	d0,aux_objects_9300(a6)                   	| [$5a22: ld   ($9300),a]
	clr.b	d0                               	| [$5a25: xor  a]
	move.b	d0,l_9900(a6)                   	| [$5a26: ld   ($9900),a]
	rts                                    	| [$5a29: ret]

l_5a2a:
	move.b	#0x03,d3                        	| [$5a2a: ld   d,$03]
	move.b	#0x07,d4                        	| [$5a2c: ld   e,$07]
	move.b	l_990B(a6),d0                   	| [$5a2e: ld   a,($990B)]
	move.b	d0,d5                           	| [$5a31: ld   h,a]
	move.b	l_9908(a6),d0                   	| [$5a32: ld   a,($9908)]
	jbsr	l_5b00                            	| [$5a35: call $5B00]
	jne	l_5a48                             	| [$5a38: jr   nz,$5A48]
	move.b	#0x05,d3                        	| [$5a3a: ld   d,$05]
	move.b	#0x0B,d4                        	| [$5a3c: ld   e,$0B]
	jbsr	enemy_vs_player_shot_collisions_5b53                            	| [$5a3e: call $5B53]
	bne.b	0f                               	| [...]
	rts                                    	| [$5a41: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$5a42: push de]
	move.w	#0x0402,d3                          	| [$5a43: ld   de,$0402]
	jbsr	start_task_d3_0038                            	| [$5a46: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5a47: pop  de]
l_5a48:
	move.b	d0,l_9310(a6)                   	| [$5a48: ld   ($9310),a]
	clr.b	d0                               	| [$5a4b: xor  a]
	move.b	d0,l_9908(a6)                   	| [$5a4c: ld   ($9908),a]
	rts                                    	| [$5a4f: ret]

l_5a50:
	move.b	#0x03,d3                        	| [$5a50: ld   d,$03]
	move.b	#0x07,d4                        	| [$5a52: ld   e,$07]
	move.b	l_9913(a6),d0                   	| [$5a54: ld   a,($9913)]
	move.b	d0,d5                           	| [$5a57: ld   h,a]
	move.b	l_9910(a6),d0                   	| [$5a58: ld   a,($9910)]
	jbsr	l_5b00                            	| [$5a5b: call $5B00]
	jne	l_5a6f                             	| [$5a5e: jp   nz,$5A6F]
	move.b	#0x05,d3                        	| [$5a61: ld   d,$05]
	move.b	#0x0B,d4                        	| [$5a63: ld   e,$0B]
	jbsr	enemy_vs_player_shot_collisions_5b53                            	| [$5a65: call $5B53]
	bne.b	0f                               	| [...]
	rts                                    	| [$5a68: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$5a69: push de]
	move.w	#0x0402,d3                          	| [$5a6a: ld   de,$0402]
	jbsr	start_task_d3_0038                            	| [$5a6d: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5a6e: pop  de]
l_5a6f:
	move.b	d0,l_9320(a6)                   	| [$5a6f: ld   ($9320),a]
	clr.b	d0                               	| [$5a72: xor  a]
	move.b	d0,l_9910(a6)                   	| [$5a73: ld   ($9910),a]
	rts                                    	| [$5a76: ret]

l_5a77:
	move.b	#0x05,d3                        	| [$5a77: ld   d,$05]
	move.b	#0x10,d4                        	| [$5a79: ld   e,$10]
	move.b	l_9903(a6),d0                   	| [$5a7b: ld   a,($9903)]
	move.b	d0,d5                           	| [$5a7e: ld   h,a]
	move.b	l_9900(a6),d0                   	| [$5a7f: ld   a,($9900)]
	jbsr	l_5ae6                            	| [$5a82: call $5AE6]
	jne	l_5a91                             	| [$5a85: jr   nz,$5A91]
	jbsr	l_5b66                            	| [$5a87: call $5B66]
	bne.b	0f                               	| [...]
	rts                                    	| [$5a8a: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$5a8b: push de]
	move.w	#0x0402,d3                          	| [$5a8c: ld   de,$0402]
	jbsr	start_task_d3_0038                            	| [$5a8f: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5a90: pop  de]
l_5a91:
	move.b	d0,aux_objects_9300(a6)                   	| [$5a91: ld   ($9300),a]
	clr.b	d0                               	| [$5a94: xor  a]
	move.b	d0,l_9900(a6)                   	| [$5a95: ld   ($9900),a]
	move.b	d0,l_9904(a6)                   	| [$5a98: ld   ($9904),a]
	rts                                    	| [$5a9b: ret]

l_5a9c:
	move.b	#0x05,d3                        	| [$5a9c: ld   d,$05]
	move.b	#0x10,d4                        	| [$5a9e: ld   e,$10]
	move.b	l_990B(a6),d0                   	| [$5aa0: ld   a,($990B)]
	move.b	d0,d5                           	| [$5aa3: ld   h,a]
	move.b	l_9908(a6),d0                   	| [$5aa4: ld   a,($9908)]
	jbsr	l_5ae6                            	| [$5aa7: call $5AE6]
	jne	l_5ab6                             	| [$5aaa: jr   nz,$5AB6]
	jbsr	l_5b66                            	| [$5aac: call $5B66]
	bne.b	0f                               	| [...]
	rts                                    	| [$5aaf: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$5ab0: push de]
	move.w	#0x0402,d3                          	| [$5ab1: ld   de,$0402]
	jbsr	start_task_d3_0038                            	| [$5ab4: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5ab5: pop  de]
l_5ab6:
	move.b	d0,l_9310(a6)                   	| [$5ab6: ld   ($9310),a]
	clr.b	d0                               	| [$5ab9: xor  a]
	move.b	d0,l_9908(a6)                   	| [$5aba: ld   ($9908),a]
	move.b	d0,l_990C(a6)                   	| [$5abd: ld   ($990C),a]
	rts                                    	| [$5ac0: ret]

l_5ac1:
	move.b	#0x05,d3                        	| [$5ac1: ld   d,$05]
	move.b	#0x10,d4                        	| [$5ac3: ld   e,$10]
	move.b	l_9913(a6),d0                   	| [$5ac5: ld   a,($9913)]
	move.b	d0,d5                           	| [$5ac8: ld   h,a]
	move.b	l_9910(a6),d0                   	| [$5ac9: ld   a,($9910)]
	jbsr	l_5ae6                            	| [$5acc: call $5AE6]
	jne	l_5adb                             	| [$5acf: jr   nz,$5ADB]
	jbsr	l_5b66                            	| [$5ad1: call $5B66]
	bne.b	0f                               	| [...]
	rts                                    	| [$5ad4: ret  z] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$5ad5: push de]
	move.w	#0x0402,d3                          	| [$5ad6: ld   de,$0402]
	jbsr	start_task_d3_0038                            	| [$5ad9: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5ada: pop  de]
l_5adb:
	move.b	d0,l_9320(a6)                   	| [$5adb: ld   ($9320),a]
	clr.b	d0                               	| [$5ade: xor  a]
	move.b	d0,l_9910(a6)                   	| [$5adf: ld   ($9910),a]
	move.b	d0,l_9914(a6)                   	| [$5ae2: ld   ($9914),a]
	rts                                    	| [$5ae5: ret]

l_5ae6:
	move.b	d0,d6                           	| [$5ae6: ld   l,a]
	sub.b	#0xEB,d0                         	| [$5ae7: sub  $EB]
	cmp.b	#0x0B,d0                         	| [$5ae9: cp   $0B]
	jcs	l_5b1a                             	| [$5aeb: jp   c,$5B1A]
	move.b	d6,d0                           	| [$5aee: ld   a,l]
	sub.b	#0xD3,d0                         	| [$5aef: sub  $D3]
	cmp.b	#0x0B,d0                         	| [$5af1: cp   $0B]
	jcs	l_5b2d                             	| [$5af3: jp   c,$5B2D]
	move.b	d6,d0                           	| [$5af6: ld   a,l]
	sub.b	#0xBB,d0                         	| [$5af7: sub  $BB]
	cmp.b	#0x0B,d0                         	| [$5af9: cp   $0B]
	jcs	l_5b40                             	| [$5afb: jp   c,$5B40]
	clr.b	d0                               	| [$5afe: xor  a]
	rts                                    	| [$5aff: ret]

l_5b00:
	move.b	d0,d6                           	| [$5b00: ld   l,a]
	sub.b	#0xF0,d0                         	| [$5b01: sub  $F0]
	add.b	d3,d0                            	| [$5b03: add  a,d]
	cmp.b	d4,d0                            	| [$5b04: cp   e]
	jcs	l_5b1a                             	| [$5b05: jp   c,$5B1A]
	move.b	d6,d0                           	| [$5b08: ld   a,l]
	sub.b	#0xD8,d0                         	| [$5b09: sub  $D8]
	add.b	d3,d0                            	| [$5b0b: add  a,d]
	cmp.b	d4,d0                            	| [$5b0c: cp   e]
	jcs	l_5b2d                             	| [$5b0d: jp   c,$5B2D]
	move.b	d6,d0                           	| [$5b10: ld   a,l]
	sub.b	#0xC0,d0                         	| [$5b11: sub  $C0]
	add.b	d3,d0                            	| [$5b13: add  a,d]
	cmp.b	d4,d0                            	| [$5b14: cp   e]
	jcs	l_5b40                             	| [$5b15: jp   c,$5B40]
	clr.b	d0                               	| [$5b18: xor  a]
	rts                                    	| [$5b19: ret]

l_5b1a:
	move.w	#0x0004,d1                      	| [$5b1a: ld   bc,$0004]
	jbsr	exx                               	| [$5b1d: exx]
	lea	l_90B0(a6),a0                      	| [$5b1e: ld   hl,$90B0]
	move.w	#0x0010,d3                      	| [$5b21: ld   de,$0010]
	move.b	#0x0C,d1                        	| [$5b24: ld   b,$0C]
	lea	l_9860(a6),a3                      	| [$5b26: ld   iy,$9860]
	jra	l_5b9e                             	| [$5b2a: jp   $5B9E]

l_5b2d:
	move.w	#0x0004,d1                      	| [$5b2d: ld   bc,$0004]
	jbsr	exx                               	| [$5b30: exx]
	lea	l_9170(a6),a0                      	| [$5b31: ld   hl,$9170]
	move.w	#0x0010,d3                      	| [$5b34: ld   de,$0010]
	move.b	#0x0C,d1                        	| [$5b37: ld   b,$0C]
	lea	l_9890(a6),a3                      	| [$5b39: ld   iy,$9890]
	jra	l_5b9e                             	| [$5b3d: jp   $5B9E]

l_5b40:
	move.w	#0x0004,d1                      	| [$5b40: ld   bc,$0004]
	jbsr	exx                               	| [$5b43: exx]
	lea	l_9230(a6),a0                      	| [$5b44: ld   hl,$9230]
	move.w	#0x0010,d3                      	| [$5b47: ld   de,$0010]
	move.b	#0x0C,d1                        	| [$5b4a: ld   b,$0C]
	lea	l_98C0(a6),a3                      	| [$5b4c: ld   iy,$98C0]
	jra	l_5b9e                             	| [$5b50: jp   $5B9E]

enemy_vs_player_shot_collisions_5b53:
	move.w	#0x0008,d1                      	| [$5b53: ld   bc,$0008]
	jbsr	exx                               	| [$5b56: exx]
	move.w	#0x0010,d3                      	| [$5b57: ld   de,$0010]
	move.b	#0x0A,d1                        	| [$5b5a: ld   b,$0A]
	lea	enemy_objects_9010(a6),a0                      	| [$5b5c: ld   hl,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$5b5f: ld   iy,$9810]
	jra	bullet_vs_ship_collision_5b79                             	| [$5b63: jp   $5B79]

l_5b66:
	move.w	#0x0008,d1                      	| [$5b66: ld   bc,$0008]
	jbsr	exx                               	| [$5b69: exx]
	move.w	#0x0010,d3                      	| [$5b6a: ld   de,$0010]
	move.b	#0x0A,d1                        	| [$5b6d: ld   b,$0A]
	lea	enemy_objects_9010(a6),a0                      	| [$5b6f: ld   hl,$9010]
	lea	sprite_shadow_ram_9800+0x10(a6),a3                      	| [$5b72: ld   iy,$9810]
	jra	l_5bc3                             	| [$5b76: jp   $5BC3]

* tests collisions for enemy ships attacking vs bullets
* and also player ship collision vs enemy bullets
*
* enemies in distant swarm are not handled here
*
bullet_vs_ship_collision_5b79:
	move.b	(a0),d0                         	| [$5b79: ld   a,(hl)]
	addq.b	#1,d0                           	| [$5b7a: inc  a]
	jne	l_5b95                             	| [$5b7b: jp   nz,$5B95]
	jbsr	exx                               	| [$5b7e: exx]
	move.b	(displayed_x_03,a3),d0              | [$5b7f: ld   a,(iy+$03)]
	sub.b	d5,d0                            	| [$5b82: sub  h]
	add.b	d3,d0                            	| [$5b83: add  a,d]
	cmp.b	d4,d0                            	| [$5b84: cp   e]
	jcc	l_5b96                             	| [$5b85: jr   nc,$5B96]
	move.b	(displayed_y_00,a3),d0                    	| [$5b87: ld   a,(iy+$00)]
	sub.b	d6,d0                            	| [$5b8a: sub  l]
	add.b	d3,d0                            	| [$5b8b: add  a,d]
	cmp.b	d4,d0                            	| [$5b8c: cp   e]
	jcc	l_5b96                             		| [$5b8d: jr   nc,$5B96] jumps: no collision
	jbsr	exx                               	| [$5b8f: exx]
	tst.b	invincible_flag
	jeq		0f
	* ship shot

	* check if this is the player ship or another one
	* 9330 or 9340, making this cheat better than MAME cheat
	* which prevents ships not in swarm to be shot
	lea	bullet_sprite_structures_9330(a6),a4
	cmp.l	a0,a4
	jne		0f
	rts
0:
	lea	(0x10,a4),a4   | 9340
	cmp.l	a0,a4
	jne		0f
	rts
0:
	lea	(0x10,a4),a4   | 9350
	cmp.l	a0,a4
	jne		0f
	rts
0:
	move.b	#0xF0,d0                        	| [$5b90: ld   a,$F0]
	move.b	d0,(a0)                         	| [$5b92: ld   (hl),a]
	tst.b	d0                               	| [$5b93: and  a]
	rts                                    	| [$5b94: ret]

l_5b95:
	jbsr	exx                               	| [$5b95: exx]
l_5b96:
	add.w	d1,a3                            	| [$5b96: add  iy,bc]
	jbsr	exx                               	| [$5b98: exx]
	add.w	d3,a0                            	| [$5b99: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	bullet_vs_ship_collision_5b79                             	| [$5b9a: djnz $5B79]
	clr.b	d0                               	| [$5b9c: xor  a]
	rts                                    	| [$5b9d: ret]

l_5b9e:
	move.b	(a0),d0                         	| [$5b9e: ld   a,(hl)]
	addq.b	#1,d0                           	| [$5b9f: inc  a]
	jne	l_5bb9                             	| [$5ba0: jp   nz,$5BB9]
	* enemy active
	jbsr	exx                               	| [$5ba3: exx]
	move.b	(displayed_x_03,a3),d0                    	| [$5ba4: ld   a,(iy+$03)]
	sub.b	d5,d0                            	| [$5ba7: sub  h]
	add.b	d3,d0                            	| [$5ba8: add  a,d]
	cmp.b	d4,d0                            	| [$5ba9: cp   e]
	jcc	l_5bba                             	| [$5baa: jr   nc,$5BBA]
	* enemy shot in swarm (far away)
	jbsr	exx                               	| [$5bac: exx]
	* mark enemy as dead (0xF0 is the flag used for that)
	move.b	#0xF0,d0                        	| [$5bad: ld   a,$F0]
	move.b	d0,(a0)                         	| [$5baf: ld   (hl),a]
	jbsr	exx                               	| [$5bb0: exx]
	movem.w	d3/d4,-(sp)                    	| [$5bb1: push de]
	move.w	#0x0401,d3                      | [$5bb2: ld   de,$0401]
	jbsr	start_task_d3_0038              | [$5bb5: rst  $38]
	movem.w	(sp)+,d3/d4                    	| [$5bb6: pop  de]
	tst.b	d0                               	| [$5bb7: and  a]
	rts                                    	| [$5bb8: ret]

l_5bb9:
	jbsr	exx                               	| [$5bb9: exx]
l_5bba:
	add.w	d1,a3                            	| [$5bba: add  iy,bc]
	jbsr	exx                               	| [$5bbc: exx]
	add.w	d3,a0                            	| [$5bbd: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5b9e                             	| [$5bbe: djnz $5B9E]
	jbsr	exx                               	| [$5bc0: exx]
	clr.b	d0                               	| [$5bc1: xor  a]
	rts                                    	| [$5bc2: ret]

l_5bc3:
	move.b	(a0),d0                         	| [$5bc3: ld   a,(hl)]
	addq.b	#1,d0                           	| [$5bc4: inc  a]
	jne	l_5be1                             	| [$5bc5: jp   nz,$5BE1]
	jbsr	exx                               	| [$5bc8: exx]
	move.b	(displayed_x_03,a3),d0                    	| [$5bc9: ld   a,(iy+$03)]
	sub.b	d5,d0                            	| [$5bcc: sub  h]
	add.b	d3,d0                            	| [$5bcd: add  a,d]
	cmp.b	d4,d0                            	| [$5bce: cp   e]
	jcc	l_5be2                             	| [$5bcf: jr   nc,$5BE2]
	move.b	(0x00,a3),d0                    	| [$5bd1: ld   a,(iy+$00)]
	sub.b	d6,d0                            	| [$5bd4: sub  l]
	addq.b	#0x05,d0                        	| [$5bd5: add  a,$05]
	cmp.b	#0x0B,d0                         	| [$5bd7: cp   $0B]
	jcc	l_5be2                             	| [$5bd9: jr   nc,$5BE2]
	jbsr	exx                               	| [$5bdb: exx]
	move.b	#0xF0,d0                        	| [$5bdc: ld   a,$F0]
	move.b	d0,(a0)                         	| [$5bde: ld   (hl),a]
	tst.b	d0                               	| [$5bdf: and  a]
	rts                                    	| [$5be0: ret]

l_5be1:
	jbsr	exx                               	| [$5be1: exx]
l_5be2:
	add.w	d1,a3                            	| [$5be2: add  iy,bc]
	jbsr	exx                               	| [$5be4: exx]
	add.w	d3,a0                            	| [$5be5: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5bc3                             	| [$5be6: djnz $5BC3]
	clr.b	d0                               	| [$5be8: xor  a]
	rts                                    	| [$5be9: ret]

l_5c1f:
	lea	l_9543(a6),a0                      	| [$5c1f: ld   hl,$9543]
	move.b	(a0),d0                         	| [$5c22: ld   a,(hl)]
	                               	| [$5c23: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5c24: ret  z] [...]
0:
	subq.b	#1,(a0)                         	| [$5c25: dec  (hl)]
	sne		d7
	movem.w	d0/d7,-(sp)                        	| [$5c26: push af]
	addq.w	#1,a0                           	| [$5c27: inc  hl]
	move.b	(a0),d0                         	| [$5c28: ld   a,(hl)]
	jbsr	play_sound_5c38                            	| [$5c29: call $5C38]
	movem.w	(sp)+,d0/d7                        	| [$5c2c: pop  af]
	tst.b	d7
	bne.b	0f                               	| [...]
	rts                                    	| [$5c2d: ret  z] [...]
0:
	subq.b	#1,d0                           	| [$5c2e: dec  a]
	clr.w	d1                               	| [$5c2f: ld   b,$00]
	move.b	d0,d1                           	| [$5c31: ld   c,a]
	move.l	a0,a1                           	| [$5c32: ld   e,l]
												| [$5c33: ld   d,h]
	addq.w	#1,a0                           	| [$5c34: inc  hl]
	jbsr	ldir                              	| [$5c35: ldir]
	rts                                    	| [$5c37: ret]

play_sound_5c38:
	jbsr	osd_sound_start
	                       	| [$5c38: ld   ($C100),a]
	                       	| [$5c3b: ld   ($C080),a]
	rts                                    	| [$5c3e: ret]

l_5c3f:

	move.l	a0,-(sp)                        	| [$5c3f: push hl]
	move.w	d0,-(sp)                        	| [$5c40: push af]
	move.b	game_in_play_9669(a6),d0                   	| [$5c41: ld   a,($9669)]
	                               	| [$5c44: and  a]
	jne	l_5c5d                             	| [$5c45: jr   nz,$5C5D]
	move.w	(sp)+,d0                        	| [$5c47: pop  af] [uncovered]
	move.l	(sp)+,a0                        	| [$5c48: pop  hl] [uncovered]
	rts                                    	| [$5c49: ret] [uncovered]

l_5c4a:

	move.l	a0,-(sp)                        	| [$5c4a: push hl]
	move.w	d0,-(sp)                        	| [$5c4b: push af]
	move.b	game_in_play_9669(a6),d0                   	| [$5c4c: ld   a,($9669)]
	                               	| [$5c4f: and  a]
	jne	l_5c5d                             	| [$5c50: jr   nz,$5C5D]
	move.b	demo_sounds_9446(a6),d0                   	| [$5c52: ld   a,($9446)]
	                               	| [$5c55: and  a]
	jne	l_5c5d                             	| [$5c56: jr   nz,$5C5D]
	move.w	(sp)+,d0                        	| [$5c58: pop  af] [uncovered]
	move.l	(sp)+,a0                        	| [$5c59: pop  hl] [uncovered]
	rts                                    	| [$5c5a: ret] [uncovered]

set_music_sequence_5c5b:

	move.l	a0,-(sp)                        	| [$5c5b: push hl]
	move.w	d0,-(sp)                        	| [$5c5c: push af]
l_5c5d:
	lea	l_9543(a6),a0                      	| [$5c5d: ld   hl,$9543]
	addq.b	#1,(a0)                         	| [$5c60: inc  (hl)]
	move.b	(a0),d0                         	| [$5c61: ld   a,(hl)]
	jbsr	fetch_a0_plus_d0_0008                | [$5c62: rst  $08]
	move.w	(sp)+,d0                        	| [$5c63: pop  af]
	move.b	d0,(a0)                         	| [$5c64: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$5c65: pop  hl]
	rts                                    	| [$5c66: ret]

l_5c67:
	move.b	sub_state_942C(a6),d0                   	| [$5c67: ld   a,($942C)] [uncovered]
	sub.b	#0x08,d0                         	| [$5c6a: sub  $08]
	cmp.b	#0x03,d0                         	| [$5c6c: cp   $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5c6e: ret  nc] [...]
0:
	jra	l_5c78                             	| [$5c6f: jp   $5C78]

l_5c72:
	move.b	game_in_play_9669(a6),d0                   	| [$5c72: ld   a,($9669)]
	                               	| [$5c75: and  a]
	jne	l_5c67                             	| [$5c76: jr   nz,$5C67]
l_5c78:
	clr.b	d0                               	| [$5c78: xor  a]
	jbsr	set_music_sequence_5c5b                            	| [$5c79: call $5C5B]
	READ_ROM_BYTE	0x098B,d0                       	| [$5c7c: ld   a,($098B)]
	jra	set_music_sequence_5c5b                             	| [$5c7f: jp   $5C5B]
	
l_5c82:
	READ_ROM_BYTE	0x0C27,d0                       	| [$5c82: ld   a,($0C27)]
	jra	l_5c4a                             	| [$5c85: jp   $5C4A]

music_off_5c88:
	move.b	#0x82,d0                       	| [$5c88: ld   a,($121C)]
	jra	set_music_sequence_5c5b                             	| [$5c8b: jp   $5C5B]

l_5c8e:
	READ_ROM_BYTE	0x0DF5,d0                       	| [$5c8e: ld   a,($0DF5)]
	jra	l_5c4a                             	| [$5c91: jp   $5C4A]

l_5c94:
	READ_ROM_BYTE	0x0F51,d0                       	| [$5c94: ld   a,($0F51)]
	jra	l_5c4a                             	| [$5c97: jp   $5C4A]

l_5c9a:
	READ_ROM_BYTE	0x00F8,d0                       	| [$5c9a: ld   a,($00F8)]
	jbsr	set_music_sequence_5c5b                            	| [$5c9d: call $5C5B]
	READ_ROM_BYTE	0x06D4,d0                       	| [$5ca0: ld   a,($06D4)]
	jra	l_5c3f                             	| [$5ca3: jp   $5C3F]

l_5ca6:
	READ_ROM_BYTE	0x0079,d0                       	| [$5ca6: ld   a,($0079)]
	jra	l_5c4a                             	| [$5ca9: jp   $5C4A]

l_5cac:
	READ_ROM_BYTE	0x0136,d0                       	| [$5cac: ld   a,($0136)]
	jra	l_5c4a                             	| [$5caf: jp   $5C4A]

l_5cb2:
	move.b	(0x00,a3),d0                    	| [$5cb2: ld   a,(iy+$00)]
	cmp.b	#0x60,d0                         	| [$5cb5: cp   $60]
	jcs	l_5cda                             	| [$5cb7: jr   c,$5CDA]
	cmp.b	#0xB0,d0                         	| [$5cb9: cp   $B0]
	jcs	l_5cc8                             	| [$5cbb: jr   c,$5CC8]
l_5cbd:
	move.b	l_910E(a6),d0                   	| [$5cbd: ld   a,($910E)]
												| [$5cc0: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5cc1: ret  nz] [...]
0:
	READ_ROM_BYTE	0x1258,d0                       	| [$5cc2: ld   a,($1258)]
	jra	l_5c4a                             	| [$5cc5: jp   $5C4A]

l_5cc8:
	move.b	l_910E(a6),d0                   	| [$5cc8: ld   a,($910E)]
	cmp.b	#0x17,d0                         	| [$5ccb: cp   $17]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5ccd: ret  nc] [...]
0:
	READ_ROM_BYTE	0x0810,d0                       	| [$5cce: ld   a,($0810)]
	move.b	d0,l_910E(a6)                   	| [$5cd1: ld   ($910E),a]
	READ_ROM_BYTE	0x37B5,d0                       	| [$5cd4: ld   a,($37B5)]
	jra	l_5c4a                             	| [$5cd7: jp   $5C4A]

l_5cda:
	READ_ROM_BYTE	0x3800,d0                       	| [$5cda: ld   a,($3800)]
	move.b	d0,l_910E(a6)                   	| [$5cdd: ld   ($910E),a]
	READ_ROM_BYTE	0x01DD,d0                       	| [$5ce0: ld   a,($01DD)]
	jra	l_5c4a                             	| [$5ce3: jp   $5C4A]

l_5ce6:
	move.b	general_fast_timer_9400(a6),d0                   	| [$5ce6: ld   a,($9400)]
	and.b	#0x01,d0                         	| [$5ce9: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5ceb: ret  z] [...]
0:
	move.b	l_985B(a6),d0                   	| [$5cec: ld   a,($985B)]
	lea	player_ship_angle_9001(a6),a0                      	| [$5cef: ld   hl,$9001]
	sub.b	(a0),d0                          	| [$5cf2: sub  (hl)]
	add.b	#0x18,d0                         	| [$5cf3: add  a,$18]
	cmp.b	#0x31,d0                         	| [$5cf5: cp   $31]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5cf7: ret  nc] [...]
0:
	READ_ROM_BYTE	0x098A,d0                       	| [$5cf8: ld   a,($098A)]
	jra	l_5c4a                             	| [$5cfb: jp   $5C4A]

l_5cfe:
	READ_ROM_BYTE	0x06FC,d0                       	| [$5cfe: ld   a,($06FC)]
	jra	l_5c4a                             	| [$5d01: jp   $5C4A]

l_5d04:
	move.b	death_ray_sattelite_x_932e(a6),d0                   	| [$5d04: ld   a,($932E)]
	lea	player_ship_angle_9001(a6),a0                      	| [$5d07: ld   hl,$9001]
	sub.b	(a0),d0                          	| [$5d0a: sub  (hl)]
	add.b	#0x38,d0                         	| [$5d0b: add  a,$38]
	cmp.b	#0x71,d0                         	| [$5d0d: cp   $71]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5d0f: ret  nc] [...]
0:
	READ_ROM_BYTE	0x0DE1,d0                       	| [$5d10: ld   a,($0DE1)]
	jra	l_5c4a                             	| [$5d13: jp   $5C4A]

l_5d16:
	READ_ROM_BYTE	0x1063,d0                       	| [$5d16: ld   a,($1063)]
	jra	set_music_sequence_5c5b                             	| [$5d19: jp   $5C5B]

l_5d1c:
	READ_ROM_BYTE	0x40EC,d0                       	| [$5d1c: ld   a,($40EC)]
	jra	l_5c4a                             	| [$5d1f: jp   $5C4A]

l_5d22:
	move.b	(0x00,a3),d0                    	| [$5d22: ld   a,(iy+$00)]
	cmp.b	#0x60,d0                         	| [$5d25: cp   $60]
	jcs	l_5d39                             	| [$5d27: jr   c,$5D39]
	cmp.b	#0xB0,d0                         	| [$5d29: cp   $B0]
	jcs	l_5d33                             	| [$5d2b: jr   c,$5D33]
	READ_ROM_BYTE	0x0DD6,d0                       	| [$5d2d: ld   a,($0DD6)]
	jra	l_5c4a                             	| [$5d30: jp   $5C4A]

l_5d33:
	READ_ROM_BYTE	0x00B7,d0                       	| [$5d33: ld   a,($00B7)]
	jra	l_5c4a                             	| [$5d36: jp   $5C4A]

l_5d39:
	READ_ROM_BYTE	0x00A0,d0                       	| [$5d39: ld   a,($00A0)]
	jra	l_5c4a                             	| [$5d3c: jp   $5C4A]

l_5d3f:
	READ_ROM_BYTE	0x00F7,d0                       	| [$5d3f: ld   a,($00F7)]
	jra	l_5c4a                             	| [$5d42: jp   $5C4A]

l_5d45:
	move.b	(0x00,a3),d0                    	| [$5d45: ld   a,(iy+$00)]
	cmp.b	#0x60,d0                         	| [$5d48: cp   $60]
	jcs	l_5d5c                             	| [$5d4a: jr   c,$5D5C]
	cmp.b	#0xB0,d0                         	| [$5d4c: cp   $B0]
	jcs	l_5d56                             	| [$5d4e: jr   c,$5D56]
	READ_ROM_BYTE	0x2E24,d0                       	| [$5d50: ld   a,($2E24)] [uncovered]
	jra	l_5c4a                             	| [$5d53: jp   $5C4A] [uncovered]

l_5d56:
	READ_ROM_BYTE	0x32AC,d0                       	| [$5d56: ld   a,($32AC)]
	jra	l_5c4a                             	| [$5d59: jp   $5C4A]

l_5d5c:
	READ_ROM_BYTE	0x1B7D,d0                       	| [$5d5c: ld   a,($1B7D)]
	jra	l_5c4a                             	| [$5d5f: jp   $5C4A]

l_5d62:
	READ_ROM_BYTE	0x09A2,d0                       	| [$5d62: ld   a,($09A2)]
	jra	l_5c4a                             	| [$5d65: jp   $5C4A]

l_5d68:
	READ_ROM_BYTE	0x09AA,d0                       	| [$5d68: ld   a,($09AA)]
	jra	l_5c4a                             	| [$5d6b: jp   $5C4A]

l_5d6e:
	READ_ROM_BYTE	0x121C,d0                       	| [$5d6e: ld   a,($121C)]
	jbsr	set_music_sequence_5c5b                            	| [$5d71: call $5C5B]
	READ_ROM_BYTE	0x09F9,d0                       	| [$5d74: ld   a,($09F9)]
	jbsr	set_music_sequence_5c5b                            	| [$5d77: call $5C5B]
	READ_ROM_BYTE	0x4084,d0                       	| [$5d7a: ld   a,($4084)]
	jbsr	l_5c4a                            	| [$5d7d: call $5C4A]
	READ_ROM_BYTE	0x390E,d0                       	| [$5d80: ld   a,($390E)]
	jra	l_5c4a                             	| [$5d83: jp   $5C4A]

l_5d86:
	READ_ROM_BYTE	0x4C95,d0                       	| [$5d86: ld   a,($4C95)]
	jra	l_5c4a                             	| [$5d89: jp   $5C4A]

l_5d8c:
	READ_ROM_BYTE	0x4C8C,d0                       	| [$5d8c: ld   a,($4C8C)]
	jra	l_5c3f                             	| [$5d8f: jp   $5C3F]

l_5d92:
	READ_ROM_BYTE	0x3512,d0                       	| [$5d92: ld   a,($3512)]
	jbsr	l_5c3f                            	| [$5d95: call $5C3F]

	READ_ROM_BYTE	0x1366,d0                       	| [$5d98: ld   a,($1366)]
	jra	set_music_sequence_5c5b                             	| [$5d9b: jp   $5C5B]

l_5d9e:
	READ_ROM_BYTE	0x11BB,d0                       	| [$5d9e: ld   a,($11BB)]
	jra	l_5c3f                             	| [$5da1: jp   $5C3F]

l_5da4:
	READ_ROM_BYTE	0x0A32,d0                       	| [$5da4: ld   a,($0A32)]
	jra	l_5c3f                             	| [$5da7: jp   $5C3F]

l_5daa:
	READ_ROM_BYTE	0x1411,d0                       	| [$5daa: ld   a,($1411)]
	jra	l_5c3f                             	| [$5dad: jp   $5C3F]

l_5db0:
	READ_ROM_BYTE	0x00C5,d0                       	| [$5db0: ld   a,($00C5)]
	jra	l_5c3f                             	| [$5db3: jp   $5C3F]

l_5db6:
	READ_ROM_BYTE	0x2255,d0                       	| [$5db6: ld   a,($2255)]
	jra	set_music_sequence_5c5b                             	| [$5db9: jp   $5C5B]

l_5dbc:
	READ_ROM_BYTE	0x24FC,d0                       	| [$5dbc: ld   a,($24FC)]
	jra	set_music_sequence_5c5b                             	| [$5dbf: jp   $5C5B]

l_5dc2:
	READ_ROM_BYTE	0x1203,d0                       	| [$5dc2: ld   a,($1203)]
	jra	set_music_sequence_5c5b                             	| [$5dc5: jp   $5C5B]

l_5dc8:
	READ_ROM_BYTE	0x08FF,d0                       	| [$5dc8: ld   a,($08FF)]
	jra	set_music_sequence_5c5b                             	| [$5dcb: jp   $5C5B]

l_5dce:
	READ_ROM_BYTE	0x154F,d0                       	| [$5dce: ld   a,($154F)]
	jra	set_music_sequence_5c5b                             	| [$5dd1: jp   $5C5B]

l_5dd4:
	READ_ROM_BYTE	0x23C5,d0                       	| [$5dd4: ld   a,($23C5)]
	jra	set_music_sequence_5c5b                             	| [$5dd7: jp   $5C5B]

title_screen_init_5e1a:
	jbsr	music_off_5c88                            	| [$5e1a: call $5C88]
	jbsr	l_5dd4                            	| [$5e1d: call $5DD4]
	move.b	l_9440(a6),d0                   	| [$5e20: ld   a,($9440)]
	                               	| [$5e23: and  a]
	jne	next_game_state_080b                             	| [$5e24: jp   nz,$080B]
	jbsr	l_135a                            	| [$5e27: call $135A]
	jra	next_game_state_080b                             	| [$5e2a: jp   $080B]

l_5f4d:
	jbsr	update_starfield_in_game_3804                            	| [$5f4d: call $3804]
	jbsr	l_5c9a                            	| [$5f50: call $5C9A]
	lea	enemy_objects_9010(a6),a0                      	| [$5f53: ld   hl,$9010]
	lea	l_9011(a6),a1                      	| [$5f56: ld   de,$9011]
	clr.b	(a0)                             	| [$5f59: ld   (hl),$00]
	move.w	#0x039F,d1                          	| [$5f5b: ld   bc,$039F]
	jbsr	ldir                              	| [$5f5e: ldir]
	lea	player_1_data_9620(a6),a0                      	| [$5f60: ld   hl,$9620]
	* clear player data zone
	lea	l_9621(a6),a1                      	| [$5f63: ld   de,$9621]
	clr.b	(a0)                             	| [$5f66: ld   (hl),$00]
	move.w	#0x003F,d1                      	| [$5f68: ld   bc,$003F]
	jbsr	ldir                              	| [$5f6b: ldir]
	
	* setting this sets starting stage to "5" but still has the
	* "2 warps to neptune" message at start
	*move.b	#4,current_stage_number_9609+0x20(a6)
	
	moveq	#0,d0                               	| [$5f6d: xor  a]
	move.b	d0,current_player_9662(a6)                   	| [$5f6e: ld   ($9662),a]
	move.b	d0,d5                           	| [$5f71: ld   h,a]
	move.b	d0,d6                           	| [$5f72: ld   l,a]
	move.b	d0,player_1_score_9663(a6)                   	| [$5f73: ld   ($9663),a]
	move.b	d0,player_2_score_9666(a6)                   	| [$5f76: ld   ($9666),a]
	STORE_WORD	d0,l_9664(a6)        	| [$5f79: ld   ($9664),hl]
	STORE_WORD	d0,l_9667(a6)        	| [$5f7c: ld   ($9667),hl]
	STORE_WORD	d0,l_9627(a6)        	| [$5f7f: ld   ($9627),hl]
	STORE_WORD	d0,l_9647(a6)        	| [$5f82: ld   ($9647),hl]
	* set number of lives for player
	move.b	start_lives_9441(a6),d0                   	| [$5f85: ld   a,($9441)]
	move.b	d0,player_1_data_9620(a6)                   	| [$5f88: ld   ($9620),a]
	move.b	d0,d1                           	| [$5f8b: ld   b,a]
	move.b	l_9458(a6),d0                   	| [$5f8c: ld   a,($9458)]
	                               	| [$5f8f: and  a]
	jeq	l_5f96                             	| [$5f90: jr   z,$5F96]
	move.b	d1,d0                           	| [$5f92: ld   a,b] [uncovered]
	move.b	d0,player_2_data_9640(a6)                   	| [$5f93: ld   ($9640),a] [uncovered]
l_5f96:
	move.w	#0x0400,d3                          	| [$5f96: ld   de,$0400]
	jbsr	start_task_d3_0038                            	| [$5f99: rst  $38]
	addq.b	#1,d0                           	| [$5f9a: inc  a]
	move.b	d0,l_962C(a6)                   	| [$5f9b: ld   ($962C),a]
	move.b	d0,l_964C(a6)                   	| [$5f9e: ld   ($964C),a]
	move.b	#0x24,d0                        	| [$5fa1: ld   a,$24]
	move.b	d0,l_9621(a6)                   	| [$5fa3: ld   ($9621),a]
	move.b	d0,l_9641(a6)                   	| [$5fa6: ld   ($9641),a]
	move.b	d0,l_9625(a6)                   	| [$5fa9: ld   ($9625),a]
	move.b	d0,l_9645(a6)                   	| [$5fac: ld   ($9645),a]
	* useless                   	| [$5faf: ld   a,($9444)]
	move.b	#0x5A,d0                        	| [$5fb2: ld   a,$5A]
	move.b	d0,distance_to_center_9465(a6)                   	| [$5fb4: ld   ($9465),a]
	jbsr	disable_game_objects_0e43                            	| [$5fb7: call $0E43]
	jbsr	randomize_18_star_positions_3af2                            	| [$5fba: call $3AF2]
	jra	next_game_state_080b                             	| [$5fbd: jp   $080B]

* < D0: byte possibly containing lowernibble > 9
* > D0: value corrected to full BCD
daa:
    move.w    d1,-(a7)
    move.b    d0,d1
    and.w    #0xF,d1
    sub.b    #10,d1
    bcs.b    daa_out        | no need to do anything
    * D1 = A-F: correct
    add.b    #0x16,d0
daa_out:
    move.w    (a7)+,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
lddr:
    subq.w    #1,d1
    addq.w  #1,a0
    addq.w  #1,a1
0:
    move.b    -(a0),-(a1)
    dbf        d1,0b

    subq.w  #1,a0
    subq.w  #1,a1
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: decremented (16 bit)
ldi:
    move.b    (a0)+,(a1)+
    subq.w    #1,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < D1.W: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpir:
    subq.w    #1,d1
0:
    cmp.b    (a0)+,d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

* < all registers d1-d4/a0/a1/a4
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 56
exx:
	move.l	a6,-(a7)
    lea     regscopy+28,a6
    * save current regs in region 1
    movem.l d1-d4/a0/a1/a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+28,a6
    movem.l (a6),d1-d4/a0/a1/a4
    * now copy region 1 to region 2
    movem.l d1-d4/a0/a1/a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d4/a0/a1/a4
    movem.l d1-d4/a0/a1/a4,(a6)
    movem.l (a7)+,d1-d4/a0/a1/a4
	move.l	(a7)+,a6
    rts
